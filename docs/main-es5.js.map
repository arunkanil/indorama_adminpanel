{"version":3,"sources":["webpack:///src/app/views/login/authentication.service.ts","webpack:///src/app/graphql.module.ts","webpack:///src/app/views/error/404.component.ts","webpack:///src/environments/environment.ts","webpack:///src/app/containers/default-layout/index.ts","webpack:///src/app/containers/index.ts","webpack:///src/app/containers/default-layout/default-layout.component.ts","webpack:///src/app/views/error/500.component.html","webpack:///src/app/views/login/login.component.ts","webpack:///src/app/data.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/app.routing.ts","webpack:///src/app/_nav.ts","webpack:///src/app/views/error/500.component.ts","webpack:///src/app/containers/default-layout/default-layout.component.html","webpack:///src/app/views/error/404.component.html","webpack:///src/app/views/login/login.component.html","webpack:///src/app/views/login/auth.guard.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["AuthenticationService","http","toastr","currentUserSubject","JSON","parse","localStorage","getItem","currentUser","asObservable","console","log","value","data","post","apiUrl","pipe","user","jwt","UserType","setItem","username","id","email","Name","ContactNumber","stringify","next","error","removeItem","providedIn","uri","createApollo","httpLink","basic","operation","context","headers","Accept","auth","token","Authorization","link","from","create","cache","GraphQLModule","exports","providers","provide","useFactory","deps","P404Component","template","environment","production","DefaultLayoutComponent","router","authenticationService","sidebarMinimized","userName","navItems","filter","item","role","subscribe","x","e","logout","navigate","selector","LoginComponent","dataservice","route","loginForm","result","loading","currentUserValue","returnUrl","snapshot","queryParams","usForm","login","success","message","FarmDemosQuery","FarmDemoQuery","AddFarmDemoMutation","UpdateFarmDemo","CropsQuery","CropsMutation","UpdateCrops","StatesQuery","StatesMutation","UpdateState","LGAquery","LGAmutation","UpdateLGA","Villagesquery","VillageMutation","UpdateVillage","Areasquery","AreaMutation","UpdateArea","MarketQuery","MarketMutation","UpdateMarket","CropPricesQuery","UpdateCropPriceMutation","CropPriceMutation","RetailerQuery","SoilTestQuery","SingleSoilTestQuery","UpdateSoilTest","UsersQuery","AddSoilTestResult","UpdateSoilTestResult","GetSingleRetailerQuery","updateRetailerProfPic","updateRetailerQuery","getRetailerCategories","createdRetailerProducts","updateRetailerProducts","DeleteStatesMutation","DeleteLGAMutation","DeleteAreaMutation","DeleteVillageMutation","DeleteCropMutation","DeleteMarketMutation","DeleteFarmdemo","DeleteRetailerProduct","DeleteFile","DeleteUser","DeleteBestPractice","DeleteActivity","DeleteMarketplaceProduct","CreateAgronomist","getAgronomist","queryUsersLarge","getIndoramaUpdates","UpdateIndoramaUpdates","CreateIndoramaUpdates","GetMarketplace","GetMarketplaceSingleProduct","CreateMarketplaceProduct","UpdateMarketplaceProduct","UpdateMarketplaceProductImg","GetBestCropPractices","CreateBestCropPractices","GetMarketplaceCategories","GetActivities","GetSingleActivity","CreateActivities","UpdateActivity","getDashboardStats","getCropPricesDashboard","getFarmDemoStatsDashboard","getallChats","getChatMessages","getSurveys","CreateSurveys","getSurveyResults","deleteSurvey","getDashboardAd","getRetailerAd","updateDashboardAd","updateRetailerAd","getSmsCampaigns","createSMSCampaign","getPendingRetailerApprovals","readApprovalCropPrices","DataService","apollo","baseURL","params","URLSearchParams","errorMessage","status","Message","httpOptions1","observe","api_token","message_id","get","handleError","fromDate","toDate","masterType","watchQuery","query","fetchPolicy","variables","state","market","limit","start","key","isAskIndorama","undefined","page","pageSize","mutate","mutation","lga","area","village","isAllFarmers","SurveyTitle","SurveyDescription","Fields","errorPolicy","searchTerm","lgaid","PublicationState","publishedAt","Rejected","publicationState","confirmed","blocked","farmdemo","farmer","Farmer","latitude","parseFloat","FarmLocationLatitude","longitude","FarmLocationLongitude","crop","Crops","AreaOfField","farmerPractise","ComponentFarmDemoFarmDemoPractiseInput","indoramaPractise","dateOfHarvesting","season","Season","Status","isPesticidesUsed","images","PostalCode","image","price","Price","unit","Unit","parseInt","published","Date","imageid","Title","Body","Images","Image","media","content","cropImage","itemName","userId","contactNumber","String","availableQty","category","description","FarmerName","Latitude","Longitude","NoOfAttendees","ConditionOfCrop","PlannedFarmDay","Reason","ActivityType","Time","isActive","isDelete","pageNumber","categoryFilter","cropFilter","areas","soilTestSampleID","soil_test_sample","zinc","ZincObserved","boron","BoronObserved","iron","IronObserved","calcium","CalciumObserved","Carbon","OrganicCarbonObserved","phosphorous","PhosphorousObserved","magnesium","MagnesiumObserved","ph","phObserved","copper","CopperObserved","Nitrogen","TotalNitrogenObserved","manganese","ManganeseObserved","pottassium","PotassiumObserved","sulphur","SulphurObserved","RecommendedNPKQty","RecommendedUreaQty","Imageid","test","soilTestId","preferredCollectionDate","PreferredCollectionDate","reason","ReasonForSoilTest","farmerID","areaID","lgaID","soilTestDisplayID","nutrient","Yield","Yield_F","DateOfSowing","DateOfSowing_F","DateOfDemonstration","DateOfDemonstration_F","FirstUreaApplication","FirstUreaApplication_F","SecondUreaApplication","SecondUreaApplication_F","Yield_I","DateOfSowing_I","DateOfDemonstration_I","FirstUreaApplication_I","SecondUreaApplication_I","DateOfHarvesting","categories","retailer_categories","name","password","bio","Bio","agronomist_lgas","prof_pic","retailer_category","retailer","ItemName","isApproved","retailers","productId","file","formData","FormData","i","length","append","url","imageId","AppComponent","iconSet","icons","events","evt","window","scrollTo","AppModule","imports","withComponents","forRoot","declarations","useClass","bootstrap","routes","path","redirectTo","pathMatch","component","title","canActivate","children","loadChildren","then","m","SMSCampaignsModule","FarmDemoModule","ChatModule","ActivitiesModule","SurveysModule","MarketplaceModule","BestCropPracticesModule","IndoramaUpdatesModule","SoilTestModule","CropPricesModule","DashboardModule","AdvertisementModule","RetailersModule","UsersModule","MastersModule","AppRoutingModule","relativeLinkResolution","icon","P500Component","AuthGuard","roles","indexOf","bootstrapModule","useJit","preserveWhitespaces","err","webpackEmptyAsyncContext","req","Promise","resolve","Error","code","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { environment } from '../../../environments/environment';\r\nimport { User } from '../../models/user';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthenticationService {\r\n  private currentUserSubject: BehaviorSubject<User>;\r\n  public currentUser: Observable<User>;\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService) {\r\n    this.currentUserSubject = new BehaviorSubject<User>(\r\n      JSON.parse(localStorage.getItem('currentUser'))\r\n    );\r\n    this.currentUser = this.currentUserSubject.asObservable();\r\n  }\r\n\r\n  public get currentUserValue(): User {\r\n    console.log('curentuser', this.currentUserSubject);\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  login(data) {\r\n    return this.http\r\n      .post<any>(`${environment.apiUrl}/api/auth/local/`, data)\r\n      .pipe(\r\n        map((user) => {\r\n          // login successful if there's a jwt token in the response\r\n          console.log(user);\r\n          if (user.jwt && (user.user.UserType == 'Admin' || user.user.UserType == 'Marketing')) {\r\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n            localStorage.setItem('token', user.jwt);\r\n            localStorage.setItem('username', user.user.username);\r\n            localStorage.setItem('uid', user.user.id);\r\n            localStorage.setItem('user_type', user.user.UserType);\r\n            localStorage.setItem('email', user.user.email);\r\n            localStorage.setItem('name', user.user.Name);\r\n            localStorage.setItem('phone_number', user.user.ContactNumber);\r\n            localStorage.setItem('currentUser', JSON.stringify(user));\r\n            this.currentUserSubject.next(user);\r\n          } else {\r\n            this.toastr.error('You\\'re not authorized');\r\n          }\r\n          return user;\r\n        })\r\n      );\r\n  }\r\n\r\n  logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('currentUser');\r\n    localStorage.removeItem('token');\r\n    this.currentUserSubject.next(null);\r\n  }\r\n}\r\n","// import { NgModule } from \"@angular/core\";\r\n// import { APOLLO_OPTIONS, APOLLO_NAMED_OPTIONS } from \"apollo-angular\";\r\n// import {\r\n//   ApolloClientOptions,\r\n//   ApolloLink,\r\n//   InMemoryCache,\r\n// } from \"@apollo/client/core\";\r\n// import { setContext } from \"@apollo/client/link/context\";\r\n// import { HttpLink } from \"apollo-angular/http\";\r\n// import { environment } from \"../environments/environment\";\r\n\r\n// const uri = `${environment.apiUrl}/graphql`;\r\n\r\n// export function createApollo(httpLink: HttpLink): ApolloClientOptions<any> {\r\n//   const basic = setContext((operation, context) => ({\r\n//     headers: {\r\n//       Accept: \"charset=utf-8\",\r\n//     },\r\n//   }));\r\n//   // Get the authentication token from local storage if it exists\r\n//   const token = localStorage.getItem(\"token\");\r\n//   const auth = setContext((operation, context) => ({\r\n//     headers: {\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//   }));\r\n\r\n//   return {\r\n//     link: ApolloLink.from([basic, auth, httpLink.create({ uri })]),\r\n//     cache: new InMemoryCache(),\r\n//   };\r\n// }\r\n\r\n// export function createNamedApollo(\r\n//   httpLink: HttpLink\r\n// ): Record<string, ApolloClientOptions<any>> {\r\n//   const basic = setContext((operation, context) => ({\r\n//     headers: {\r\n//       Accept: \"charset=utf-8\",\r\n//     },\r\n//   }));\r\n//   return {\r\n//     second: {\r\n//       name: \"second\",\r\n//       link: ApolloLink.from([ basic, httpLink.create({ uri }) ]),\r\n//       cache: new InMemoryCache(),\r\n//     },\r\n//   };\r\n// }\r\n\r\n// @NgModule({\r\n//   providers: [\r\n//     {\r\n//       provide: APOLLO_OPTIONS,\r\n//       useFactory: createApollo,\r\n//       deps: [HttpLink],\r\n//     },\r\n//     {\r\n//       provide: APOLLO_NAMED_OPTIONS,\r\n//       deps: [HttpLink],\r\n//       useFactory: createNamedApollo,\r\n//     },\r\n//   ],\r\n// })\r\n// export class GraphQLModule {}\r\n\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { Apollo, APOLLO_OPTIONS } from 'apollo-angular';\r\nimport { HttpLink } from 'apollo-angular/http';\r\nimport { InMemoryCache, ApolloLink } from '@apollo/client/core';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { environment } from '../environments/environment';\r\n\r\nconst uri = `${environment.apiUrl}/graphql`;\r\n\r\nexport function createApollo(httpLink: HttpLink) {\r\n  const basic = setContext((operation, context) => ({\r\n    headers: {\r\n      Accept: 'charset=utf-8'\r\n    }\r\n  }));\r\n\r\n  const auth = setContext((operation, context) => {\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (token === null) {\r\n      return {};\r\n    } else {\r\n      return {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      };\r\n    }\r\n  });\r\n\r\n  const link = ApolloLink.from([basic, auth, httpLink.create({ uri })]);\r\n  const cache = new InMemoryCache();\r\n\r\n  return {\r\n    link,\r\n    cache\r\n  };\r\n}\r\n\r\n@NgModule({\r\n  exports: [\r\n    HttpClientModule,\r\n    // ApolloModule,\r\n  ],\r\n  providers: [{\r\n    provide: APOLLO_OPTIONS,\r\n    useFactory: createApollo,\r\n    deps: [HttpLink]\r\n  }]\r\n})\r\nexport class GraphQLModule {}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  templateUrl: '404.component.html'\r\n})\r\nexport class P404Component {\r\n\r\n  constructor() { }\r\n\r\n}\r\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'https://indoramaapp.untanglestrategy.com'\n  // apiUrl: \"https://indorama-uat.untanglestrategy.com:883\",\n  // apiUrl: 'http://localhost:1337'\n  // apiUrl: \"https://farmgrow.indoramafertilizers.com:88\"\n};\n","export * from './default-layout.component';\r\n","export * from './default-layout';\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { User } from '../../models/user';\r\nimport { AuthenticationService } from '../../views/login/authentication.service';\r\nimport { navItems } from '../../_nav';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './default-layout.component.html',\r\n})\r\nexport class DefaultLayoutComponent {\r\n  currentUser: User;\r\n  public sidebarMinimized = false;\r\n  userName = localStorage.getItem('username');\r\n  constructor(\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService\r\n  ) {\r\n    this.authenticationService.currentUser.subscribe(\r\n      (x) => (this.currentUser = x)\r\n    );\r\n    // console.log(\"constructor\",this.currentUser.user.UserType)\r\n  }\r\n  public navItems = navItems.filter((item) => item.role === localStorage.getItem('user_type') || item.role === '');\r\n\r\n  toggleMinimize(e) {\r\n    this.sidebarMinimized = e;\r\n    console.log(this.currentUser.user?.UserType);\r\n  }\r\n  logout() {\r\n    this.authenticationService.logout();\r\n    this.router.navigate(['/login']);\r\n  }\r\n}\r\n","export default \"<div class=\\\"app flex-row align-items-center\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row justify-content-center\\\">\\r\\n      <div class=\\\"col-md-6\\\">\\r\\n        <div class=\\\"clearfix\\\">\\r\\n          <h1 class=\\\"float-left display-3 mr-4\\\">500</h1>\\r\\n          <h4 class=\\\"pt-3\\\">Houston, we have a problem!</h4>\\r\\n          <p class=\\\"text-muted\\\">The page you are looking for is temporarily unavailable.</p>\\r\\n        </div>\\r\\n        <div class=\\\"input-prepend input-group\\\">\\r\\n          <div class=\\\"input-group-prepend\\\">\\r\\n            <span class=\\\"input-group-text\\\"><i class=\\\"fa fa-search\\\"></i></span>\\r\\n          </div>\\r\\n          <input id=\\\"prependedInput\\\" class=\\\"form-control\\\" size=\\\"16\\\" type=\\\"text\\\" placeholder=\\\"What are you looking for?\\\">\\r\\n          <span class=\\\"input-group-append\\\">\\r\\n            <button class=\\\"btn btn-info\\\" type=\\\"button\\\">Search</button>\\r\\n          </span>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { Component, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { first } from 'rxjs/operators';\r\nimport { DataService } from '../../data.service';\r\nimport { AuthenticationService } from './authentication.service';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: 'login.component.html',\r\n})\r\nexport class LoginComponent {\r\n  @ViewChild('usForm') usForm: NgForm;\r\n\r\n  loginForm: any = {};\r\n  result: any = {};\r\n  returnUrl: string;\r\n  error = '';\r\n  loading = false;\r\n\r\n  constructor(\r\n    public dataservice: DataService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService,\r\n    private toastr: ToastrService\r\n  ) {\r\n    if (this.authenticationService.currentUserValue) {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n  onSubmit() {\r\n    this.loading = true;\r\n    this.loginForm = this.usForm.value;\r\n    console.log(this.loginForm);\r\n    this.loading = true;\r\n    this.router.navigate(['/dashboard']);\r\n    // this.toastr.success(\"Login successful\");\r\n    this.authenticationService\r\n      .login(this.loginForm)\r\n      .pipe(first())\r\n      .subscribe(\r\n        (data) => {\r\n          this.loading = false;\r\n          this.router.navigate([this.returnUrl]);\r\n          this.toastr.success('Login successful');\r\n        },\r\n        (error) => {\r\n          this.error = error;\r\n          this.loading = false;\r\n          console.log(error);\r\n          this.toastr.error(error.error.error.message);\r\n        }\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpErrorResponse,\n  HttpHeaders,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { environment } from '../environments/environment';\nimport { Apollo, gql } from 'apollo-angular';\nimport { catchError } from 'rxjs/operators';\nimport { ToastrService } from 'ngx-toastr';\nimport { idText } from 'typescript';\n\nconst FarmDemosQuery = gql`\n  query ($page: Int, $pageSize: Int) {\n    farmDemos(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Farmer\n          FarmLocationLatitude\n          FarmLocationLongitude\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          AreaOfField\n          isPesticidesUsed\n          FarmerPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          IndoramaPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          Images {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          DateOfHarvesting\n          Season\n          Status\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst FarmDemoQuery = gql`\n  query ($id: ID) {\n    farmDemo(id: $id) {\n      data {\n        id\n        attributes {\n          Farmer\n          FarmLocationLatitude\n          FarmLocationLongitude\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          AreaOfField\n          isPesticidesUsed\n          DateOfHarvesting\n          Season\n          FarmerPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          IndoramaPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          Status\n          Images {\n            data {\n              id\n              attributes {\n                name\n                previewUrl\n                url\n              }\n            }\n          }\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst AddFarmDemoMutation = gql`\n  mutation (\n    $farmer: String\n    $latitude: Float\n    $longitude: Float\n    $lga: ID\n    $state: ID\n    $crop: ID\n    $area: String\n    $farmerPractise: ComponentFarmDemoFarmDemoPractiseInput\n    $indoramaPractise: ComponentFarmDemoFarmDemoPractiseInput\n    $dateOfHarvesting: Date\n    $season: String\n    $Status: ENUM_FARMDEMO_STATUS\n    $isPesticidesUsed: Boolean\n    $images: [ID]\n  ) {\n    createFarmDemo(\n      data: {\n        Farmer: $farmer\n        FarmLocationLatitude: $latitude\n        FarmLocationLongitude: $longitude\n        lgas: $lga\n        state: $state\n        crop: $crop\n        Status: $Status\n        AreaOfField: $area\n        FarmerPractise: $farmerPractise\n        IndoramaPractise: $indoramaPractise\n        isPesticidesUsed: $isPesticidesUsed\n        DateOfHarvesting: $dateOfHarvesting\n        Season: $season\n        Images: $images\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Farmer\n          FarmLocationLatitude\n          FarmLocationLongitude\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Status\n          AreaOfField\n          isPesticidesUsed\n          FarmerPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          IndoramaPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          Images {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          DateOfHarvesting\n          Season\n        }\n      }\n    }\n  }\n`;\nconst UpdateFarmDemo = gql`\n  mutation (\n    $id: ID!\n    $farmer: String\n    $latitude: Float\n    $longitude: Float\n    $lga: ID\n    $crop: ID\n    $area: String\n    $farmerPractise: ComponentFarmDemoFarmDemoPractiseInput\n    $indoramaPractise: ComponentFarmDemoFarmDemoPractiseInput\n    $dateOfHarvesting: Date\n    $season: String\n    $isPesticidesUsed: Boolean\n    $images: [ID]\n    $Status: ENUM_FARMDEMO_STATUS\n    $state: ID\n  ) {\n    updateFarmDemo(\n      id: $id\n      data: {\n        Farmer: $farmer\n        FarmLocationLatitude: $latitude\n        FarmLocationLongitude: $longitude\n        lgas: $lga\n        crop: $crop\n        Status: $Status\n        state: $state\n        AreaOfField: $area\n        FarmerPractise: $farmerPractise\n        IndoramaPractise: $indoramaPractise\n        isPesticidesUsed: $isPesticidesUsed\n        DateOfHarvesting: $dateOfHarvesting\n        Season: $season\n        Images: $images\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Farmer\n          FarmLocationLatitude\n          FarmLocationLongitude\n          Status\n          Season\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          AreaOfField\n          isPesticidesUsed\n          FarmerPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          IndoramaPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          Images {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          DateOfHarvesting\n          Season\n        }\n      }\n    }\n  }\n`;\nconst CropsQuery = gql`\n  query($page: Int, $pageSize: Int, $searchTerm:String) {\n    crops(pagination: { page: $page, pageSize: $pageSize }, sort: \"createdAt:desc\", filters:{Name:{containsi:$searchTerm}}) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst CropsMutation = gql`\n  mutation ($Name: String, $image: ID) {\n    createCrop(data: { Name: $Name, Image: $image }) {\n      data {\n        id\n        attributes {\n          Name\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateCrops = gql`\n  mutation ($Name: String, $id: ID!, $isDelete: Boolean, $image: ID) {\n    updateCrop(\n      id: $id\n      data: { Name: $Name, Image: $image, isDelete: $isDelete }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          isDelete\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst StatesQuery = gql`\n  query($page: Int, $pageSize: Int, $searchTerm:String) {\n    states(pagination: { page: $page, pageSize: $pageSize }, sort: \"createdAt:desc\", filters:{Name:{containsi:$searchTerm}}) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          markets {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst StatesMutation = gql`\n  mutation ($Name: String) {\n    createState(data: { Name: $Name }) {\n      data {\n        id\n        attributes {\n          Name\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          markets {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateState = gql`\n  mutation ($Name: String, $id: ID!, $isDelete: Boolean) {\n    updateState(id: $id, data: { Name: $Name, isDelete: $isDelete }) {\n      data {\n        id\n        attributes {\n          Name\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          markets {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          isDelete\n        }\n      }\n    }\n  }\n`;\nconst LGAquery = gql`\n  query ($id: ID, $page: Int, $pageSize: Int, $searchTerm:String) {\n    lgas(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: { state: { id: { eq: $id } }, Name:{containsi:$searchTerm} }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          areas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst LGAmutation = gql`\n  mutation ($Name: String, $state: ID) {\n    createLga(data: { Name: $Name, state: $state }) {\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          areas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst UpdateLGA = gql`\n  mutation ($Name: String, $state: ID, $id: ID!, $isDelete: Boolean) {\n    updateLga(\n      id: $id\n      data: { Name: $Name, isDelete: $isDelete, state: $state }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          areas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst Villagesquery = gql`\n  query ($lgaId: ID, $page: Int, $pageSize: Int, $searchTerm:String) {\n    villages(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: { area: { lga: { id: { eq: $lgaId } } }, Name:{ containsi:$searchTerm} }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          area {\n            data {\n              id\n              attributes {\n                Name\n                PostalCode\n                lga {\n                  data {\n                    id\n                    attributes {\n                      Name\n                      state {\n                        data {\n                          id\n                          attributes {\n                            Name\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          localizations {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n        __typename\n      }\n    }\n  }\n`;\nconst VillageMutation = gql`\n  mutation ($Name: String, $area: ID) {\n    createVillage(data: { Name: $Name, area: $area }) {\n      data {\n        id\n        attributes {\n          Name\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst UpdateVillage = gql`\n  mutation ($Name: String, $area: ID, $id: ID!, $isDelete: Boolean) {\n    updateVillage(\n      id: $id\n      data: { Name: $Name, area: $area, isDelete: $isDelete }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          isDelete\n        }\n      }\n    }\n  }\n`;\nconst Areasquery = gql`\n  query ($id: ID, $page: Int, $pageSize: Int, $searchTerm:String) {\n    areas(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: { lga: { id: { eq: $id } }, Name:{containsi:$searchTerm}}\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          PostalCode\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          villages {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst AreaMutation = gql`\n  mutation ($Name: String, $PostalCode: Long, $lga: ID) {\n    createArea(data: { Name: $Name, PostalCode: $PostalCode, lga: $lga }) {\n      data {\n        id\n        attributes {\n          Name\n          PostalCode\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          villages {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst UpdateArea = gql`\n  mutation (\n    $Name: String\n    $lga: ID\n    $PostalCode: Long\n    $id: ID!\n    $isDelete: Boolean\n  ) {\n    updateArea(\n      id: $id\n      data: {\n        Name: $Name\n        PostalCode: $PostalCode\n        lga: $lga\n        isDelete: $isDelete\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          PostalCode\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          villages {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst MarketQuery = gql`\n  query ($id: ID, $page: Int, $pageSize: Int, $searchTerm:String) {\n    markets(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: { state: { id: { eq: $id } } ,Name:{containsi:$searchTerm}}\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst MarketMutation = gql`\n  mutation ($Name: String, $state: ID) {\n    createMarket(data: { Name: $Name, state: $state }) {\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst UpdateMarket = gql`\n  mutation ($Name: String, $state: ID, $id: ID!, $isDelete: Boolean) {\n    updateMarket(\n      id: $id\n      data: { Name: $Name, isDelete: $isDelete, state: $state }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst CropPricesQuery = gql`\n  query (\n    $page: Int\n    $pageSize: Int\n    $publicationState: PublicationState\n    $publishedAt: DateTime\n    $Rejected: Boolean\n  ) {\n    cropPrices(\n      publicationState: $publicationState\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: {\n        and: [\n          { publishedAt: { eq: $publishedAt } }\n          { Rejected: { eq: $Rejected } }\n        ]\n      }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Price\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Unit\n          Rejected\n          market {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Image {\n            data {\n              id\n              attributes {\n                name\n                alternativeText\n                caption\n                width\n                height\n                url\n                previewUrl\n              }\n            }\n          }\n          user {\n            data {\n              id\n              attributes {\n                Name\n                UserType\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          publishedAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateCropPriceMutation = gql`\n  mutation updateCropPrice(\n    $id: ID!\n    $crop: ID\n    $price: Float\n    $state: ID\n    $unit: String\n    $market: ID\n    $image: ID\n    $Rejected: Boolean\n    $published: DateTime\n  ) {\n    updateCropPrice(\n      id: $id\n      data: {\n        crop: $crop\n        Price: $price\n        state: $state\n        Unit: $unit\n        market: $market\n        Image: $image\n        Rejected: $Rejected\n        publishedAt: $published\n      }\n    ) {\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Price\n          Unit\n          state {\n            data {\n              attributes {\n                Name\n              }\n            }\n          }\n          market {\n            data {\n              attributes {\n                Name\n              }\n            }\n          }\n          Rejected\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst CropPriceMutation = gql`\n  mutation addCropPrice(\n    $crop: ID\n    $price: Float\n    $state: ID\n    $unit: String\n    $market: ID\n    $image: ID\n    $published: DateTime\n    $user: ID\n  ) {\n    createCropPrice(\n      data: {\n        crop: $crop\n        Price: $price\n        state: $state\n        Unit: $unit\n        Rejected: false\n        market: $market\n        Image: $image\n        publishedAt: $published\n        user: $user\n      }\n    ) {\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Price\n          Unit\n          state {\n            data {\n              attributes {\n                Name\n              }\n            }\n          }\n          market {\n            data {\n              attributes {\n                Name\n              }\n            }\n          }\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst RetailerQuery = gql`\n  query ($page: Int, $pageSize: Int, $confirmed: Boolean, $blocked: Boolean) {\n    usersPermissionsUsers(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: {\n        UserType: { eq: \"Retailer\" }\n        confirmed: { eq: $confirmed }\n        blocked: { eq: $blocked }\n      }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          username\n          Name\n          email\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          retailer_products {\n            data {\n              attributes {\n                ItemName\n                Price\n                Unit\n                Images {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          UserType\n          retailer_categories {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          Bio\n          Latitude\n          Longitude\n          blocked\n          confirmed\n          UserType\n          prof_pic {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          ContactNumber\n        }\n      }\n    }\n  }\n`;\nconst SoilTestQuery = gql`\n  query ($page: Int, $pageSize: Int) {\n    soilTests(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          SoilTestID\n          Status\n          ReasonForSoilTest\n          ContactNumber\n          nutrient\n          Farmer {\n            data {\n              attributes {\n                username\n                email\n\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          area {\n            data {\n              attributes {\n                Name\n                PostalCode\n              }\n            }\n          }\n          soil_test_samples {\n            data {\n              attributes {\n                SampleID\n              }\n            }\n          }\n          PreferredCollectionDate\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst SingleSoilTestQuery = gql`\n  query ($id: ID) {\n    soilTest(id: $id) {\n      data {\n        id\n        attributes {\n          SoilTestID\n          Status\n          ReasonForSoilTest\n          ContactNumber\n          nutrient\n          Farmer {\n            data {\n              id\n              attributes {\n                username\n                email\n\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          area {\n            data {\n              id\n              attributes {\n                Name\n                PostalCode\n              }\n            }\n          }\n          soil_test_samples {\n            data {\n              id\n              attributes {\n                SampleID\n                QuantityOfSamples\n                createdAt\n                updatedAt\n                SampleAddedBy {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n                soil_test_results {\n                  data {\n                    id\n                    attributes {\n                      soil_test_sample {\n                        data {\n                          id\n                          attributes {\n                            SampleID\n                          }\n                        }\n                      }\n                      phObserved\n                      OrganicCarbonObserved\n                      TotalNitrogenObserved\n                      PhosphorousObserved\n                      PotassiumObserved\n                      CalciumObserved\n                      MagnesiumObserved\n                      ZincObserved\n                      SulphurObserved\n                      IronObserved\n                      CopperObserved\n                      BoronObserved\n                      ManganeseObserved\n                      RecommendedNPKQty\n                      RecommendedUreaQty\n                      updatedAt\n                    }\n                  }\n                }\n              }\n            }\n          }\n          PreferredCollectionDate\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateSoilTest = gql`\n  mutation updateSoilTest(\n    $soilTestId: ID!\n    $contactNumber: String\n    $preferredCollectionDate: DateTime\n    $reason: String\n    $farmerID: ID\n    $areaID: ID\n    $lgaID: ID\n    $soilTestDisplayID: String\n    $status: ENUM_SOILTEST_STATUS\n    $nutrient: String\n  ) {\n    updateSoilTest(\n      id: $soilTestId\n      data: {\n        ContactNumber: $contactNumber\n        PreferredCollectionDate: $preferredCollectionDate\n        ReasonForSoilTest: $reason\n        Farmer: $farmerID\n        area: $areaID\n        lga: $lgaID\n        SoilTestID: $soilTestDisplayID\n        Status: $status\n        nutrient: $nutrient\n      }\n    ) {\n      data {\n        id\n        attributes {\n          ContactNumber\n          PreferredCollectionDate\n          ReasonForSoilTest\n          Farmer {\n            data {\n              id\n              attributes {\n                username\n                Name\n              }\n            }\n          }\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          SoilTestID\n          Status\n          nutrient\n        }\n      }\n    }\n  }\n`;\nconst UsersQuery = gql`\n  query ($UserType: String, $page: Int, $pageSize: Int) {\n    usersPermissionsUsers(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: { UserType: { eq: $UserType } }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          username\n          Name\n          email\n          blocked\n          confirmed\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          retailer_categories {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          retailer_products {\n            data {\n              attributes {\n                ItemName\n                Price\n                Unit\n                Images {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          UserType\n          Bio\n          Latitude\n          Longitude\n          UserType\n          referred_agronomist {\n            data {\n              id\n                attributes {\n                    Name\n                 }\n              }\n          }\n          prof_pic {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          ContactNumber\n        }\n      }\n    }\n  }\n`;\nconst AddSoilTestResult = gql`\n  mutation soilTestAddResult(\n    $soilTestSampleID: ID\n    $ph: String\n    $Carbon: String\n    $Nitrogen: String\n    $phosphorous: String\n    $pottassium: String\n    $calcium: String\n    $magnesium: String\n    $zinc: String\n    $sulphur: String\n    $iron: String\n    $copper: String\n    $boron: String\n    $manganese: String\n    $RecommendedNPKQty: String\n    $RecommendedUreaQty: String\n  ) {\n    createSoilTestResult(\n      data: {\n        soil_test_sample: $soilTestSampleID\n        phObserved: $ph\n        OrganicCarbonObserved: $Carbon\n        TotalNitrogenObserved: $Nitrogen\n        PhosphorousObserved: $phosphorous\n        PotassiumObserved: $pottassium\n        CalciumObserved: $calcium\n        MagnesiumObserved: $magnesium\n        ZincObserved: $zinc\n        SulphurObserved: $sulphur\n        IronObserved: $iron\n        CopperObserved: $copper\n        BoronObserved: $boron\n        ManganeseObserved: $manganese\n        RecommendedNPKQty: $RecommendedNPKQty\n        RecommendedUreaQty: $RecommendedUreaQty\n      }\n    ) {\n      data {\n        attributes {\n          soil_test_sample {\n            data {\n              id\n              attributes {\n                SampleID\n              }\n            }\n          }\n          phObserved\n          OrganicCarbonObserved\n          TotalNitrogenObserved\n          PhosphorousObserved\n          PotassiumObserved\n          CalciumObserved\n          MagnesiumObserved\n          ZincObserved\n          SulphurObserved\n          CopperObserved\n          IronObserved\n          BoronObserved\n          ManganeseObserved\n        }\n      }\n    }\n  }\n`;\nconst UpdateSoilTestResult = gql`\n  mutation soilTestAddResult(\n    $id: ID!\n    $soilTestSampleID: ID\n    $ph: String\n    $Carbon: String\n    $Nitrogen: String\n    $phosphorous: String\n    $pottassium: String\n    $calcium: String\n    $magnesium: String\n    $zinc: String\n    $sulphur: String\n    $iron: String\n    $copper: String\n    $boron: String\n    $manganese: String\n    $RecommendedNPKQty: String\n    $RecommendedUreaQty: String\n  ) {\n    updateSoilTestResult(\n      id: $id\n      data: {\n        soil_test_sample: $soilTestSampleID\n        phObserved: $ph\n        OrganicCarbonObserved: $Carbon\n        TotalNitrogenObserved: $Nitrogen\n        PhosphorousObserved: $phosphorous\n        PotassiumObserved: $pottassium\n        CalciumObserved: $calcium\n        MagnesiumObserved: $magnesium\n        ZincObserved: $zinc\n        SulphurObserved: $sulphur\n        IronObserved: $iron\n        CopperObserved: $copper\n        BoronObserved: $boron\n        ManganeseObserved: $manganese\n        RecommendedNPKQty: $RecommendedNPKQty\n        RecommendedUreaQty: $RecommendedUreaQty\n      }\n    ) {\n      data {\n        attributes {\n          soil_test_sample {\n            data {\n              id\n              attributes {\n                SampleID\n              }\n            }\n          }\n          phObserved\n          OrganicCarbonObserved\n          TotalNitrogenObserved\n          PhosphorousObserved\n          PotassiumObserved\n          CalciumObserved\n          MagnesiumObserved\n          ZincObserved\n          SulphurObserved\n          CopperObserved\n          IronObserved\n          BoronObserved\n          ManganeseObserved\n        }\n      }\n    }\n  }\n`;\nconst GetSingleRetailerQuery = gql`\n  query ($id: ID) {\n    usersPermissionsUsers(filters: { id: { eq: $id } }) {\n      data {\n        id\n        attributes {\n          username\n          Name\n          blocked\n          confirmed\n          email\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          retailer_categories {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          retailer_products {\n            data {\n              id\n              attributes {\n                ItemName\n                Price\n                Unit\n                Images {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          agronomist_lgas {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                      lgas {\n                        data {\n                          id\n                          attributes {\n                            Name\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          UserType\n          Bio\n          Latitude\n          Longitude\n          UserType\n          prof_pic {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          blocked\n          ContactNumber\n          referred_agronomist {\n          data {\n            id\n            attributes {\n                  username\n                  Name\n                }\n             }\n          }\n        }\n      }\n    }\n  }\n`;\nconst updateRetailerProfPic = gql`\n  mutation editRetailer($id: ID!, $prof_pic: ID) {\n    updateUsersPermissionsUser(id: $id, data: { prof_pic: $prof_pic }) {\n      data {\n        id\n        attributes {\n          username\n          Name\n          email\n          prof_pic {\n            data {\n              id\n              attributes {\n                name\n                url\n              }\n            }\n          }\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          retailer_categories {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          retailer_products {\n            data {\n              attributes {\n                ItemName\n                Price\n                Unit\n                Images {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          UserType\n          Bio\n          Latitude\n          Longitude\n          UserType\n          prof_pic {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          ContactNumber\n        }\n      }\n    }\n  }\n`;\nconst updateRetailerQuery = gql`\n  mutation editRetailer(\n    $id: ID!\n    $name: String\n    $village: ID\n    $lga: ID\n    $UserType: ENUM_USERSPERMISSIONSUSER_USERTYPE\n    $categories: [ID]\n    $bio: String\n    $latitude: Float\n    $longitude: Float\n    $profpic: ID\n    $password: String\n    $blocked: Boolean\n    $confirmed: Boolean\n    $contactNumber: String\n    $agronomist_lgas: [ID]\n  ) {\n    updateUsersPermissionsUser(\n      id: $id\n      data: {\n        Name: $name\n        village: $village\n        lga: $lga\n        UserType: $UserType\n        retailer_categories: $categories\n        Bio: $bio\n        blocked: $blocked\n        password: $password\n        confirmed: $confirmed\n        Latitude: $latitude\n        Longitude: $longitude\n        prof_pic: $profpic\n        ContactNumber: $contactNumber\n        agronomist_lgas: $agronomist_lgas\n      }\n    ) {\n      data {\n        id\n        attributes {\n          username\n          Name\n          email\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          retailer_categories {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          retailer_products {\n            data {\n              attributes {\n                ItemName\n                Price\n                Unit\n                Images {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          agronomist_lgas {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          UserType\n          Bio\n          Latitude\n          Longitude\n          UserType\n          prof_pic {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          ContactNumber\n          confirmed\n          blocked\n        }\n      }\n    }\n  }\n`;\nconst getRetailerCategories = gql`\n  query {\n    retailerCategories {\n      data {\n        id\n        attributes {\n          CategoryName\n          createdAt\n          CategoryImage {\n            data {\n              id\n              attributes {\n                name\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst createdRetailerProducts = gql`\n  mutation (\n    $ItemName: String\n    $Price: Int\n    $Unit: String\n    $Images: [ID]\n    $retailer_category: ID\n    $retailers: [ID]\n  ) {\n    createRetailerProduct(\n      data: {\n        ItemName: $ItemName\n        Price: $Price\n        Unit: $Unit\n        Images: $Images\n        retailer_category: $retailer_category\n        retailers: $retailers\n      }\n    ) {\n      data {\n        id\n        attributes {\n          ItemName\n          Unit\n          Price\n          Images {\n            data {\n              id\n            }\n          }\n          retailer_category {\n            data {\n              id\n            }\n          }\n          retailers {\n            data {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst updateRetailerProducts = gql`\n  mutation editRetailerProduct(\n    $productId: ID!\n    $itemName: String\n    $price: Int\n    $unit: String\n    $images: [ID]\n    $isApproved: Boolean\n    $retailer: [ID]\n    $retailer_category: ID\n  ) {\n    updateRetailerProduct(\n      id: $productId\n      data: {\n        ItemName: $itemName\n        Price: $price\n        Unit: $unit\n        Images: $images\n        isApproved: $isApproved\n        retailers: $retailer\n        retailer_category: $retailer_category\n      }\n    ) {\n      data {\n        attributes {\n          ItemName\n          Price\n          Unit\n          retailers {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          retailer_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          isApproved\n        }\n      }\n    }\n  }\n`;\nconst DeleteStatesMutation = gql`\n  mutation ($id: ID!) {\n    deleteState(id: $id) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteLGAMutation = gql`\n  mutation ($id: ID!) {\n    deleteLga(id: $id) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteAreaMutation = gql`\n  mutation ($id: ID!) {\n    deleteArea(id: $id) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteVillageMutation = gql`\n  mutation ($id: ID!) {\n    deleteVillage(id: $id) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteCropMutation = gql`\n  mutation ($id: ID!) {\n    deleteCrop(id: $id) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteMarketMutation = gql`\n  mutation ($id: ID!) {\n    deleteMarket(id: $id) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteFarmdemo = gql`\n  mutation ($id: ID!) {\n    deleteFarmDemo(id: $id) {\n      data {\n        attributes {\n          Farmer\n          DateOfHarvesting\n        }\n      }\n    }\n  }\n`;\nconst DeleteRetailerProduct = gql`\n  mutation ($id: ID!) {\n    deleteRetailerProduct(id: $id) {\n      data {\n        attributes {\n          ItemName\n          Price\n        }\n      }\n    }\n  }\n`;\nconst DeleteFile = gql`\n  mutation ($id: ID!) {\n    deleteUploadFile(id: $id) {\n      data {\n        id\n      }\n    }\n  }\n`;\nconst DeleteUser = gql`\n  mutation ($id: ID!) {\n    deleteUsersPermissionsUser(id: $id) {\n      data {\n        id\n        attributes {\n          username\n        }\n      }\n    }\n  }\n`;\nconst DeleteBestPractice = gql`\n  mutation ($id: ID!) {\n    deleteBestCropPractise(id: $id) {\n      data {\n        attributes {\n          content\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst DeleteActivity = gql`\n  mutation ($id: ID!) {\n    deleteActivity(id: $id) {\n      data {\n        attributes {\n          FarmerName\n          Date\n          Latitude\n          Longitude\n          NoOfAttendees\n        }\n      }\n    }\n  }\n`;\nconst DeleteMarketplaceProduct = gql`\n  mutation ($id: ID!) {\n    deleteMarketplaceProduct(id: $id) {\n      data {\n        attributes {\n          ItemName\n          Price\n          AvailableQty\n        }\n      }\n    }\n  }\n`;\nconst CreateAgronomist = gql`\n  mutation ($areas: [ID], $user: ID) {\n    createAgronomist(data: { areas: $areas, users_permissions_user: $user }) {\n      data {\n        id\n        attributes {\n          users_permissions_user {\n            data {\n              id\n              attributes {\n                username\n                Name\n                UserType\n              }\n            }\n          }\n          areas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst getAgronomist = gql`\n  query ($user: ID) {\n    agronomists(filters: { users_permissions_user: { id: { eq: $user } } }) {\n      data {\n        id\n        attributes {\n          users_permissions_user {\n            data {\n              id\n              attributes {\n                username\n                Name\n                UserType\n              }\n            }\n          }\n          areas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst queryUsersLarge = gql`\n  query ($UserType: String, $village: ID, $lga: ID, $area: ID, $state: ID) {\n    usersPermissionsUsers(\n      pagination: { limit: 10000 }\n      sort: \"createdAt:desc\"\n      filters: {\n        UserType: { eq: $UserType }\n        village: {\n          or: [{ id: { eq: $village } }, { area: { id: { eq: $area } } }]\n        }\n        lga: { or: [{ id: { eq: $lga } }, { state: { id: { eq: $state } } }] }\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          ContactNumber\n        }\n      }\n    }\n  }\n`;\nconst getIndoramaUpdates = gql`\n  query (\n    $isDelete: Boolean\n    $isActive: Boolean\n    $id: ID\n    $page: Int\n    $pageSize: Int\n  ) {\n    newsAndUpdates(\n      sort: \"createdAt:desc\"\n      pagination: { page: $page, pageSize: $pageSize }\n      filters: {\n        isActive: { eq: $isActive }\n        isDelete: { eq: $isDelete }\n        id: { eq: $id }\n      }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Title\n          Body\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          isActive\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateIndoramaUpdates = gql`\n  mutation (\n    $id: ID!\n    $Title: String\n    $Body: String\n    $isDelete: Boolean\n    $isActive: Boolean\n    $Images: [ID]\n  ) {\n    updateNewsAndUpdate(\n      id: $id\n      data: {\n        Title: $Title\n        Body: $Body\n        isActive: $isActive\n        isDelete: $isDelete\n        Images: $Images\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Title\n          Body\n          isActive\n          isDelete\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst CreateIndoramaUpdates = gql`\n  mutation ($Title: String, $Body: String, $Images: [ID]) {\n    createNewsAndUpdate(\n      data: {\n        Title: $Title\n        Body: $Body\n        isActive: true\n        isDelete: false\n        Images: $Images\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Title\n          Body\n          isActive\n          isDelete\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst GetMarketplace = gql`\n  query ($pageNumber: Int, $pageSize: Int, $categoryFilter: [ID]) {\n    marketplaceProducts(\n      filters: { marketplace_category: { id: { in: $categoryFilter } } }\n      pagination: { page: $pageNumber, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          ItemName\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          seller {\n            data {\n              attributes {\n                Name\n                username\n                ContactNumber\n              }\n            }\n          }\n          description\n          contactNumber\n          Price\n          AvailableQty\n          Unit\n          marketplace_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst GetMarketplaceSingleProduct = gql`\n  query ($id: ID!) {\n    marketplaceProduct(id: $id) {\n      data {\n        id\n        attributes {\n          ItemName\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          seller {\n            data {\n              attributes {\n                Name\n                username\n                ContactNumber\n              }\n            }\n          }\n          description\n          contactNumber\n          Price\n          AvailableQty\n          Unit\n          marketplace_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst CreateMarketplaceProduct = gql`\n  mutation sellItemMarketplace(\n    $itemName: String\n    $images: [ID]\n    $userId: ID\n    $contactNumber: String\n    $price: Int\n    $availableQty: Int\n    $unit: String\n    $category: ID\n    $description: String\n  ) {\n    createMarketplaceProduct(\n      data: {\n        ItemName: $itemName\n        Images: $images\n        seller: $userId\n        contactNumber: $contactNumber\n        Price: $price\n        AvailableQty: $availableQty\n        Unit: $unit\n        marketplace_category: $category\n        description: $description\n      }\n    ) {\n      data {\n        id\n        attributes {\n          ItemName\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          seller {\n            data {\n              id\n              attributes {\n                Name\n                username\n              }\n            }\n          }\n          description\n          contactNumber\n          Price\n          AvailableQty\n          Unit\n          marketplace_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateMarketplaceProduct = gql`\n  mutation updateMarketplaceProduct(\n    $itemName: String\n    $images: [ID]\n    $contactNumber: String\n    $price: Int\n    $id: ID!\n    $availableQty: Int\n    $unit: String\n    $category: ID\n    $description: String\n  ) {\n    updateMarketplaceProduct(\n      id: $id\n      data: {\n        ItemName: $itemName\n        Images: $images\n        contactNumber: $contactNumber\n        Price: $price\n        AvailableQty: $availableQty\n        Unit: $unit\n        marketplace_category: $category\n        description: $description\n      }\n    ) {\n      data {\n        id\n        attributes {\n          ItemName\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          seller {\n            data {\n              id\n              attributes {\n                Name\n                username\n              }\n            }\n          }\n          description\n          contactNumber\n          Price\n          AvailableQty\n          Unit\n          marketplace_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateMarketplaceProductImg = gql`\n  mutation updateMarketplaceProduct($images: [ID], $id: ID!) {\n    updateMarketplaceProduct(id: $id, data: { Images: $images }) {\n      data {\n        id\n        attributes {\n          ItemName\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          seller {\n            data {\n              id\n              attributes {\n                Name\n                username\n              }\n            }\n          }\n          description\n          contactNumber\n          Price\n          AvailableQty\n          Unit\n          marketplace_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`;\nconst GetBestCropPractices = gql`\n  query getBestCropPractises($cropFilter: ID, $page: Int, $pageSize: Int) {\n    bestCropPractises(\n      filters: { crop: { id: { eq: $cropFilter } } }\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          media {\n            data {\n              id\n              attributes {\n                name\n                formats\n                url\n                size\n                mime\n                ext\n              }\n            }\n          }\n          content\n          cropImage {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst CreateBestCropPractices = gql`\n  mutation ($crop: ID, $media: ID, $content: String, $cropImage: ID) {\n    createBestCropPractise(\n      data: {\n        crop: $crop\n        media: $media\n        content: $content\n        cropImage: $cropImage\n      }\n    ) {\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          media {\n            data {\n              id\n              attributes {\n                name\n                formats\n                url\n                size\n                mime\n                ext\n              }\n            }\n          }\n          content\n          cropImage {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst GetMarketplaceCategories = gql`\n  query {\n    marketplaceCategories(\n      filters: { isDelete: { eq: false }, isActive: { eq: true } }\n      sort: \"CategoryName:asc\"\n    ) {\n      data {\n        id\n        attributes {\n          CategoryName\n          CategoryImage {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          isDelete\n          isActive\n        }\n      }\n    }\n  }\n`;\nconst GetActivities = gql`\n  query getActivities($page: Int, $pageSize: Int) {\n    activities(\n      sort: \"createdAt:desc\"\n      pagination: { page: $page, pageSize: $pageSize }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          FarmerName\n          Date\n          Latitude\n          Longitude\n          NoOfAttendees\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ConditionOfCrop\n          PlannedFarmDay\n          Reason\n          area {\n            data {\n              id\n              attributes {\n                Name\n                lga {\n                  data {\n                    id\n                    attributes {\n                      Name\n                      state {\n                        data {\n                          id\n                          attributes {\n                            Name\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          ActivityType\n          Time\n          createdAt\n          agronomist\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst GetSingleActivity = gql`\n# Write your query or mutation here\nquery getActivities($id: ID) {\n    activity(id: $id) {\n      data {\n        id\n        attributes {\n          FarmerName\n          Date\n          Latitude\n          Longitude\n          NoOfAttendees\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ConditionOfCrop\n          PlannedFarmDay\n          Reason\n          area {\n            data {\n              id\n              attributes {\n                Name\n                lga {\n                  data {\n                    id\n                    attributes {\n                      Name\n                      state {\n                        data {\n                          id\n                          attributes {\n                            Name\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          ActivityType\n          Time\n          createdAt\n          updatedAt\n          agronomist\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst CreateActivities = gql`\n  mutation (\n    $FarmerName: String\n    $Date: Date\n    $Latitude: Float\n    $Longitude: Float\n    $NoOfAttendees: Int\n    $crop: ID\n    $ConditionOfCrop: String\n    $PlannedFarmDay: Date\n    $Reason: String\n    $area: ID\n    $ActivityType: ENUM_ACTIVITY_ACTIVITYTYPE\n    $Time: String\n    $village: ID\n    $agronomist: String\n  ) {\n    createActivity(\n      data: {\n        FarmerName: $FarmerName\n        Date: $Date\n        Latitude: $Latitude\n        Longitude: $Longitude\n        NoOfAttendees: $NoOfAttendees\n        crop: $crop\n        ConditionOfCrop: $ConditionOfCrop\n        PlannedFarmDay: $PlannedFarmDay\n        Reason: $Reason\n        area: $area\n        ActivityType: $ActivityType\n        Time: $Time\n        village: $village\n        agronomist: $agronomist\n      }\n    ) {\n      data {\n        id\n        attributes {\n          FarmerName\n          Date\n          Latitude\n          Longitude\n          NoOfAttendees\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ConditionOfCrop\n          PlannedFarmDay\n          Reason\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          agronomist\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ActivityType\n          Time\n        }\n      }\n    }\n  }\n`;\nconst UpdateActivity = gql`\n  mutation (\n    $FarmerName: String\n    $Date: Date\n    $Latitude: Float\n    $Longitude: Float\n    $NoOfAttendees: Int\n    $crop: ID\n    $ConditionOfCrop: String\n    $PlannedFarmDay: Date\n    $Reason: String\n    $area: ID\n    $ActivityType: ENUM_ACTIVITY_ACTIVITYTYPE\n    $Time: String\n    $village: ID\n    $agronomist: String\n    $id: ID!\n  ) {\n    updateActivity(\n      id: $id\n      data: {\n        FarmerName: $FarmerName\n        Date: $Date\n        Latitude: $Latitude\n        Longitude: $Longitude\n        NoOfAttendees: $NoOfAttendees\n        crop: $crop\n        ConditionOfCrop: $ConditionOfCrop\n        PlannedFarmDay: $PlannedFarmDay\n        Reason: $Reason\n        area: $area\n        ActivityType: $ActivityType\n        Time: $Time\n        village: $village\n        agronomist: $agronomist\n      }\n    ) {\n      data {\n        id\n        attributes {\n          FarmerName\n          Date\n          Latitude\n          Longitude\n          NoOfAttendees\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ConditionOfCrop\n          PlannedFarmDay\n          Reason\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          agronomist\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ActivityType\n          Time\n        }\n      }\n    }\n  }\n`;\nconst getDashboardStats = gql`\n  query dashboardAPI($state: ID, $fromDate: DateTime, $toDate: DateTime) {\n    soilTests(\n      filters: {\n        and: [\n          { lga: { state: { id: { eq: $state } } } }\n          { createdAt: { between: [$fromDate, $toDate] } }\n        ]\n      }\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    soilTestSamples(\n      filters: {\n        and: [\n          { soil_test: { lga: { state: { id: { eq: $state } } } } }\n          { createdAt: { between: [$fromDate, $toDate] } }\n        ]\n      }\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    soilTestResults(\n      filters: {\n        and: [\n          {\n            soil_test_sample: {\n              soil_test: { lga: { state: { id: { eq: $state } } } }\n            }\n          }\n          { createdAt: { between: [$fromDate, $toDate] } }\n        ]\n      }\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    farmDemos {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n`;\nconst getCropPricesDashboard = gql`\n  query ($id: ID, $market: ID, $fromDate: DateTime, $toDate: DateTime) {\n    cropPrices(\n      publicationState: LIVE\n      pagination: { limit: 10000 }\n      sort: \"publishedAt:desc\"\n      filters: {\n        crop: { id: { eq: $id } }\n        market: { id: { eq: $market } }\n        publishedAt: { between: [$fromDate, $toDate] }\n      }\n    ) {\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Price\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Unit\n          market {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          publishedAt\n        }\n      }\n    }\n  }\n`;\nconst getFarmDemoStatsDashboard = gql`\n  query dashboardAPI(\n    $state: ID\n    $status: String\n    $fromDate: DateTime\n    $toDate: DateTime\n  ) {\n    all: farmDemos(\n      filters: {\n        state: { id: { eq: $state } }\n        createdAt: { between: [$fromDate, $toDate] }\n      }\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    status: farmDemos(\n      filters: {\n        and: [\n          { state: { id: { eq: $state } } }\n          { Status: { eq: $status } }\n          { createdAt: { between: [$fromDate, $toDate] } }\n        ]\n      }\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n`;\nconst getallChats = gql`\n  query ($limit: Int, $start: Int, $key: String, $isAskIndorama: Boolean) {\n    chats(\n      filters: {\n        members: {\n          or: [{ username: { containsi: $key } }, { Name: { containsi: $key } }]\n        }\n        isAskIndorama: { eq: $isAskIndorama }\n      }\n      sort: \"updatedAt:desc\"\n      pagination: { limit: $limit, start: $start }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          isAskIndorama\n          members {\n            data {\n              id\n              attributes {\n                username\n                Name\n                UserType\n                Name\n                prof_pic {\n                  data {\n                    id\n                    attributes {\n                      name\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          chatInitiatedBy {\n            data {\n              id\n              attributes {\n                username\n                Name\n                UserType\n                Name\n                prof_pic {\n                  data {\n                    id\n                    attributes {\n                      name\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst getChatMessages = gql`\n  query ($id: ID!) {\n    chat(id: $id) {\n      data {\n        id\n        attributes {\n          messages {\n            data {\n              id\n              attributes {\n                message\n                createdAt\n                updatedAt\n                image_attachment {\n                  data {\n                    id\n                    attributes {\n                      name\n                      width\n                      height\n                      url\n                    }\n                  }\n                }\n                from_user {\n                  data {\n                    id\n                    attributes {\n                      username\n                      Name\n                      UserType\n                      prof_pic {\n                        data {\n                          id\n                          attributes {\n                            url\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                to_user {\n                  data {\n                    id\n                    attributes {\n                      username\n                      Name\n                      UserType\n                      prof_pic {\n                        data {\n                          id\n                          attributes {\n                            url\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                chat {\n                  data {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst getSurveys = gql`\n  query ($page: Int, $pageSize: Int) {\n    surveyForms(\n      sort: \"updatedAt:desc\"\n      pagination: { page: $page, pageSize: $pageSize }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          SurveyTitle\n          SurveyDescription\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst CreateSurveys = gql`\n  mutation (\n    $SurveyTitle: String\n    $SurveyDescription: String\n    $Fields: [SurveyFormFieldsDynamicZoneInput!]\n  ) {\n    createSurveyForm(\n      data: {\n        SurveyTitle: $SurveyTitle\n        SurveyDescription: $SurveyDescription\n        Fields: $Fields\n      }\n    ) {\n      data {\n        id\n        attributes {\n          SurveyTitle\n          SurveyDescription\n          Fields {\n            __typename\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst getSurveyResults = gql`\n  query ($limit: Int, $start: Int, $id: ID) {\n    surveyResults(\n      sort: \"updatedAt:desc\"\n      pagination: { limit: $limit, start: $start }\n      filters: { survey_form: { id: { eq: $id } } }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          SurveyResponse\n          createdAt\n        }\n      }\n    }\n  }\n`;\nconst deleteSurvey = gql`\n  mutation ($id: ID!) {\n    deleteSurveyForm(id: $id) {\n      data {\n        attributes {\n          SurveyTitle\n          SurveyDescription\n        }\n      }\n    }\n  }\n`;\nconst getDashboardAd = gql`\n  query {\n    advertisement {\n      data {\n        id\n        attributes {\n          AdImage {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          url\n          isActive\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst getRetailerAd = gql`\n  query {\n    retailerAdvertisement {\n      data {\n        id\n        attributes {\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          url\n          isActive\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst updateDashboardAd = gql`\n  mutation updateAdvertisement($imageId: ID, $clickUrl: String) {\n    updateAdvertisement(\n      data: { AdImage: $imageId, url: $clickUrl, isActive: true }\n    ) {\n      data {\n        id\n        attributes {\n          AdImage {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          url\n          isActive\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst updateRetailerAd = gql`\n  mutation updateAdvertisement($imageId: ID, $clickUrl: String) {\n    updateRetailerAdvertisement(\n      data: { Image: $imageId, url: $clickUrl, isActive: true }\n    ) {\n      data {\n        id\n        attributes {\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          url\n          isActive\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst getSmsCampaigns = gql`\n  query ($page: Int, $pageSize: Int, $id: ID) {\n    smsCampaigns(\n      sort: \"updatedAt:desc\"\n      pagination: { page: $page, pageSize: $pageSize }\n      filters: { id: { eq: $id } }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          message\n          isAllFarmers\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          recipients {\n            data {\n              id\n              attributes {\n                Name\n                ContactNumber\n              }\n            }\n          }\n          apiKey\n          SMSGatewayResponse\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst createSMSCampaign = gql`\n  mutation createSMSCampaign(\n    $message: String\n    $state: ID\n    $lga: ID\n    $area: ID\n    $village: ID\n    $isAllFarmers: Boolean\n  ) {\n    createSmsCampaign(\n      data: {\n        message: $message\n        state: $state\n        lga: $lga\n        area: $area\n        village: $village\n        isAllFarmers: $isAllFarmers\n      }\n    ) {\n      data {\n        id\n        attributes {\n          message\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          recipients {\n            data {\n              id\n              attributes {\n                Name\n                ContactNumber\n              }\n            }\n          }\n          apiKey\n          SMSGatewayResponse\n          isAllFarmers\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst getPendingRetailerApprovals = gql`\n  query getPendingRetailerApprovals {\n    usersPermissionsUsers(\n      filters: {\n        and: [\n          { confirmed: { eq: false } }\n          { blocked: { eq: false } }\n          { UserType: { eq: \"Retailer\" } }\n        ]\n      }\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          username\n          Name\n          Bio\n          email\n          confirmed\n          blocked\n          UserType\n          ContactNumber\n          isContactNumberVerified\n        }\n      }\n    }\n  }\n`;\nconst readApprovalCropPrices = gql`\n  query readApprovalCropPrices {\n    cropPrices(\n      filters: { publishedAt: { eq: null }, Rejected: { eq: false } }\n      publicationState: PREVIEW\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Price\n          Unit\n          market {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Image {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          Rejected\n          user {\n            data {\n              id\n              attributes {\n                Name\n                username\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataService {\n  baseURL = environment.apiUrl;\n  params: URLSearchParams = new URLSearchParams();\n\n  constructor(\n    private http: HttpClient,\n    private apollo: Apollo,\n    private toastr: ToastrService\n  ) { }\n\n  handleError(error: HttpErrorResponse) {\n    const errorMessage = 'Unknown error!';\n    console.log(error);\n    // if (error.error instanceof ErrorEvent) {\n    //   // Client-side errors\n    //   errorMessage = `Error: ${error.error.message}`;\n    // } else {\n    //   // Server-side errors\n    //   errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    // }\n    if (error.error.message) { this.toastr.error(error.error.message); }\n    if (error.status !== 200) {\n      this.toastr.error(error.error.error.Message);\n      this.toastr.error(error.error.message);\n      return throwError(errorMessage);\n    }\n  }\n\n  Login(data): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n    };\n    return this.http.post(this.baseURL + `/auth/login/`, data, httpOptions1);\n  }\n  createRetailer(data): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n    };\n    return this.http.post(this.baseURL + `/api/users`, data, httpOptions1);\n  }\n  fetchMessage(api_token, message_id): Observable<any> {\n    return this.http\n      .get(\n        `https://www.bulksmsnigeria.com/api/v2/delivery?api_token=${api_token}&message_id=${message_id}`\n      )\n      .pipe(catchError(this.handleError));\n  }\n  getSurveyDetails(data): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`,\n      },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/survey-forms/${data}?populate=Fields`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n  downloadActivities(data): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/activity/download?fromDate=${data.fromDate}&toDate=${data.toDate}`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadCropPrices(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/crop-prices`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadFarmDemos(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/download-farm-demos`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadIndoramaUpdates(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/indorama-updates`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n\n  downloadMarketplace(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/marketplace`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadMaster(masterType): Observable<any> {\n\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/${masterType}`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadStates(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/states`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadLgas(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/lgas`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadCities(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/cities`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadVillages(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/villages`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadMarkets(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/markets`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadCrops(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/crops`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadUsers(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/activity/download-users`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadRetailers(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/activity/retailers-download`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n\n  downloadSMSCampaigns(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/sms-campaigns`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n\n  downloadSoilTests(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/soiltest`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadResponses(data): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`,\n      },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/survey-result/download?surveyForm=${data}`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  getSoilTestStats(data, fromDate?, toDate?): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`,\n      },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/dashboard-soil-npk?stateId=${data}&fromDate=${fromDate}T00:00:00.000Z&toDate=${toDate}T23:59:59.000Z`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n  getFarmDemoYieldStats(data, fromDate?, toDate?): Observable<any> {\n    const httpOptions1: Object = {\n      observe: 'response',\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`,\n      },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/dashboard-farm-demo?stateId=${data}&fromDate=${fromDate}T00:00:00.000Z&toDate=${toDate}T23:59:59.000Z`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n  getDashboardStats(data?, fromDate?, toDate?) {\n    return this.apollo.watchQuery({\n      query: getDashboardStats,\n      fetchPolicy: 'no-cache',\n      variables: {\n        state: data,\n        fromDate: `${fromDate}T00:00:00.000Z`,\n        toDate: `${toDate}T23:59:59.000Z`,\n      },\n    });\n  }\n  getCropPricesDashboard(id, market?, fromDate?, toDate?) {\n    return this.apollo.watchQuery({\n      query: getCropPricesDashboard,\n      fetchPolicy: 'no-cache',\n      variables: {\n        id: id,\n        market: market,\n        fromDate: `${fromDate}T00:00:00.000Z`,\n        toDate: `${toDate}T23:59:59.000Z`,\n      },\n    });\n  }\n  getFarmDemoStatsDashboard(state?, status?, fromDate?, toDate?) {\n    return this.apollo.watchQuery({\n      query: getFarmDemoStatsDashboard,\n      fetchPolicy: 'no-cache',\n      variables: {\n        state: state,\n        status: status,\n        fromDate: `${fromDate}T00:00:00.000Z`,\n        toDate: `${toDate}T23:59:59.000Z`,\n      },\n    });\n  }\n  getPendingRetailerApprovals() {\n    return this.apollo.watchQuery({\n      query: getPendingRetailerApprovals,\n      fetchPolicy: 'no-cache',\n    });\n  }\n  getApprovalCropPrices() {\n    return this.apollo.watchQuery({\n      query: readApprovalCropPrices,\n      fetchPolicy: 'no-cache',\n    });\n  }\n  getallChats(limit?, start?, key?, isAskIndorama?) {\n    return this.apollo.watchQuery({\n      query: getallChats,\n      fetchPolicy: 'no-cache',\n      variables: {\n        limit: limit,\n        start: start,\n        key: key ? key : undefined,\n        isAskIndorama: isAskIndorama ? isAskIndorama : undefined,\n      },\n    });\n  }\n  getSurveys(limit?, start?, key?) {\n    return this.apollo.watchQuery({\n      query: getSurveys,\n      fetchPolicy: 'no-cache',\n      variables: {\n        limit: limit,\n        start: start,\n        key: key ? key : undefined,\n      },\n    });\n  }\n  getSmsCampaigns(page?, pageSize?, id?) {\n    return this.apollo.watchQuery({\n      query: getSmsCampaigns,\n      fetchPolicy: 'no-cache',\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        id: id,\n      },\n    });\n  }\n  createSMSCampaign(data) {\n    return this.apollo.mutate({\n      mutation: createSMSCampaign,\n      fetchPolicy: 'no-cache',\n      variables: {\n        message: data.message,\n        state: data.state ? data.state : undefined,\n        lga: data.lga ? data.lga : undefined,\n        area: data.area ? data.area : undefined,\n        village: data.village ? data.village : undefined,\n        isAllFarmers: !data.isAllFarmers,\n      },\n    });\n  }\n  getSurveyResults(id) {\n    return this.apollo.watchQuery({\n      query: getSurveyResults,\n      fetchPolicy: 'no-cache',\n      variables: {\n        limit: 10000,\n        id: id,\n      },\n    });\n  }\n  createSurveys(SurveyTitle, SurveyDescription, Fields) {\n    return this.apollo.mutate({\n      mutation: CreateSurveys,\n      fetchPolicy: 'no-cache',\n      variables: {\n        SurveyTitle: SurveyTitle,\n        SurveyDescription: SurveyDescription,\n        Fields: Fields,\n      },\n    });\n  }\n  deleteSurvey(id) {\n    return this.apollo.mutate({\n      mutation: deleteSurvey,\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  getChatMessages(id) {\n    return this.apollo.watchQuery({\n      query: getChatMessages,\n      variables: {\n        id: id,\n      },\n      fetchPolicy: 'no-cache',\n    });\n  }\n  getFarmDemos(page?, pageSize?) {\n    return this.apollo.watchQuery({\n      query: FarmDemosQuery,\n      fetchPolicy: 'no-cache',\n      variables: {\n        page: page,\n        pageSize: pageSize,\n      },\n    });\n  }\n  getSingleFarmDemo(id) {\n    return this.apollo.watchQuery({\n      query: FarmDemoQuery,\n      variables: {\n        id: id,\n      },\n      fetchPolicy: 'no-cache',\n    });\n  }\n  getCrops(page?, pageSize?, searchTerm?) {\n    return this.apollo.watchQuery({\n      query: CropsQuery,\n      fetchPolicy: 'no-cache',\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        searchTerm: searchTerm,\n      },\n    });\n  }\n  getStates(page?, pageSize?, searchTerm?) {\n    return this.apollo.watchQuery({\n      query: StatesQuery,\n      fetchPolicy: 'no-cache',\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        searchTerm: searchTerm\n      },\n    });\n  }\n  getLGAs(page?, pageSize?, searchTerm?, id?) {\n    return this.apollo.watchQuery({\n      query: LGAquery,\n      fetchPolicy: 'no-cache',\n      variables: {\n        id: id,\n        page: page,\n        pageSize: pageSize,\n        searchTerm: searchTerm,\n      },\n    });\n  }\n  getVillages(page?, pageSize?, searchTerm?, lgaid?) {\n    return this.apollo.watchQuery({\n      query: Villagesquery,\n      fetchPolicy: 'no-cache',\n      variables: {\n        id: lgaid,\n        page: page,\n        pageSize: pageSize,\n        searchTerm: searchTerm,\n      },\n    });\n  }\n  getAreas(page?, pageSize?, searchTerm?, id?) {\n    return this.apollo.watchQuery({\n      query: Areasquery,\n      fetchPolicy: 'no-cache',\n      variables: {\n        id: id,\n        page: page,\n        pageSize: pageSize,\n        searchTerm: searchTerm,\n      },\n    });\n  }\n  getMarkets(page?, pageSize?,  searchTerm?, id?) {\n    return this.apollo.watchQuery({\n      query: MarketQuery,\n      fetchPolicy: 'no-cache',\n      variables: {\n        id: id,\n        page: page,\n        pageSize: pageSize,\n        searchTerm: searchTerm,\n      },\n    });\n  }\n  getCropPrices(page?, pageSize?, PublicationState?, publishedAt?, Rejected?) {\n    return this.apollo.watchQuery({\n      query: CropPricesQuery,\n      fetchPolicy: 'no-cache',\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        publicationState: PublicationState,\n        publishedAt: publishedAt,\n        Rejected: Rejected,\n      },\n    });\n  }\n  getRetailers(page?, pageSize?, confirmed?, blocked?) {\n    return this.apollo.watchQuery({\n      query: RetailerQuery,\n      fetchPolicy: 'no-cache',\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        confirmed: confirmed,\n        blocked: blocked,\n      },\n    });\n  }\n  getRetailerCategories() {\n    return this.apollo.watchQuery({\n      query: getRetailerCategories,\n      fetchPolicy: 'no-cache',\n    });\n  }\n  getUsers(page?, pageSize?, UserType?) {\n\n    const variables = {\n      page: page,\n      pageSize: pageSize,\n    };\n\n    if (UserType != null) {\n      variables['UserType'] = UserType;\n    }\n\n    return this.apollo.watchQuery({\n      query: UsersQuery,\n      fetchPolicy: 'no-cache',\n      variables: variables,\n    });\n  }\n  getUsersLarge(UserType?, data?) {\n    return this.apollo.watchQuery({\n      query: queryUsersLarge,\n      fetchPolicy: 'no-cache',\n      variables: {\n        UserType: UserType,\n        village: data.village ? data.village : null,\n        lga: data.lga ? data.lga : null,\n        area: data.area ? data.area : null,\n        state: data.state ? data.state : null,\n      },\n    });\n  }\n  getsoilTests(page?, pageSize?) {\n    return this.apollo.watchQuery({\n      query: SoilTestQuery,\n      fetchPolicy: 'no-cache',\n      variables: {\n        page: page,\n        pageSize: pageSize,\n      },\n    });\n  }\n  getsingleSoilTests(id) {\n    return this.apollo.watchQuery({\n      query: SingleSoilTestQuery,\n      fetchPolicy: 'no-cache',\n      variables: {\n        id: id,\n      },\n    });\n  }\n  getsingleRetailer(id) {\n    return this.apollo.watchQuery({\n      query: GetSingleRetailerQuery,\n      fetchPolicy: 'no-cache',\n      variables: {\n        id: id,\n      },\n    });\n  }\n\n  AddFarmdemo(farmdemo) {\n    return this.apollo.mutate({\n      mutation: AddFarmDemoMutation,\n      variables: {\n        farmer: farmdemo.Farmer,\n        latitude: parseFloat(farmdemo.FarmLocationLatitude),\n        longitude: parseFloat(farmdemo.FarmLocationLongitude),\n        lga: farmdemo.lga,\n        state: farmdemo.state,\n        crop: farmdemo.Crops,\n        area: farmdemo.AreaOfField,\n        farmerPractise: farmdemo.ComponentFarmDemoFarmDemoPractiseInput,\n        indoramaPractise: farmdemo.ComponentFarmDemoFarmDemoPractiseInput,\n        dateOfHarvesting: farmdemo.dateOfHarvesting,\n        season: farmdemo.Season,\n        Status: farmdemo.Status,\n        isPesticidesUsed: farmdemo.isPesticidesUsed == 'true' ? true : false,\n        images: farmdemo.images,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n\n  AddStates(state) {\n    return this.apollo.mutate({\n      mutation: StatesMutation,\n      variables: {\n        Name: state.state,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  AddLGA(lga) {\n    return this.apollo.mutate({\n      mutation: LGAmutation,\n      variables: {\n        Name: lga.lga,\n        state: lga.state,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  AddArea(area) {\n    return this.apollo.mutate({\n      mutation: AreaMutation,\n      variables: {\n        Name: area.area,\n        lga: area.lga,\n        PostalCode: area.PostalCode,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  AddMarket(market) {\n    return this.apollo.mutate({\n      mutation: MarketMutation,\n      variables: {\n        Name: market.market,\n        state: market.state,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  AddCrop(crop, image) {\n    return this.apollo.mutate({\n      mutation: CropsMutation,\n      variables: {\n        Name: crop.crop,\n        image: image,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  Addvillage(village) {\n    return this.apollo.mutate({\n      mutation: VillageMutation,\n      variables: {\n        Name: village.village,\n        area: village.area,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  AddCropPrice(price, image) {\n    return this.apollo.mutate({\n      mutation: CropPriceMutation,\n      variables: {\n        crop: price.crop,\n        price: parseFloat(price.Price),\n        unit: price.Unit,\n        state: price.state,\n        market: price.market,\n        image: image,\n        user: parseInt(localStorage.getItem('uid')),\n        published: new Date(),\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  AddIndoramaUpdates(price, imageid) {\n    return this.apollo.mutate({\n      mutation: CreateIndoramaUpdates,\n      variables: {\n        Title: price.Title,\n        Body: price.Body,\n        Images: imageid ? imageid : price.Image,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  createBestCropPractise(price, imageid, media) {\n    return this.apollo.mutate({\n      mutation: CreateBestCropPractices,\n      variables: {\n        crop: price.crop,\n        content: price.content,\n        cropImage: imageid,\n        media: media,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  createMarketplaceProduct(price, imageid) {\n    return this.apollo.mutate({\n      mutation: CreateMarketplaceProduct,\n      variables: {\n        itemName: price.itemName,\n        images: imageid,\n        userId: price.userId,\n        contactNumber: String(price.contactNumber),\n        price: price.price,\n        availableQty: parseInt(price.availableQty),\n        unit: price.unit,\n        category: parseInt(price.category),\n        description: price.description,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  updateMarketplaceProduct(price, id, imageid?) {\n    return this.apollo.mutate({\n      mutation: UpdateMarketplaceProduct,\n      variables: {\n        id: id,\n        itemName: price.itemName,\n        images: imageid,\n        // userId: price.userId,\n        contactNumber: String(price.contactNumber),\n        price: price.price,\n        availableQty: parseInt(price.availableQty),\n        unit: price.unit,\n        category: parseInt(price.category),\n        description: price.description,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  updateMarketplaceProductImg(id, imageid?) {\n    return this.apollo.mutate({\n      mutation: UpdateMarketplaceProductImg,\n      variables: {\n        id: id,\n        images: imageid,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  createActivity(price) {\n    return this.apollo.mutate({\n      mutation: CreateActivities,\n      variables: {\n        FarmerName: price.FarmerName ? price.FarmerName : undefined,\n        Date: price.Date,\n        Latitude: parseFloat(price.Latitude),\n        Longitude: parseFloat(price.Longitude),\n        NoOfAttendees: parseInt(price.NoOfAttendees),\n        crop: price.crop ? price.crop : undefined,\n        ConditionOfCrop: price.ConditionOfCrop\n          ? price.ConditionOfCrop\n          : undefined,\n        PlannedFarmDay: price.PlannedFarmDay ? price.PlannedFarmDay : undefined,\n        Reason: price.Reason,\n        area: price.area,\n        ActivityType: price.ActivityType,\n        Time: price.Time,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  getAgronomist(id?) {\n    return this.apollo.watchQuery({\n      query: getAgronomist,\n      variables: {\n        user: id,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  getIndoramaUpdates(id?, page?, pageSize?) {\n    return this.apollo.watchQuery({\n      query: getIndoramaUpdates,\n      variables: {\n        id: id,\n        isActive: true,\n        isDelete: false,\n        page: page,\n        pageSize: pageSize,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  getMarketplace(pageNumber?, pageSize?, categoryFilter?) {\n    return this.apollo.watchQuery({\n      query: GetMarketplace,\n      variables: {\n        pageNumber: pageNumber,\n        pageSize: pageSize,\n        categoryFilter: categoryFilter,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  getSingleMarketplaceProduct(id) {\n    return this.apollo.watchQuery({\n      query: GetMarketplaceSingleProduct,\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  getBestCropPractises(page?, pageSize?, cropFilter?) {\n    return this.apollo.watchQuery({\n      query: GetBestCropPractices,\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        cropFilter: cropFilter,\n      },\n      errorPolicy: 'all',\n      // fetchPolicy: \"no-cache\",\n    });\n  }\n  getActivities(page?, pageSize?) {\n    return this.apollo.watchQuery({\n      query: GetActivities,\n      fetchPolicy: 'no-cache',\n      variables: {\n        page: page,\n        pageSize: pageSize,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  getActivity(id?) {\n    return this.apollo.watchQuery({\n      query: GetSingleActivity,\n      fetchPolicy: 'no-cache',\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  getMarketplaceCategories(id?) {\n    return this.apollo.watchQuery({\n      query: GetMarketplaceCategories,\n      fetchPolicy: 'no-cache',\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  createAgronomist(data, id) {\n    return this.apollo.mutate({\n      mutation: CreateAgronomist,\n      variables: {\n        areas: data.area,\n        user: id,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  UpdateCropPrice(price, id, imageid, Rejected?, published?) {\n    return this.apollo.mutate({\n      mutation: UpdateCropPriceMutation,\n      variables: {\n        id: id,\n        crop: price?.crop,\n        price: price?.Price ? parseFloat(price?.Price) : undefined,\n        unit: price?.Unit,\n        state: price?.state,\n        market: price?.market,\n        published: published,\n        Rejected: Rejected,\n        image: imageid ? imageid : price?.Image,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  AddSoilTestResult(result) {\n    return this.apollo.mutate({\n      mutation: AddSoilTestResult,\n      variables: {\n        soilTestSampleID: result.soil_test_sample,\n        zinc: result.ZincObserved,\n        boron: result.BoronObserved,\n        iron: result.IronObserved,\n        calcium: result.CalciumObserved,\n        Carbon: result.OrganicCarbonObserved,\n        phosphorous: result.PhosphorousObserved,\n        magnesium: result.MagnesiumObserved,\n        ph: result.phObserved,\n        copper: result.CopperObserved,\n        Nitrogen: result.TotalNitrogenObserved,\n        manganese: result.ManganeseObserved,\n        pottassium: result.PotassiumObserved,\n        sulphur: result.SulphurObserved,\n        RecommendedNPKQty: result.RecommendedNPKQty,\n        RecommendedUreaQty: result.RecommendedUreaQty,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  UpdateSoilTestResult(result) {\n    return this.apollo.mutate({\n      mutation: UpdateSoilTestResult,\n      variables: {\n        id: result.id,\n        zinc: result.ZincObserved,\n        boron: result.BoronObserved,\n        iron: result.IronObserved,\n        calcium: result.CalciumObserved,\n        Carbon: result.OrganicCarbonObserved,\n        phosphorous: result.PhosphorousObserved,\n        magnesium: result.MagnesiumObserved,\n        ph: result.phObserved,\n        copper: result.CopperObserved,\n        Nitrogen: result.TotalNitrogenObserved,\n        manganese: result.ManganeseObserved,\n        pottassium: result.PotassiumObserved,\n        sulphur: result.SulphurObserved,\n        RecommendedNPKQty: result.RecommendedNPKQty,\n        RecommendedUreaQty: result.RecommendedUreaQty,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  UpdateCrop(crop, id, Imageid) {\n    return this.apollo.mutate({\n      mutation: UpdateCrops,\n      variables: {\n        Name: crop.crop,\n        isDelete: crop.isDelete,\n        id: id,\n        image: Imageid,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  UpdateState(data, id) {\n    return this.apollo.mutate({\n      mutation: UpdateState,\n      variables: {\n        Name: data.state,\n        isDelete: data.isDelete,\n        id: id,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  UpdateLGA(data, id) {\n    return this.apollo.mutate({\n      mutation: UpdateLGA,\n      variables: {\n        Name: data.lga,\n        state: data.state,\n        isDelete: data.isDelete,\n        id: id,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  UpdateMarket(data, id) {\n    return this.apollo.mutate({\n      mutation: UpdateMarket,\n      variables: {\n        Name: data.market,\n        state: data.state,\n        isDelete: data.isDelete,\n        id: id,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  UpdateArea(area, id) {\n    return this.apollo.mutate({\n      mutation: UpdateArea,\n      variables: {\n        Name: area.area,\n        lga: area.lga,\n        PostalCode: area.PostalCode,\n        isDelete: area.isDelete,\n        id: id,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  Updatevillage(village, id) {\n    return this.apollo.mutate({\n      mutation: UpdateVillage,\n      variables: {\n        Name: village.village,\n        area: village.area,\n        isDelete: village.isDelete,\n        id: id,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  UpdateSoilTest(test, soilTestId) {\n    return this.apollo.mutate({\n      mutation: UpdateSoilTest,\n      variables: {\n        soilTestId: soilTestId,\n        contactNumber: test.ContactNumber,\n        preferredCollectionDate: test.PreferredCollectionDate,\n        reason: test.ReasonForSoilTest,\n        farmerID: test.Farmer,\n        areaID: test.area,\n        lgaID: test.lga,\n        soilTestDisplayID: test.soilTestDisplayID,\n        status: test.Status,\n        nutrient: test.nutrient,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  UpdateFarmDemo(data, id) {\n    return this.apollo.mutate({\n      mutation: UpdateFarmDemo,\n      variables: {\n        id: id,\n        farmer: data.Farmer,\n        longitude: parseFloat(data.FarmLocationLongitude),\n        latitude: parseFloat(data.FarmLocationLatitude),\n        lga: data.lga,\n        state: data.state,\n        crop: data.Crops,\n        area: data.AreaOfField,\n        farmerPractise: {\n          Yield: parseFloat(data.Yield_F),\n          DateOfSowing: data.DateOfSowing_F,\n          DateOfDemonstration: data.DateOfDemonstration_F,\n          FirstUreaApplication: data.FirstUreaApplication_F,\n          SecondUreaApplication: data.SecondUreaApplication_F,\n        },\n        indoramaPractise: {\n          Yield: parseFloat(data.Yield_I),\n          DateOfSowing: data.DateOfSowing_I,\n          DateOfDemonstration: data.DateOfDemonstration_I,\n          FirstUreaApplication: data.FirstUreaApplication_I,\n          SecondUreaApplication: data.SecondUreaApplication_I,\n        },\n        // isPesticidesUsed: data.isPesticidesUsed,\n        images: data.images,\n        season: data.Season,\n        Status: data.Status,\n        dateOfHarvesting: data.DateOfHarvesting,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  UpdateRetailer(data, id) {\n    return this.apollo.mutate({\n      mutation: updateRetailerQuery,\n      variables: {\n        id: id,\n        categories: data.retailer_categories,\n        name: data.Name,\n        latitude: data.Latitude ? parseFloat(data.Latitude) : undefined,\n        longitude: data.Longitude ? parseFloat(data.Longitude) : undefined,\n        village: data.village,\n        password: data.password ? data.password : undefined,\n        lga: data.lga,\n        bio: data.Bio,\n        agronomist_lgas: data.agronomist_lgas,\n        blocked: data.blocked == 'true' ? true : false,\n        confirmed: data.confirmed,\n        UserType: data?.UserType,\n        contactNumber: data.ContactNumber,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  UpdateRetailerPic(id, image) {\n    return this.apollo.mutate({\n      mutation: updateRetailerProfPic,\n      variables: {\n        id: id,\n        prof_pic: image,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  AddFarmdemoPic(id, image) {\n    return this.apollo.mutate({\n      mutation: UpdateFarmDemo,\n      variables: {\n        id: id,\n        images: image,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  addRetailerProducts(data, retailer_category, retailer, image) {\n    return this.apollo.mutate({\n      mutation: createdRetailerProducts,\n      variables: {\n        ItemName: data.itemName,\n        Price: parseInt(data.price),\n        Unit: data.unit,\n        Images: image,\n        isApproved: true,\n        retailer_category: retailer_category,\n        retailers: retailer,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  UpdateRetailerProducts(data, retailer_category, retailer) {\n    return this.apollo.mutate({\n      mutation: updateRetailerProducts,\n      variables: {\n        productId: data.id,\n        itemName: data.itemName,\n        price: parseInt(data.price),\n        unit: data.unit,\n        // images: data.,\n        isApproved: true,\n        retailer_category: retailer_category,\n        retailer: retailer,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  UpdateIndoramaUpdates(price?, id?, imageid?) {\n    return this.apollo.mutate({\n      mutation: UpdateIndoramaUpdates,\n      variables: {\n        id: id,\n        Title: price?.Title,\n        isDelete: price?.isDelete,\n        Body: price?.Body,\n        Images: imageid ? imageid : price?.Image,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  updateActivity(price, id) {\n    return this.apollo.mutate({\n      mutation: UpdateActivity,\n      variables: {\n        id: id,\n        FarmerName: price.FarmerName,\n        Date: price.Date,\n        Latitude: parseFloat(price.Latitude),\n        Longitude: parseFloat(price.Longitude),\n        NoOfAttendees: parseInt(price.NoOfAttendees),\n        crop: price.crop,\n        ConditionOfCrop: price.ConditionOfCrop,\n        PlannedFarmDay: price.PlannedFarmDay,\n        Reason: price.Reason,\n        area: price.area,\n        ActivityType: price.ActivityType,\n        Time: price.Time,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  upload(file: any): Observable<any> {\n    const formData = new FormData();\n    for (let i = 0; i < file.length; i++) {\n      // formData.append(\"file[]\",  file[i]);\n      formData.append('files', file[i], file[i]?.name);\n    }\n    // formData.append(\"files\", file, file?.name);\n    console.log(formData);\n    const httpOptions1: Object = {\n      observe: 'response',\n    };\n    return this.http.post(this.baseURL + `/api/upload`, formData, httpOptions1);\n  }\n  uploadActivities(file: any): Observable<any> {\n    const formData = new FormData();\n    for (let i = 0; i < file.length; i++) {\n      // formData.append(\"file[]\",  file[i]);\n      formData.append('file', file[i], file[i]?.name);\n    }\n    // formData.append(\"files\", file, file?.name);\n    console.log(formData);\n    const httpOptions1: Object = {\n      observe: 'response',\n    };\n    return this.http.post(\n      this.baseURL + `/api/activity/upload`,\n      formData,\n      httpOptions1\n    );\n  }\n  deleteArea(id) {\n    return this.apollo.mutate({\n      mutation: DeleteAreaMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  deleteVillage(id) {\n    return this.apollo.mutate({\n      mutation: DeleteVillageMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  deleteLGA(id) {\n    return this.apollo.mutate({\n      mutation: DeleteLGAMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  deleteState(id) {\n    return this.apollo.mutate({\n      mutation: DeleteStatesMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  deleteMarket(id) {\n    return this.apollo.mutate({\n      mutation: DeleteMarketMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  deleteCrop(id) {\n    return this.apollo.mutate({\n      mutation: DeleteCropMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  deleteFarmDemo(id) {\n    return this.apollo.mutate({\n      mutation: DeleteFarmdemo,\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  deleteProduct(id) {\n    return this.apollo.mutate({\n      mutation: DeleteRetailerProduct,\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  deleteFile(id) {\n    return this.apollo.mutate({\n      mutation: DeleteFile,\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  deleteUser(id) {\n    return this.apollo.mutate({\n      mutation: DeleteUser,\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  deleteBestPractice(id) {\n    return this.apollo.mutate({\n      mutation: DeleteBestPractice,\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  deleteActivity(id) {\n    return this.apollo.mutate({\n      mutation: DeleteActivity,\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  DeleteMarketplaceProduct(id) {\n    return this.apollo.mutate({\n      mutation: DeleteMarketplaceProduct,\n      variables: {\n        id: id,\n      },\n      errorPolicy: 'all',\n    });\n  }\n  getDashboardAd() {\n    return this.apollo.watchQuery({\n      query: getDashboardAd,\n      fetchPolicy: 'no-cache',\n    });\n  }\n  getRetailerAd() {\n    return this.apollo.watchQuery({\n      query: getRetailerAd,\n      fetchPolicy: 'no-cache',\n    });\n  }\n  updateRetailerAd(url, image) {\n    return this.apollo.mutate({\n      mutation: updateRetailerAd,\n      variables: {\n        // clickUrl: url,\n        imageId: image,\n      },\n      errorPolicy: 'all',\n      fetchPolicy: 'no-cache',\n    });\n  }\n  updateDashboardAd(url, image) {\n    return this.apollo.mutate({\n      mutation: updateDashboardAd,\n      fetchPolicy: 'no-cache',\n      variables: {\n        // clickUrl: url,\n        imageId: image,\n      },\n      errorPolicy: 'all',\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\n\r\nimport { IconSetService } from '@coreui/icons-angular';\r\nimport { freeSet } from '@coreui/icons';\r\n\r\n@Component({\r\n  // tslint:disable-next-line\r\n  selector: 'body',\r\n  template: '<router-outlet></router-outlet>',\r\n  providers: [IconSetService],\r\n})\r\nexport class AppComponent implements OnInit {\r\n  constructor(\r\n    private router: Router,\r\n    public iconSet: IconSetService\r\n  ) {\r\n    // iconSet singleton\r\n    iconSet.icons = { ...freeSet };\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.router.events.subscribe((evt) => {\r\n      if (!(evt instanceof NavigationEnd)) {\r\n        return;\r\n      }\r\n      window.scrollTo(0, 0);\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AgGridModule } from 'ag-grid-angular';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\n\r\nimport { AppComponent } from './app.component';\r\n// Import containers\r\nimport { DefaultLayoutComponent } from './containers';\r\nimport { P404Component } from './views/error/404.component';\r\nimport { P500Component } from './views/error/500.component';\r\nimport { LoginComponent } from './views/login/login.component';\r\n\r\n// const APP_CONTAINERS = [\r\n//   DefaultLayoutComponent\r\n// ];\r\n\r\nimport {\r\n  AppAsideModule,\r\n  AppBreadcrumbModule,\r\n  AppHeaderModule,\r\n  AppFooterModule,\r\n  AppSidebarModule,\r\n} from '@coreui/angular';\r\n\r\n// Import routing module\r\nimport { AppRoutingModule } from './app.routing';\r\n// Import 3rd party components\r\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\r\n// import { TabsModule } from 'ngx-bootstrap/tabs';\r\nimport { GraphQLModule } from './graphql.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    AgGridModule.withComponents([]),\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    AppRoutingModule,\r\n    AppAsideModule,\r\n    AppBreadcrumbModule.forRoot(),\r\n    ToastrModule.forRoot(),\r\n    AppFooterModule,\r\n    AppHeaderModule,\r\n    NgSelectModule,\r\n    AppSidebarModule,\r\n    BsDropdownModule.forRoot(),\r\n    GraphQLModule,\r\n  ],\r\n  declarations: [\r\n    AppComponent,\r\n    P404Component,\r\n    P500Component,\r\n    LoginComponent,\r\n    DefaultLayoutComponent,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: LocationStrategy,\r\n      useClass: HashLocationStrategy\r\n    },\r\n  ],\r\n  bootstrap: [ AppComponent ]\r\n})\r\nexport class AppModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n// Import Containers\r\nimport { DefaultLayoutComponent } from './containers';\r\nimport { P404Component } from './views/error/404.component';\r\nimport { P500Component } from './views/error/500.component';\r\nimport { LoginComponent } from './views/login/login.component';\r\nimport { AuthGuard } from './views/login/auth.guard';\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'dashboard',\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: '404',\r\n    component: P404Component,\r\n    data: {\r\n      title: 'Page 404'\r\n    }\r\n  },\r\n  {\r\n    path: '500',\r\n    component: P500Component,\r\n    data: {\r\n      title: 'Page 500'\r\n    }\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n    data: {\r\n      title: 'Login Page'\r\n    }\r\n  },\r\n  {\r\n    path: '',\r\n    component: DefaultLayoutComponent,\r\n    data: {\r\n      title: 'Home'\r\n    },\r\n    canActivate: [AuthGuard],\r\n    children: [\r\n      {\r\n        path: 'sms-campaigns',\r\n        loadChildren: () => import('./views/sms-campaigns/sms-campaigns.module').then(m => m.SMSCampaignsModule)\r\n      },\r\n      {\r\n        path: 'farmdemo',\r\n        loadChildren: () => import('./views/farm-demo/farm-demo.module').then(m => m.FarmDemoModule)\r\n      },\r\n      {\r\n        path: 'chat',\r\n        loadChildren: () => import('./views/chat/chat.module').then(m => m.ChatModule)\r\n      },\r\n      {\r\n        path: 'activities',\r\n        loadChildren: () => import('./views/activities/activities.module').then(m => m.ActivitiesModule)\r\n      },\r\n      {\r\n        path: 'surveys',\r\n        loadChildren: () => import('./views/surveys/surveys.module').then(m => m.SurveysModule)\r\n      },\r\n      {\r\n        path: 'marketplace',\r\n        loadChildren: () => import('./views/marketplace/marketplace.module').then(m => m.MarketplaceModule)\r\n      },\r\n      {\r\n        path: 'best-crop-practices',\r\n        loadChildren: () => import('./views/best-crop-practices/best-crop-practices.module').then(m => m.BestCropPracticesModule)\r\n      },\r\n      {\r\n        path: 'indorama_updates',\r\n        loadChildren: () => import('./views/indorama-updates/indorama-updates.module').then(m => m.IndoramaUpdatesModule)\r\n      },\r\n      {\r\n        path: 'soiltest',\r\n        loadChildren: () => import('./views/soil-test/soil-test.module').then(m => m.SoilTestModule)\r\n      },\r\n      {\r\n        path: 'cropprices',\r\n        loadChildren: () => import('./views/crop-prices/crop-prices.module').then(m => m.CropPricesModule)\r\n      },\r\n      {\r\n        path: 'dashboard',\r\n        loadChildren: () => import('./views/dashboard/dashboard.module').then(m => m.DashboardModule)\r\n      },\r\n      {\r\n        path: 'advertisement',\r\n        loadChildren: () => import('./views/advertisement/advertisement.module').then(m => m.AdvertisementModule)\r\n      },\r\n      {\r\n        path: 'retailers',\r\n        loadChildren: () => import('./views/retailers/retailers.module').then(m => m.RetailersModule)\r\n      },\r\n      {\r\n        path: 'users',\r\n        loadChildren: () => import('./views/users/users.module').then(m => m.UsersModule)\r\n      },\r\n      {\r\n        path: 'masters',\r\n        loadChildren: () => import('./views/masters/masters.module').then(m => m.MastersModule)\r\n      }\r\n    ]\r\n  },\r\n  { path: '**', component: P404Component }\r\n];\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' }) ],\r\n  exports: [ RouterModule ]\r\n})\r\nexport class AppRoutingModule {}\r\n","import { INavData } from '@coreui/angular';\r\n\r\nexport const navItems = [\r\n  // {\r\n  //   name: \"Dashboard\",\r\n  //   url: \"/dashboard\",\r\n  //   icon: \"icon-speedometer\",\r\n  //   role: \"\",\r\n  // },\r\n  {\r\n    name: 'Activities',\r\n    url: '/activities/all',\r\n    icon: 'icon-cursor',\r\n    role: 'Admin',\r\n  },\r\n  {\r\n    name: 'Marketplace',\r\n    url: '/marketplace/all',\r\n    icon: 'icon-cursor',\r\n    role: 'Admin',\r\n  },\r\n  {\r\n    name: 'Indorama Updates',\r\n    url: '/indorama_updates/all',\r\n    icon: 'icon-cursor',\r\n    role: 'Admin',\r\n  },\r\n  {\r\n    name: 'SMS Campaigns',\r\n    url: '/sms-campaigns/all',\r\n    icon: 'icon-cursor',\r\n    role: 'Admin',\r\n  },\r\n  {\r\n    name: 'Farm Demo',\r\n    url: '/farmdemo/all',\r\n    icon: 'icon-cursor',\r\n    role: 'Admin',\r\n  },\r\n  {\r\n    name: 'Soil Analysis',\r\n    url: '/soiltest/customers',\r\n    icon: 'icon-cursor',\r\n    role: 'Admin',\r\n  },\r\n  {\r\n    name: 'Crop Prices',\r\n    url: '/cropprices/all',\r\n    icon: 'icon-cursor',\r\n    role: 'Admin',\r\n  },\r\n  {\r\n    name: 'Retailers',\r\n    url: '/retailers/all',\r\n    icon: 'icon-cursor',\r\n    role: '',\r\n  },\r\n  {\r\n    name: 'Users',\r\n    url: '/users/all',\r\n    icon: 'icon-cursor',\r\n    role: 'Admin',\r\n  },\r\n  {\r\n    name: 'Best crop practices',\r\n    url: '/best-crop-practices/all',\r\n    icon: 'icon-cursor',\r\n    role: 'Admin',\r\n  },\r\n  {\r\n    name: 'Surveys',\r\n    url: '/surveys/all',\r\n    icon: 'icon-cursor',\r\n    role: 'Admin',\r\n  },\r\n  {\r\n    name: 'Chat',\r\n    url: '/chat/all',\r\n    icon: 'icon-cursor',\r\n    role: 'Admin',\r\n  },\r\n  {\r\n    name: 'Advertisement',\r\n    url: '/advertisement/all',\r\n    icon: 'icon-cursor',\r\n    role: 'Admin',\r\n  },\r\n  {\r\n    name: 'Masters',\r\n    url: '/soiltest/enquiries',\r\n    icon: 'icon-cursor',\r\n    role: 'Admin',\r\n    children: [\r\n      {\r\n        name: 'States',\r\n        url: '/masters/States',\r\n      },\r\n      {\r\n        name: 'LGA',\r\n        url: '/masters/LGA',\r\n      },\r\n      {\r\n        name: 'City',\r\n        url: '/masters/Cities',\r\n      },\r\n      {\r\n        name: 'Villages',\r\n        url: '/masters/Villages',\r\n      },\r\n      {\r\n        name: 'Markets',\r\n        url: '/masters/Markets',\r\n      },\r\n      {\r\n        name: 'Crops',\r\n        url: '/masters/Crops',\r\n      },\r\n    ],\r\n  },\r\n];\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  templateUrl: '500.component.html'\r\n})\r\nexport class P500Component {\r\n\r\n  constructor() { }\r\n\r\n}\r\n","export default \"<app-header [navbarBrandRouterLink]=\\\"['/dashboard']\\\" [fixed]=\\\"true\\\"\\r\\n  [navbarBrandFull]=\\\"{src: 'assets/img/brand/logo_new.png',width:200,alt: 'CartIntoCar Logo'}\\\"\\r\\n  [navbarBrandMinimized]=\\\"{src: 'assets/img/brand/logo_new.png', width: 200, alt: 'CartIntoCar Logo'}\\\"\\r\\n  [sidebarToggler]=\\\"'lg'\\\">\\r\\n  <ul class=\\\"nav navbar-nav ml-auto\\\">\\r\\n    {{userName}}\\r\\n    <li class=\\\"nav-item dropdown\\\" dropdown placement=\\\"bottom right\\\">\\r\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"dropdown\\\" href=\\\"#\\\" role=\\\"button\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\"\\r\\n        dropdownToggle (click)=\\\"false\\\">\\r\\n        <img src=\\\"assets/img/avatars/6.png\\\" class=\\\"img-avatar\\\" alt=\\\"admin@bootstrapmaster.com\\\" />\\r\\n      </a>\\r\\n      <div class=\\\"dropdown-menu dropdown-menu-right\\\" *dropdownMenu aria-labelledby=\\\"simple-dropdown\\\">\\r\\n        <div class=\\\"dropdown-header text-center\\\"><strong>Settings</strong></div>\\r\\n        <a class=\\\"dropdown-item\\\"><i class=\\\"fa fa-user\\\"></i>{{userName}}</a>\\r\\n        <div class=\\\"divider\\\"></div>\\r\\n        <a class=\\\"dropdown-item\\\" (click)=\\\"logout()\\\"><i class=\\\"fa fa-lock\\\"></i> Logout</a>\\r\\n      </div>\\r\\n    </li>\\r\\n  </ul>\\r\\n</app-header>\\r\\n<div class=\\\"app-body\\\">\\r\\n  <app-sidebar #appSidebar [fixed]=\\\"true\\\" [display]=\\\"'lg'\\\" [minimized]=\\\"sidebarMinimized\\\"\\r\\n    (minimizedChange)=\\\"toggleMinimize($event)\\\">\\r\\n    <app-sidebar-nav [navItems]=\\\"navItems\\\"></app-sidebar-nav>\\r\\n    <!-- <app-sidebar-minimizer></app-sidebar-minimizer> -->\\r\\n  </app-sidebar>\\r\\n  <!-- Main content -->\\r\\n  <main class=\\\"main\\\">\\r\\n    <cui-breadcrumb>\\r\\n    </cui-breadcrumb>\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n      <router-outlet></router-outlet>\\r\\n    </div>\\r\\n  </main>\\r\\n</div>\\r\\n<app-footer>\\r\\n  <span><a>Indorama Agronomy App</a> &copy; 2022 Untangle_</span>\\r\\n  <!-- <span class=\\\"ml-auto\\\">Powered by <a href=\\\"https://www.upsquad.in\\\">upsquad</a></span> -->\\r\\n</app-footer>\";","export default \"<div class=\\\"app flex-row align-items-center\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row justify-content-center\\\">\\r\\n      <div class=\\\"col-md-6\\\">\\r\\n        <div class=\\\"clearfix\\\">\\r\\n          <h1 class=\\\"float-left display-3 mr-4\\\">404</h1>\\r\\n          <h4 class=\\\"pt-3\\\">Oops! You're lost.</h4>\\r\\n          <p class=\\\"text-muted\\\">The page you are looking for was not found.</p>\\r\\n        </div>\\r\\n        <div class=\\\"input-prepend input-group\\\">\\r\\n          <div class=\\\"input-group-prepend\\\">\\r\\n            <span class=\\\"input-group-text\\\"><i class=\\\"fa fa-search\\\"></i></span>\\r\\n          </div>\\r\\n          <input id=\\\"prependedInput\\\" class=\\\"form-control\\\" size=\\\"16\\\" type=\\\"text\\\" placeholder=\\\"What are you looking for?\\\">\\r\\n          <span class=\\\"input-group-append\\\">\\r\\n            <button class=\\\"btn btn-info\\\" type=\\\"button\\\">Search</button>\\r\\n          </span>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \"<!-- <div class=\\\"app-body bg-image\\\">\\r\\n  <main class=\\\"main d-flex align-items-center\\\" style=\\\"background-color: rgba(0, 0, 0, 0.8);\\\">\\r\\n    <div class=\\\"login-box\\\">\\r\\n      <div class=\\\"card p-4\\\" style=\\\"width: fit-content;\\\">\\r\\n        <div class=\\\"card-body\\\">\\r\\n          <form>\\r\\n            <h1>Login</h1>\\r\\n            <p class=\\\"text-muted\\\">Welcome back! Please log in to your account</p>\\r\\n            <div class=\\\"input-group mb-3\\\">\\r\\n              <div class=\\\"input-group-prepend\\\">\\r\\n                <span class=\\\"input-group-text\\\"><i class=\\\"icon-user\\\"></i></span>\\r\\n              </div>\\r\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Username\\\" autocomplete=\\\"username\\\" required>\\r\\n            </div>\\r\\n            <div class=\\\"input-group mb-4\\\">\\r\\n              <div class=\\\"input-group-prepend\\\">\\r\\n                <span class=\\\"input-group-text\\\"><i class=\\\"icon-lock\\\"></i></span>\\r\\n              </div>\\r\\n              <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\" autocomplete=\\\"current-password\\\"\\r\\n                required>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-6\\\">\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary px-4\\\">Login</button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </form>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </main>\\r\\n</div> -->\\r\\n<!-- <div class=\\\"bg-image\\\"> -->\\r\\n<div class=\\\"d-md-flex h-md-100 align-items-center\\\">\\r\\n  <div class=\\\"col-md-6 p-0 bg-black h-md-100 login-screen\\\">\\r\\n    <div\\r\\n      class=\\\"text-white d-md-flex align-items-center h-100 text-center justify-content-center\\\"\\r\\n    >\\r\\n      <div class=\\\"container-fluid bg-image\\\" style=\\\"height: 100vh\\\"></div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"col-md-6 p-0 bg-white h-md-100\\\">\\r\\n    <div class=\\\"d-md-flex align-items-center h-md-100 justify-content-center\\\">\\r\\n      <div class=\\\"container-fluid fallback-image\\\" style=\\\"height: 100vh\\\">\\r\\n        <form\\r\\n          class=\\\"login-box\\\"\\r\\n          #usForm=\\\"ngForm\\\"\\r\\n          (ngSubmit)=\\\"onSubmit()\\\"\\r\\n          style=\\\"background: #ffffff75; padding: 20px; border-radius: 10px\\\"\\r\\n        >\\r\\n          <img\\r\\n            src=\\\"assets/img/brand/logo_new.png\\\"\\r\\n            width=\\\"300\\\"\\r\\n            style=\\\"margin-bottom: 25px\\\"\\r\\n          />\\r\\n          <h3 class=\\\"mt-3\\\">Admin Panel</h3>\\r\\n          <p class=\\\"text-muted\\\">Welcome back! Please log in to your account</p>\\r\\n          <div class=\\\"input-group mb-3\\\">\\r\\n            <div class=\\\"input-group-prepend\\\">\\r\\n              <span class=\\\"input-group-text\\\"><i class=\\\"icon-user\\\"></i></span>\\r\\n            </div>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              placeholder=\\\"Username\\\"\\r\\n              id=\\\"login\\\"\\r\\n              maxlength=\\\"80\\\"\\r\\n              size=\\\"30\\\"\\r\\n              ngModel\\r\\n              value=\\\"\\\"\\r\\n              name=\\\"identifier\\\"\\r\\n              required\\r\\n            />\\r\\n          </div>\\r\\n          <div class=\\\"input-group mb-4\\\">\\r\\n            <div class=\\\"input-group-prepend\\\">\\r\\n              <span class=\\\"input-group-text\\\"><i class=\\\"icon-lock\\\"></i></span>\\r\\n            </div>\\r\\n            <input\\r\\n              type=\\\"password\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              placeholder=\\\"Password\\\"\\r\\n              id=\\\"password\\\"\\r\\n              size=\\\"30\\\"\\r\\n              ngModel\\r\\n              name=\\\"password\\\"\\r\\n              value=\\\"\\\"\\r\\n              required\\r\\n            />\\r\\n          </div>\\r\\n          <!-- <div class=\\\"row\\\"> -->\\r\\n          <!-- <div class=\\\"col-6\\\"> -->\\r\\n          <button\\r\\n            type=\\\"submit\\\"\\r\\n            class=\\\"btn btn-primary ml-2\\\"\\r\\n            [disabled]=\\\"loading\\\"\\r\\n            style=\\\"background-color: #108d51; color: white\\\"\\r\\n          >\\r\\n            <span\\r\\n              *ngIf=\\\"loading\\\"\\r\\n              class=\\\"spinner-border spinner-border-sm mr-1\\\"\\r\\n              role=\\\"status\\\"\\r\\n              aria-hidden=\\\"true\\\"\\r\\n            >\\r\\n            </span\\r\\n            >Login\\r\\n          </button>\\r\\n          <!-- </div> -->\\r\\n          <!-- </div> -->\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n<!-- </div> -->\\r\\n\";","import { Injectable } from '@angular/core';\r\nimport {\r\n  Router,\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { AuthenticationService } from './authentication.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const currentUser: any = this.authenticationService.currentUserValue;\r\n    if (currentUser) {\r\n      console.log(currentUser, 'authguard', route.data.roles);\r\n      // check if route is restricted by role\r\n      if (\r\n        route.data.roles &&\r\n        route.data.roles.indexOf(currentUser.user.UserType) === -1\r\n      ) {\r\n        // role not authorised so redirect to home page\r\n        this.router.navigate(['/500']);\r\n        console.log('authguard failed');\r\n        return false;\r\n      }\r\n      // authorised so return true\r\n      return true;\r\n    }\r\n    console.log(currentUser, 'authguard il kerilla', route.data.roles);\r\n    // not logged in so redirect to login page with the return url\r\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\r\n    return false;\r\n  }\r\n}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule, {\r\n  useJit: true,\r\n  preserveWhitespaces: true\r\n})\r\n  .catch(err => console.log(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}