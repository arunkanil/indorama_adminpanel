{"version":3,"sources":["webpack:///src/app/views/login/authentication.service.ts","webpack:///src/app/graphql.module.ts","webpack:///src/app/views/error/404.component.ts","webpack:///src/environments/environment.ts","webpack:///src/app/containers/default-layout/index.ts","webpack:///src/app/containers/index.ts","webpack:///src/app/containers/default-layout/default-layout.component.ts","webpack:///src/app/views/error/500.component.html","webpack:///src/app/views/login/login.component.ts","webpack:///src/app/data.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/app.routing.ts","webpack:///src/app/_nav.ts","webpack:///src/app/views/error/500.component.ts","webpack:///src/app/containers/default-layout/default-layout.component.html","webpack:///src/app/views/error/404.component.html","webpack:///src/app/views/login/login.component.html","webpack:///src/app/views/login/auth.guard.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["AuthenticationService","http","toastr","currentUserSubject","JSON","parse","localStorage","getItem","currentUser","asObservable","console","log","value","data","post","apiUrl","pipe","user","jwt","UserType","setItem","username","id","email","Name","ContactNumber","stringify","next","error","removeItem","providedIn","uri","createApollo","httpLink","basic","operation","context","headers","Accept","auth","token","Authorization","link","from","create","cache","GraphQLModule","exports","providers","provide","useFactory","deps","P404Component","template","environment","production","DefaultLayoutComponent","router","authenticationService","sidebarMinimized","userName","navItems","filter","item","role","subscribe","x","e","logout","navigate","selector","LoginComponent","dataservice","route","loginForm","result","loading","currentUserValue","returnUrl","snapshot","queryParams","usForm","login","success","message","FarmDemosQuery","FarmDemoQuery","AddFarmDemoMutation","UpdateFarmDemo","CropsQuery","CropsMutation","UpdateCrops","StatesQuery","StatesMutation","UpdateState","LGAquery","LGAmutation","UpdateLGA","Villagesquery","VillageMutation","UpdateVillage","Areasquery","AreaMutation","UpdateArea","MarketQuery","MarketMutation","UpdateMarket","CropPricesQuery","UpdateCropPriceMutation","CropPriceMutation","RetailerQuery","SoilTestQuery","SingleSoilTestQuery","UpdateSoilTest","UsersQuery","AddSoilTestResult","UpdateSoilTestResult","GetSingleRetailerQuery","updateRetailerProfPic","updateRetailerQuery","getRetailerCategories","createdRetailerProducts","updateRetailerProducts","DeleteStatesMutation","DeleteLGAMutation","DeleteAreaMutation","DeleteVillageMutation","DeleteCropMutation","DeleteMarketMutation","DeleteFarmdemo","DeleteRetailerProduct","DeleteFile","DeleteUser","DeleteBestPractice","DeleteActivity","DeleteMarketplaceProduct","CreateAgronomist","getAgronomist","queryUsersLarge","getIndoramaUpdates","UpdateIndoramaUpdates","CreateIndoramaUpdates","GetMarketplace","GetMarketplaceSingleProduct","CreateMarketplaceProduct","UpdateMarketplaceProduct","UpdateMarketplaceProductImg","GetBestCropPractices","CreateBestCropPractices","GetMarketplaceCategories","GetActivities","GetSingleActivity","CreateActivities","UpdateActivity","getDashboardStats","getCropPricesDashboard","getFarmDemoStatsDashboard","getallChats","getChatMessages","getSurveys","CreateSurveys","getSurveyResults","deleteSurvey","getDashboardAd","getRetailerAd","updateDashboardAd","updateRetailerAd","getSmsCampaigns","createSMSCampaign","DataService","apollo","baseURL","params","URLSearchParams","errorMessage","status","Message","httpOptions1","observe","api_token","message_id","get","handleError","fromDate","toDate","watchQuery","query","fetchPolicy","variables","state","market","limit","start","key","isAskIndorama","undefined","page","pageSize","mutate","mutation","lga","area","village","isAllFarmers","SurveyTitle","SurveyDescription","Fields","errorPolicy","PublicationState","publishedAt","Rejected","publicationState","confirmed","blocked","farmdemo","farmer","Farmer","latitude","parseFloat","FarmLocationLatitude","longitude","FarmLocationLongitude","crop","Crops","AreaOfField","farmerPractise","ComponentFarmDemoFarmDemoPractiseInput","indoramaPractise","dateOfHarvesting","season","Season","Status","isPesticidesUsed","images","PostalCode","image","price","Price","unit","Unit","parseInt","published","Date","imageid","Title","Body","Images","Image","media","content","cropImage","itemName","userId","contactNumber","String","availableQty","category","description","FarmerName","Latitude","Longitude","NoOfAttendees","ConditionOfCrop","PlannedFarmDay","Reason","ActivityType","Time","isActive","isDelete","pageNumber","categoryFilter","cropFilter","areas","soilTestSampleID","soil_test_sample","zinc","ZincObserved","boron","BoronObserved","iron","IronObserved","calcium","CalciumObserved","Carbon","OrganicCarbonObserved","phosphorous","PhosphorousObserved","magnesium","MagnesiumObserved","ph","phObserved","copper","CopperObserved","Nitrogen","TotalNitrogenObserved","manganese","ManganeseObserved","pottassium","PotassiumObserved","sulphur","SulphurObserved","RecommendedNPKQty","RecommendedUreaQty","Imageid","test","soilTestId","preferredCollectionDate","PreferredCollectionDate","reason","ReasonForSoilTest","farmerID","areaID","lgaID","soilTestDisplayID","nutrient","Yield","Yield_F","DateOfSowing","DateOfSowing_F","DateOfDemonstration","DateOfDemonstration_F","FirstUreaApplication","FirstUreaApplication_F","SecondUreaApplication","SecondUreaApplication_F","Yield_I","DateOfSowing_I","DateOfDemonstration_I","FirstUreaApplication_I","SecondUreaApplication_I","DateOfHarvesting","categories","retailer_categories","name","password","bio","Bio","agronomist_lgas","prof_pic","retailer_category","retailer","ItemName","isApproved","retailers","productId","file","formData","FormData","i","length","append","url","imageId","AppComponent","iconSet","icons","events","evt","window","scrollTo","AppModule","imports","withComponents","forRoot","declarations","useClass","bootstrap","routes","path","redirectTo","pathMatch","component","title","canActivate","children","loadChildren","then","m","SMSCampaignsModule","FarmDemoModule","ChatModule","ActivitiesModule","SurveysModule","MarketplaceModule","BestCropPracticesModule","IndoramaUpdatesModule","SoilTestModule","CropPricesModule","DashboardModule","AdvertisementModule","RetailersModule","UsersModule","MastersModule","AppRoutingModule","relativeLinkResolution","icon","P500Component","AuthGuard","roles","indexOf","bootstrapModule","useJit","preserveWhitespaces","err","webpackEmptyAsyncContext","req","Promise","resolve","Error","code","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\nimport { environment } from \"../../../environments/environment\";\nimport { User } from \"../../models/user\";\nimport { ToastrService } from \"ngx-toastr\";\n\n@Injectable({ providedIn: \"root\" })\nexport class AuthenticationService {\n  private currentUserSubject: BehaviorSubject<User>;\n  public currentUser: Observable<User>;\n\n  constructor(private http: HttpClient, private toastr: ToastrService) {\n    this.currentUserSubject = new BehaviorSubject<User>(\n      JSON.parse(localStorage.getItem(\"currentUser\"))\n    );\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue(): User {\n    console.log(\"curentuser\", this.currentUserSubject);\n    return this.currentUserSubject.value;\n  }\n\n  login(data) {\n    return this.http\n      .post<any>(`${environment.apiUrl}/api/auth/local/`, data)\n      .pipe(\n        map((user) => {\n          // login successful if there's a jwt token in the response\n          console.log(user);\n          if (user.jwt && user.user.UserType == \"Admin\") {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            localStorage.setItem(\"token\", user.jwt);\n            localStorage.setItem(\"username\", user.user.username);\n            localStorage.setItem(\"uid\", user.user.id);\n            localStorage.setItem(\"user_type\", user.user.UserType);\n            localStorage.setItem(\"email\", user.user.email);\n            localStorage.setItem(\"name\", user.user.Name);\n            localStorage.setItem(\"phone_number\", user.user.ContactNumber);\n            localStorage.setItem(\"currentUser\", JSON.stringify(user));\n            this.currentUserSubject.next(user);\n          } else {\n            this.toastr.error(\"You're not authorized\");\n          }\n          return user;\n        })\n      );\n  }\n\n  logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem(\"currentUser\");\n    localStorage.removeItem(\"token\");\n    this.currentUserSubject.next(null);\n  }\n}\n","// import { NgModule } from \"@angular/core\";\n// import { APOLLO_OPTIONS, APOLLO_NAMED_OPTIONS } from \"apollo-angular\";\n// import {\n//   ApolloClientOptions,\n//   ApolloLink,\n//   InMemoryCache,\n// } from \"@apollo/client/core\";\n// import { setContext } from \"@apollo/client/link/context\";\n// import { HttpLink } from \"apollo-angular/http\";\n// import { environment } from \"../environments/environment\";\n\n// const uri = `${environment.apiUrl}/graphql`;\n\n// export function createApollo(httpLink: HttpLink): ApolloClientOptions<any> {\n//   const basic = setContext((operation, context) => ({\n//     headers: {\n//       Accept: \"charset=utf-8\",\n//     },\n//   }));\n//   // Get the authentication token from local storage if it exists\n//   const token = localStorage.getItem(\"token\");\n//   const auth = setContext((operation, context) => ({\n//     headers: {\n//       Authorization: `Bearer ${token}`,\n//     },\n//   }));\n\n//   return {\n//     link: ApolloLink.from([basic, auth, httpLink.create({ uri })]),\n//     cache: new InMemoryCache(),\n//   };\n// }\n\n// export function createNamedApollo(\n//   httpLink: HttpLink\n// ): Record<string, ApolloClientOptions<any>> {\n//   const basic = setContext((operation, context) => ({\n//     headers: {\n//       Accept: \"charset=utf-8\",\n//     },\n//   }));\n//   return {\n//     second: {\n//       name: \"second\",\n//       link: ApolloLink.from([ basic, httpLink.create({ uri }) ]),\n//       cache: new InMemoryCache(),\n//     },\n//   };\n// }\n\n// @NgModule({\n//   providers: [\n//     {\n//       provide: APOLLO_OPTIONS,\n//       useFactory: createApollo,\n//       deps: [HttpLink],\n//     },\n//     {\n//       provide: APOLLO_NAMED_OPTIONS,\n//       deps: [HttpLink],\n//       useFactory: createNamedApollo,\n//     },\n//   ],\n// })\n// export class GraphQLModule {}\n\n\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { Apollo, APOLLO_OPTIONS } from 'apollo-angular';\nimport { HttpLink } from 'apollo-angular/http';\nimport { InMemoryCache,ApolloLink } from '@apollo/client/core';\nimport { setContext } from '@apollo/client/link/context';\nimport { environment } from '../environments/environment';\n\nconst uri = `${environment.apiUrl}/graphql`;\n\nexport function createApollo(httpLink: HttpLink) {\n  const basic = setContext((operation, context) => ({\n    headers: {\n      Accept: 'charset=utf-8'\n    }\n  }));\n\n  const auth = setContext((operation, context) => {\n    const token = localStorage.getItem('token');\n\n    if (token === null) {\n      return {};\n    } else {\n      return {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n    }\n  });\n\n  const link = ApolloLink.from([basic, auth, httpLink.create({ uri })]);\n  const cache = new InMemoryCache();\n\n  return {\n    link,\n    cache\n  }\n}\n\n@NgModule({\n  exports: [\n    HttpClientModule,\n    // ApolloModule,\n  ],\n  providers: [{\n    provide: APOLLO_OPTIONS,\n    useFactory: createApollo,\n    deps: [HttpLink]\n  }]\n})\nexport class GraphQLModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  templateUrl: '404.component.html'\n})\nexport class P404Component {\n\n  constructor() { }\n\n}\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: \"https://indoramaapp.untanglestrategy.com\"\n};\n","export * from './default-layout.component';\n","export * from './default-layout';\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { User } from \"../../models/user\";\nimport { AuthenticationService } from \"../../views/login/authentication.service\";\nimport { navItems } from \"../../_nav\";\n\n@Component({\n  selector: \"app-dashboard\",\n  templateUrl: \"./default-layout.component.html\",\n})\nexport class DefaultLayoutComponent {\n  currentUser: User;\n  public sidebarMinimized = false;\n  userName = localStorage.getItem(\"username\");\n  constructor(\n    private router: Router,\n    private authenticationService: AuthenticationService\n  ) {\n    this.authenticationService.currentUser.subscribe(\n      (x) => (this.currentUser = x)\n    );\n    // console.log(\"constructor\",this.currentUser.user.UserType)\n  }\n  public navItems = navItems.filter((item) => item.role === localStorage.getItem(\"user_type\") || item.role === \"\");;\n\n  toggleMinimize(e) {\n    this.sidebarMinimized = e;\n    console.log(this.currentUser.user?.UserType);\n  }\n  logout() {\n    this.authenticationService.logout();\n    this.router.navigate([\"/login\"]);\n  }\n}\n","export default \"<div class=\\\"app flex-row align-items-center\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row justify-content-center\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"clearfix\\\">\\n          <h1 class=\\\"float-left display-3 mr-4\\\">500</h1>\\n          <h4 class=\\\"pt-3\\\">Houston, we have a problem!</h4>\\n          <p class=\\\"text-muted\\\">The page you are looking for is temporarily unavailable.</p>\\n        </div>\\n        <div class=\\\"input-prepend input-group\\\">\\n          <div class=\\\"input-group-prepend\\\">\\n            <span class=\\\"input-group-text\\\"><i class=\\\"fa fa-search\\\"></i></span>\\n          </div>\\n          <input id=\\\"prependedInput\\\" class=\\\"form-control\\\" size=\\\"16\\\" type=\\\"text\\\" placeholder=\\\"What are you looking for?\\\">\\n          <span class=\\\"input-group-append\\\">\\n            <button class=\\\"btn btn-info\\\" type=\\\"button\\\">Search</button>\\n          </span>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\";","import { Component, ViewChild } from \"@angular/core\";\nimport { NgForm } from \"@angular/forms\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { first } from \"rxjs/operators\";\nimport { DataService } from \"../../data.service\";\nimport { AuthenticationService } from \"./authentication.service\";\n\n@Component({\n  selector: \"app-dashboard\",\n  templateUrl: \"login.component.html\",\n})\nexport class LoginComponent {\n  @ViewChild(\"usForm\") usForm: NgForm;\n\n  loginForm: any = {};\n  result: any = {};\n  returnUrl: string;\n  error = \"\";\n  loading = false;\n\n  constructor(\n    public dataservice: DataService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authenticationService: AuthenticationService,\n    private toastr: ToastrService\n  ) {\n    if (this.authenticationService.currentUserValue) {\n      this.router.navigate([\"/\"]);\n    }\n  }\n\n  ngOnInit(): void {\n    this.returnUrl = this.route.snapshot.queryParams[\"returnUrl\"] || \"/\";\n  }\n  onSubmit() {\n    this.loading = true;\n    this.loginForm = this.usForm.value;\n    console.log(this.loginForm);\n    this.loading = true;\n    this.router.navigate([\"/dashboard\"]);\n    // this.toastr.success(\"Login successful\");\n    this.authenticationService\n      .login(this.loginForm)\n      .pipe(first())\n      .subscribe(\n        (data) => {\n          this.loading = false;\n          this.router.navigate([this.returnUrl]);\n          this.toastr.success(\"Login successful\");\n        },\n        (error) => {\n          this.error = error;\n          this.loading = false;\n          console.log(error);\n          this.toastr.error(error.error.error.message);\n        }\n      );\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport {\n  HttpClient,\n  HttpErrorResponse,\n  HttpHeaders,\n} from \"@angular/common/http\";\nimport { Observable, throwError } from \"rxjs\";\nimport { environment } from \"../environments/environment\";\nimport { Apollo, gql } from \"apollo-angular\";\nimport { catchError } from \"rxjs/operators\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { idText } from \"typescript\";\n\nconst FarmDemosQuery = gql`\n  query ($page: Int, $pageSize: Int) {\n    farmDemos(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Farmer\n          FarmLocationLatitude\n          FarmLocationLongitude\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          AreaOfField\n          isPesticidesUsed\n          FarmerPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          IndoramaPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          Images {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          DateOfHarvesting\n          Season\n          Status\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst FarmDemoQuery = gql`\n  query ($id: ID) {\n    farmDemo(id: $id) {\n      data {\n        id\n        attributes {\n          Farmer\n          FarmLocationLatitude\n          FarmLocationLongitude\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          AreaOfField\n          isPesticidesUsed\n          DateOfHarvesting\n          Season\n          FarmerPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          IndoramaPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          Status\n          Images {\n            data {\n              id\n              attributes {\n                name\n                previewUrl\n                url\n              }\n            }\n          }\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst AddFarmDemoMutation = gql`\n  mutation (\n    $farmer: String\n    $latitude: Float\n    $longitude: Float\n    $lga: ID\n    $state: ID\n    $crop: ID\n    $area: String\n    $farmerPractise: ComponentFarmDemoFarmDemoPractiseInput\n    $indoramaPractise: ComponentFarmDemoFarmDemoPractiseInput\n    $dateOfHarvesting: Date\n    $season: String\n    $Status: ENUM_FARMDEMO_STATUS\n    $isPesticidesUsed: Boolean\n    $images: [ID]\n  ) {\n    createFarmDemo(\n      data: {\n        Farmer: $farmer\n        FarmLocationLatitude: $latitude\n        FarmLocationLongitude: $longitude\n        lgas: $lga\n        state: $state\n        crop: $crop\n        Status: $Status\n        AreaOfField: $area\n        FarmerPractise: $farmerPractise\n        IndoramaPractise: $indoramaPractise\n        isPesticidesUsed: $isPesticidesUsed\n        DateOfHarvesting: $dateOfHarvesting\n        Season: $season\n        Images: $images\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Farmer\n          FarmLocationLatitude\n          FarmLocationLongitude\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Status\n          AreaOfField\n          isPesticidesUsed\n          FarmerPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          IndoramaPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          Images {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          DateOfHarvesting\n          Season\n        }\n      }\n    }\n  }\n`;\nconst UpdateFarmDemo = gql`\n  mutation (\n    $id: ID!\n    $farmer: String\n    $latitude: Float\n    $longitude: Float\n    $lga: ID\n    $crop: ID\n    $area: String\n    $farmerPractise: ComponentFarmDemoFarmDemoPractiseInput\n    $indoramaPractise: ComponentFarmDemoFarmDemoPractiseInput\n    $dateOfHarvesting: Date\n    $season: String\n    $isPesticidesUsed: Boolean\n    $images: [ID]\n    $Status: ENUM_FARMDEMO_STATUS\n    $state: ID\n  ) {\n    updateFarmDemo(\n      id: $id\n      data: {\n        Farmer: $farmer\n        FarmLocationLatitude: $latitude\n        FarmLocationLongitude: $longitude\n        lgas: $lga\n        crop: $crop\n        Status: $Status\n        state: $state\n        AreaOfField: $area\n        FarmerPractise: $farmerPractise\n        IndoramaPractise: $indoramaPractise\n        isPesticidesUsed: $isPesticidesUsed\n        DateOfHarvesting: $dateOfHarvesting\n        Season: $season\n        Images: $images\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Farmer\n          FarmLocationLatitude\n          FarmLocationLongitude\n          Status\n          Season\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          AreaOfField\n          isPesticidesUsed\n          FarmerPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          IndoramaPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          Images {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          DateOfHarvesting\n          Season\n        }\n      }\n    }\n  }\n`;\nconst CropsQuery = gql`\n  query {\n    crops(pagination: { limit: 10000 }, sort: \"createdAt:desc\", filters:{isDelete:{eq:false}}) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst CropsMutation = gql`\n  mutation ($Name: String, $image: ID) {\n    createCrop(data: { Name: $Name, Image: $image }) {\n      data {\n        id\n        attributes {\n          Name\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateCrops = gql`\n  mutation ($Name: String, $id: ID!, $isDelete: Boolean, $image: ID) {\n    updateCrop(\n      id: $id\n      data: { Name: $Name, Image: $image, isDelete: $isDelete }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          isDelete\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst StatesQuery = gql`\n  query {\n    states(pagination: { limit: 10000 }, sort: \"createdAt:desc\", filters:{isDelete:{eq:false}}) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          markets {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst StatesMutation = gql`\n  mutation ($Name: String) {\n    createState(data: { Name: $Name }) {\n      data {\n        id\n        attributes {\n          Name\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          markets {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateState = gql`\n  mutation ($Name: String, $id: ID!, $isDelete: Boolean) {\n    updateState(id: $id, data: { Name: $Name, isDelete: $isDelete }) {\n      data {\n        id\n        attributes {\n          Name\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          markets {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          isDelete\n        }\n      }\n    }\n  }\n`;\nconst LGAquery = gql`\n  query ($id: ID) {\n    lgas(\n      pagination: { limit: 10000 }\n      sort: \"createdAt:desc\"\n      filters: { state: { id: { eq: $id } }, isDelete:{eq:false} }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          areas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst LGAmutation = gql`\n  mutation ($Name: String, $state: ID) {\n    createLga(data: { Name: $Name, state: $state }) {\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          areas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst UpdateLGA = gql`\n  mutation ($Name: String, $state: ID, $id: ID!, $isDelete: Boolean) {\n    updateLga(\n      id: $id\n      data: { Name: $Name, isDelete: $isDelete, state: $state }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          areas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst Villagesquery = gql`\n  query ($id: ID) {\n    villages(\n      pagination: { limit: 10000 }\n      sort: \"createdAt:desc\"\n      filters: { area: { lga: { id: { eq: $id } } }, isDelete:{eq:false} }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          area {\n            data {\n              id\n              attributes {\n                Name\n                PostalCode\n                lga {\n                  data {\n                    id\n                    attributes {\n                      Name\n                      state {\n                        data {\n                          id\n                          attributes {\n                            Name\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          localizations {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n        __typename\n      }\n    }\n  }\n`;\nconst VillageMutation = gql`\n  mutation ($Name: String, $area: ID) {\n    createVillage(data: { Name: $Name, area: $area }) {\n      data {\n        id\n        attributes {\n          Name\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst UpdateVillage = gql`\n  mutation ($Name: String, $area: ID, $id: ID!, $isDelete: Boolean) {\n    updateVillage(\n      id: $id\n      data: { Name: $Name, area: $area, isDelete: $isDelete }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          isDelete\n        }\n      }\n    }\n  }\n`;\nconst Areasquery = gql`\n  query ($id: ID) {\n    areas(\n      pagination: { limit: 10000 }\n      sort: \"createdAt:desc\"\n      filters: { lga: { id: { eq: $id } }, isDelete:{eq:false} }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          PostalCode\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          villages {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst AreaMutation = gql`\n  mutation ($Name: String, $PostalCode: Long, $lga: ID) {\n    createArea(data: { Name: $Name, PostalCode: $PostalCode, lga: $lga }) {\n      data {\n        id\n        attributes {\n          Name\n          PostalCode\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          villages {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst UpdateArea = gql`\n  mutation (\n    $Name: String\n    $lga: ID\n    $PostalCode: Long\n    $id: ID!\n    $isDelete: Boolean\n  ) {\n    updateArea(\n      id: $id\n      data: {\n        Name: $Name\n        PostalCode: $PostalCode\n        lga: $lga\n        isDelete: $isDelete\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          PostalCode\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          villages {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst MarketQuery = gql`\n  query ($id: ID) {\n    markets(\n      pagination: { limit: 10000 }\n      sort: \"createdAt:desc\"\n      filters: { state: { id: { eq: $id } }, isDelete:{eq:false} }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst MarketMutation = gql`\n  mutation ($Name: String, $state: ID) {\n    createMarket(data: { Name: $Name, state: $state }) {\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst UpdateMarket = gql`\n  mutation ($Name: String, $state: ID, $id: ID!, $isDelete: Boolean) {\n    updateMarket(\n      id: $id\n      data: { Name: $Name, isDelete: $isDelete, state: $state }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst CropPricesQuery = gql`\n  query (\n    $page: Int\n    $pageSize: Int\n    $publicationState: PublicationState\n    $publishedAt: DateTime\n    $Rejected: Boolean\n  ) {\n    cropPrices(\n      publicationState: $publicationState\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: {\n        and: [\n          { publishedAt: { eq: $publishedAt } }\n          { Rejected: { eq: $Rejected } }\n        ]\n      }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Price\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Unit\n          Rejected\n          market {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Image {\n            data {\n              id\n              attributes {\n                name\n                alternativeText\n                caption\n                width\n                height\n                url\n                previewUrl\n              }\n            }\n          }\n          user {\n            data {\n              id\n              attributes {\n                Name\n                UserType\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          publishedAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateCropPriceMutation = gql`\n  mutation updateCropPrice(\n    $id: ID!\n    $crop: ID\n    $price: Float\n    $state: ID\n    $unit: String\n    $market: ID\n    $image: ID\n    $Rejected: Boolean\n    $published: DateTime\n  ) {\n    updateCropPrice(\n      id: $id\n      data: {\n        crop: $crop\n        Price: $price\n        state: $state\n        Unit: $unit\n        market: $market\n        Image: $image\n        Rejected: $Rejected\n        publishedAt: $published\n      }\n    ) {\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Price\n          Unit\n          state {\n            data {\n              attributes {\n                Name\n              }\n            }\n          }\n          market {\n            data {\n              attributes {\n                Name\n              }\n            }\n          }\n          Rejected\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst CropPriceMutation = gql`\n  mutation addCropPrice(\n    $crop: ID\n    $price: Float\n    $state: ID\n    $unit: String\n    $market: ID\n    $image: ID\n    $published: DateTime\n    $user: ID\n  ) {\n    createCropPrice(\n      data: {\n        crop: $crop\n        Price: $price\n        state: $state\n        Unit: $unit\n        Rejected: false\n        market: $market\n        Image: $image\n        publishedAt: $published\n        user: $user\n      }\n    ) {\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Price\n          Unit\n          state {\n            data {\n              attributes {\n                Name\n              }\n            }\n          }\n          market {\n            data {\n              attributes {\n                Name\n              }\n            }\n          }\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst RetailerQuery = gql`\n  query ($page: Int, $pageSize: Int, $confirmed: Boolean, $blocked: Boolean) {\n    usersPermissionsUsers(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: {\n        UserType: { eq: \"Retailer\" }\n        confirmed: { eq: $confirmed }\n        blocked: { eq: $blocked }\n      }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          username\n          Name\n          email\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          retailer_products {\n            data {\n              attributes {\n                ItemName\n                Price\n                Unit\n                Images {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          UserType\n          retailer_categories {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          Bio\n          Latitude\n          Longitude\n          blocked\n          confirmed\n          UserType\n          prof_pic {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          ContactNumber\n        }\n      }\n    }\n  }\n`;\nconst SoilTestQuery = gql`\n  query ($page: Int, $pageSize: Int) {\n    soilTests(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          SoilTestID\n          Status\n          ReasonForSoilTest\n          ContactNumber\n          nutrient\n          Farmer {\n            data {\n              attributes {\n                username\n                email\n\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          area {\n            data {\n              attributes {\n                Name\n                PostalCode\n              }\n            }\n          }\n          soil_test_samples {\n            data {\n              attributes {\n                SampleID\n              }\n            }\n          }\n          PreferredCollectionDate\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst SingleSoilTestQuery = gql`\n  query ($id: ID) {\n    soilTest(id: $id) {\n      data {\n        id\n        attributes {\n          SoilTestID\n          Status\n          ReasonForSoilTest\n          ContactNumber\n          nutrient\n          Farmer {\n            data {\n              id\n              attributes {\n                username\n                email\n\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          area {\n            data {\n              id\n              attributes {\n                Name\n                PostalCode\n              }\n            }\n          }\n          soil_test_samples {\n            data {\n              id\n              attributes {\n                SampleID\n                QuantityOfSamples\n                createdAt\n                updatedAt\n                SampleAddedBy {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n                soil_test_results {\n                  data {\n                    id\n                    attributes {\n                      soil_test_sample {\n                        data {\n                          id\n                          attributes {\n                            SampleID\n                          }\n                        }\n                      }\n                      phObserved\n                      OrganicCarbonObserved\n                      TotalNitrogenObserved\n                      PhosphorousObserved\n                      PotassiumObserved\n                      CalciumObserved\n                      MagnesiumObserved\n                      ZincObserved\n                      SulphurObserved\n                      IronObserved\n                      CopperObserved\n                      BoronObserved\n                      ManganeseObserved\n                      RecommendedNPKQty\n                      RecommendedUreaQty\n                      updatedAt\n                    }\n                  }\n                }\n              }\n            }\n          }\n          PreferredCollectionDate\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateSoilTest = gql`\n  mutation updateSoilTest(\n    $soilTestId: ID!\n    $contactNumber: String\n    $preferredCollectionDate: DateTime\n    $reason: String\n    $farmerID: ID\n    $areaID: ID\n    $lgaID: ID\n    $soilTestDisplayID: String\n    $status: ENUM_SOILTEST_STATUS\n    $nutrient: String\n  ) {\n    updateSoilTest(\n      id: $soilTestId\n      data: {\n        ContactNumber: $contactNumber\n        PreferredCollectionDate: $preferredCollectionDate\n        ReasonForSoilTest: $reason\n        Farmer: $farmerID\n        area: $areaID\n        lga: $lgaID\n        SoilTestID: $soilTestDisplayID\n        Status: $status\n        nutrient: $nutrient\n      }\n    ) {\n      data {\n        id\n        attributes {\n          ContactNumber\n          PreferredCollectionDate\n          ReasonForSoilTest\n          Farmer {\n            data {\n              id\n              attributes {\n                username\n                Name\n              }\n            }\n          }\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          SoilTestID\n          Status\n          nutrient\n        }\n      }\n    }\n  }\n`;\nconst UsersQuery = gql`\n  query ($UserType: String, $page: Int, $pageSize: Int) {\n    usersPermissionsUsers(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: { UserType: { eq: $UserType } }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          username\n          Name\n          email\n          blocked\n          confirmed\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          retailer_categories {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          retailer_products {\n            data {\n              attributes {\n                ItemName\n                Price\n                Unit\n                Images {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          UserType\n          Bio\n          Latitude\n          Longitude\n          UserType\n          prof_pic {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          ContactNumber\n        }\n      }\n    }\n  }\n`;\nconst AddSoilTestResult = gql`\n  mutation soilTestAddResult(\n    $soilTestSampleID: ID\n    $ph: String\n    $Carbon: String\n    $Nitrogen: String\n    $phosphorous: String\n    $pottassium: String\n    $calcium: String\n    $magnesium: String\n    $zinc: String\n    $sulphur: String\n    $iron: String\n    $copper: String\n    $boron: String\n    $manganese: String\n    $RecommendedNPKQty: String\n    $RecommendedUreaQty: String\n  ) {\n    createSoilTestResult(\n      data: {\n        soil_test_sample: $soilTestSampleID\n        phObserved: $ph\n        OrganicCarbonObserved: $Carbon\n        TotalNitrogenObserved: $Nitrogen\n        PhosphorousObserved: $phosphorous\n        PotassiumObserved: $pottassium\n        CalciumObserved: $calcium\n        MagnesiumObserved: $magnesium\n        ZincObserved: $zinc\n        SulphurObserved: $sulphur\n        IronObserved: $iron\n        CopperObserved: $copper\n        BoronObserved: $boron\n        ManganeseObserved: $manganese\n        RecommendedNPKQty: $RecommendedNPKQty,\n        RecommendedUreaQty: $RecommendedUreaQty,\n      }\n    ) {\n      data {\n        attributes {\n          soil_test_sample {\n            data {\n              id\n              attributes {\n                SampleID\n              }\n            }\n          }\n          phObserved\n          OrganicCarbonObserved\n          TotalNitrogenObserved\n          PhosphorousObserved\n          PotassiumObserved\n          CalciumObserved\n          MagnesiumObserved\n          ZincObserved\n          SulphurObserved\n          CopperObserved\n          IronObserved\n          BoronObserved\n          ManganeseObserved\n        }\n      }\n    }\n  }\n`;\nconst UpdateSoilTestResult = gql`\n  mutation soilTestAddResult(\n    $id: ID!\n    $soilTestSampleID: ID\n    $ph: String\n    $Carbon: String\n    $Nitrogen: String\n    $phosphorous: String\n    $pottassium: String\n    $calcium: String\n    $magnesium: String\n    $zinc: String\n    $sulphur: String\n    $iron: String\n    $copper: String\n    $boron: String\n    $manganese: String\n    $RecommendedNPKQty: String\n    $RecommendedUreaQty: String\n  ) {\n    updateSoilTestResult(\n      id: $id\n      data: {\n        soil_test_sample: $soilTestSampleID\n        phObserved: $ph\n        OrganicCarbonObserved: $Carbon\n        TotalNitrogenObserved: $Nitrogen\n        PhosphorousObserved: $phosphorous\n        PotassiumObserved: $pottassium\n        CalciumObserved: $calcium\n        MagnesiumObserved: $magnesium\n        ZincObserved: $zinc\n        SulphurObserved: $sulphur\n        IronObserved: $iron\n        CopperObserved: $copper\n        BoronObserved: $boron\n        ManganeseObserved: $manganese\n        RecommendedNPKQty: $RecommendedNPKQty,\n        RecommendedUreaQty: $RecommendedUreaQty,\n      }\n    ) {\n      data {\n        attributes {\n          soil_test_sample {\n            data {\n              id\n              attributes {\n                SampleID\n              }\n            }\n          }\n          phObserved\n          OrganicCarbonObserved\n          TotalNitrogenObserved\n          PhosphorousObserved\n          PotassiumObserved\n          CalciumObserved\n          MagnesiumObserved\n          ZincObserved\n          SulphurObserved\n          CopperObserved\n          IronObserved\n          BoronObserved\n          ManganeseObserved\n        }\n      }\n    }\n  }\n`;\nconst GetSingleRetailerQuery = gql`\n  query ($id: ID) {\n    usersPermissionsUsers(filters: { id: { eq: $id } }) {\n      data {\n        id\n        attributes {\n          username\n          Name\n          blocked\n          confirmed\n          email\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          retailer_categories {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          retailer_products {\n            data {\n              id\n              attributes {\n                ItemName\n                Price\n                Unit\n                Images {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          agronomist_lgas {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                      lgas {\n                        data {\n                          id\n                          attributes {\n                            Name\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          UserType\n          Bio\n          Latitude\n          Longitude\n          UserType\n          prof_pic {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          blocked\n          ContactNumber\n        }\n      }\n    }\n  }\n`;\nconst updateRetailerProfPic = gql`\n  mutation editRetailer($id: ID!, $prof_pic: ID) {\n    updateUsersPermissionsUser(id: $id, data: { prof_pic: $prof_pic }) {\n      data {\n        id\n        attributes {\n          username\n          Name\n          email\n          prof_pic {\n            data {\n              id\n              attributes {\n                name\n                url\n              }\n            }\n          }\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          retailer_categories {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          retailer_products {\n            data {\n              attributes {\n                ItemName\n                Price\n                Unit\n                Images {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          UserType\n          Bio\n          Latitude\n          Longitude\n          UserType\n          prof_pic {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          ContactNumber\n        }\n      }\n    }\n  }\n`;\nconst updateRetailerQuery = gql`\n  mutation editRetailer(\n    $id: ID!\n    $name: String\n    $village: ID\n    $lga: ID\n    $UserType: ENUM_USERSPERMISSIONSUSER_USERTYPE\n    $categories: [ID]\n    $bio: String\n    $latitude: Float\n    $longitude: Float\n    $profpic: ID\n    $password: String\n    $blocked: Boolean\n    $confirmed: Boolean\n    $contactNumber: String\n    $agronomist_lgas: [ID]\n  ) {\n    updateUsersPermissionsUser(\n      id: $id\n      data: {\n        Name: $name\n        village: $village\n        lga: $lga\n        UserType: $UserType\n        retailer_categories: $categories\n        Bio: $bio\n        blocked: $blocked\n        password: $password\n        confirmed: $confirmed\n        Latitude: $latitude\n        Longitude: $longitude\n        prof_pic: $profpic\n        ContactNumber: $contactNumber\n        agronomist_lgas: $agronomist_lgas\n      }\n    ) {\n      data {\n        id\n        attributes {\n          username\n          Name\n          email\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          retailer_categories {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          retailer_products {\n            data {\n              attributes {\n                ItemName\n                Price\n                Unit\n                Images {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          agronomist_lgas {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          UserType\n          Bio\n          Latitude\n          Longitude\n          UserType\n          prof_pic {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          ContactNumber\n          confirmed\n          blocked\n        }\n      }\n    }\n  }\n`;\nconst getRetailerCategories = gql`\n  query {\n    retailerCategories {\n      data {\n        id\n        attributes {\n          CategoryName\n          createdAt\n          CategoryImage {\n            data {\n              id\n              attributes {\n                name\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst createdRetailerProducts = gql`\n  mutation (\n    $ItemName: String\n    $Price: Int\n    $Unit: String\n    $Images: [ID]\n    $retailer_category: ID\n    $retailers: [ID]\n  ) {\n    createRetailerProduct(\n      data: {\n        ItemName: $ItemName\n        Price: $Price\n        Unit: $Unit\n        Images: $Images\n        retailer_category: $retailer_category\n        retailers: $retailers\n      }\n    ) {\n      data {\n        id\n        attributes {\n          ItemName\n          Unit\n          Price\n          Images {\n            data {\n              id\n            }\n          }\n          retailer_category {\n            data {\n              id\n            }\n          }\n          retailers {\n            data {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst updateRetailerProducts = gql`\n  mutation editRetailerProduct(\n    $productId: ID!\n    $itemName: String\n    $price: Int\n    $unit: String\n    $images: [ID]\n    $isApproved: Boolean\n    $retailer: [ID]\n    $retailer_category: ID\n  ) {\n    updateRetailerProduct(\n      id: $productId\n      data: {\n        ItemName: $itemName\n        Price: $price\n        Unit: $unit\n        Images: $images\n        isApproved: $isApproved\n        retailers: $retailer\n        retailer_category: $retailer_category\n      }\n    ) {\n      data {\n        attributes {\n          ItemName\n          Price\n          Unit\n          retailers {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          retailer_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          isApproved\n        }\n      }\n    }\n  }\n`;\nconst DeleteStatesMutation = gql`\n  mutation ($id: ID!) {\n    updateState(id: $id, data:{isDelete:true}) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteLGAMutation = gql`\n  mutation ($id: ID!) {\n    updateLga(id: $id, data:{isDelete:true}) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteAreaMutation = gql`\n  mutation ($id: ID!) {\n    updateArea(id: $id, data:{isDelete:true}) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteVillageMutation = gql`\n  mutation ($id: ID!) {\n    updateVillage(id: $id, data:{isDelete:true}) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteCropMutation = gql`\n  mutation ($id: ID!) {\n    updateCrop(id: $id, data:{isDelete:true}) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteMarketMutation = gql`\n  mutation ($id: ID!) {\n    updateMarket(id: $id, data:{isDelete:true}) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteFarmdemo = gql`\n  mutation ($id: ID!) {\n    deleteFarmDemo(id: $id) {\n      data {\n        attributes {\n          Farmer\n          DateOfHarvesting\n        }\n      }\n    }\n  }\n`;\nconst DeleteRetailerProduct = gql`\n  mutation ($id: ID!) {\n    deleteRetailerProduct(id: $id) {\n      data {\n        attributes {\n          ItemName\n          Price\n        }\n      }\n    }\n  }\n`;\nconst DeleteFile = gql`\n  mutation ($id: ID!) {\n    deleteUploadFile(id: $id) {\n      data {\n        id\n      }\n    }\n  }\n`;\nconst DeleteUser = gql`\n  mutation ($id: ID!) {\n    deleteUsersPermissionsUser(id: $id) {\n      data {\n        id\n        attributes {\n          username\n        }\n      }\n    }\n  }\n`;\nconst DeleteBestPractice = gql`\n  mutation ($id: ID!) {\n    deleteBestCropPractise(id: $id) {\n      data {\n        attributes {\n          content\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst DeleteActivity = gql`\n  mutation ($id: ID!) {\n    deleteActivity(id: $id) {\n      data {\n        attributes {\n          FarmerName\n          Date\n          Latitude\n          Longitude\n          NoOfAttendees\n        }\n      }\n    }\n  }\n`;\nconst DeleteMarketplaceProduct = gql`\n  mutation ($id: ID!) {\n    deleteMarketplaceProduct(id: $id) {\n      data {\n        attributes {\n          ItemName\n          Price\n          AvailableQty\n        }\n      }\n    }\n  }\n`;\nconst CreateAgronomist = gql`\n  mutation ($areas: [ID], $user: ID) {\n    createAgronomist(data: { areas: $areas, users_permissions_user: $user }) {\n      data {\n        id\n        attributes {\n          users_permissions_user {\n            data {\n              id\n              attributes {\n                username\n                Name\n                UserType\n              }\n            }\n          }\n          areas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst getAgronomist = gql`\n  query ($user: ID) {\n    agronomists(filters: { users_permissions_user: { id: { eq: $user } } }) {\n      data {\n        id\n        attributes {\n          users_permissions_user {\n            data {\n              id\n              attributes {\n                username\n                Name\n                UserType\n              }\n            }\n          }\n          areas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst queryUsersLarge = gql`\n  query ($UserType: String, $village: ID, $lga: ID, $area: ID, $state: ID) {\n    usersPermissionsUsers(\n      pagination: { limit: 10000 }\n      sort: \"createdAt:desc\"\n      filters: {\n        UserType: { eq: $UserType }\n        village: {\n          or: [{ id: { eq: $village } }, { area: { id: { eq: $area } } }]\n        }\n        lga: { or: [{ id: { eq: $lga } }, { state: { id: { eq: $state } } }] }\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          ContactNumber\n        }\n      }\n    }\n  }\n`;\nconst getIndoramaUpdates = gql`\n  query (\n    $isDelete: Boolean\n    $isActive: Boolean\n    $id: ID\n    $page: Int\n    $pageSize: Int\n  ) {\n    newsAndUpdates(\n      sort: \"createdAt:desc\"\n      pagination: { page: $page, pageSize: $pageSize }\n      filters: {\n        isActive: { eq: $isActive }\n        isDelete: { eq: $isDelete }\n        id: { eq: $id }\n      }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Title\n          Body\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          isActive\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateIndoramaUpdates = gql`\n  mutation (\n    $id: ID!\n    $Title: String\n    $Body: String\n    $isDelete: Boolean\n    $isActive: Boolean\n    $Images: [ID]\n  ) {\n    updateNewsAndUpdate(\n      id: $id\n      data: {\n        Title: $Title\n        Body: $Body\n        isActive: $isActive\n        isDelete: $isDelete\n        Images: $Images\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Title\n          Body\n          isActive\n          isDelete\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst CreateIndoramaUpdates = gql`\n  mutation ($Title: String, $Body: String, $Images: [ID]) {\n    createNewsAndUpdate(\n      data: {\n        Title: $Title\n        Body: $Body\n        isActive: true\n        isDelete: false\n        Images: $Images\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Title\n          Body\n          isActive\n          isDelete\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst GetMarketplace = gql`\n  query ($pageNumber: Int, $pageSize: Int, $categoryFilter: [ID]) {\n    marketplaceProducts(\n      filters: { marketplace_category: { id: { in: $categoryFilter } } }\n      pagination: { page: $pageNumber, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          ItemName\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          seller {\n            data {\n              attributes {\n                Name\n                username\n                ContactNumber\n              }\n            }\n          }\n          description\n          contactNumber\n          Price\n          AvailableQty\n          Unit\n          marketplace_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst GetMarketplaceSingleProduct = gql`\n  query ($id: ID!) {\n    marketplaceProduct(id: $id) {\n      data {\n        id\n        attributes {\n          ItemName\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          seller {\n            data {\n              attributes {\n                Name\n                username\n                ContactNumber\n              }\n            }\n          }\n          description\n          contactNumber\n          Price\n          AvailableQty\n          Unit\n          marketplace_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst CreateMarketplaceProduct = gql`\n  mutation sellItemMarketplace(\n    $itemName: String\n    $images: [ID]\n    $userId: ID\n    $contactNumber: String\n    $price: Int\n    $availableQty: Int\n    $unit: String\n    $category: ID\n    $description: String\n  ) {\n    createMarketplaceProduct(\n      data: {\n        ItemName: $itemName\n        Images: $images\n        seller: $userId\n        contactNumber: $contactNumber\n        Price: $price\n        AvailableQty: $availableQty\n        Unit: $unit\n        marketplace_category: $category\n        description: $description\n      }\n    ) {\n      data {\n        id\n        attributes {\n          ItemName\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          seller {\n            data {\n              id\n              attributes {\n                Name\n                username\n              }\n            }\n          }\n          description\n          contactNumber\n          Price\n          AvailableQty\n          Unit\n          marketplace_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateMarketplaceProduct = gql`\n  mutation updateMarketplaceProduct(\n    $itemName: String\n    $images: [ID]\n    $contactNumber: String\n    $price: Int\n    $id: ID!\n    $availableQty: Int\n    $unit: String\n    $category: ID\n    $description: String\n  ) {\n    updateMarketplaceProduct(\n      id: $id\n      data: {\n        ItemName: $itemName\n        Images: $images\n        contactNumber: $contactNumber\n        Price: $price\n        AvailableQty: $availableQty\n        Unit: $unit\n        marketplace_category: $category\n        description: $description\n      }\n    ) {\n      data {\n        id\n        attributes {\n          ItemName\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          seller {\n            data {\n              id\n              attributes {\n                Name\n                username\n              }\n            }\n          }\n          description\n          contactNumber\n          Price\n          AvailableQty\n          Unit\n          marketplace_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateMarketplaceProductImg = gql`\n  mutation updateMarketplaceProduct($images: [ID], $id: ID!) {\n    updateMarketplaceProduct(id: $id, data: { Images: $images }) {\n      data {\n        id\n        attributes {\n          ItemName\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          seller {\n            data {\n              id\n              attributes {\n                Name\n                username\n              }\n            }\n          }\n          description\n          contactNumber\n          Price\n          AvailableQty\n          Unit\n          marketplace_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`;\nconst GetBestCropPractices = gql`\n  query getBestCropPractises($cropFilter: ID, $page: Int, $pageSize: Int) {\n    bestCropPractises(\n      filters: { crop: { id: { eq: $cropFilter } } }\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          media {\n            data {\n              id\n              attributes {\n                name\n                formats\n                url\n                size\n                mime\n                ext\n              }\n            }\n          }\n          content\n          cropImage {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst CreateBestCropPractices = gql`\n  mutation ($crop: ID, $media: ID, $content: String, $cropImage: ID) {\n    createBestCropPractise(\n      data: {\n        crop: $crop\n        media: $media\n        content: $content\n        cropImage: $cropImage\n      }\n    ) {\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          media {\n            data {\n              id\n              attributes {\n                name\n                formats\n                url\n                size\n                mime\n                ext\n              }\n            }\n          }\n          content\n          cropImage {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst GetMarketplaceCategories = gql`\n  query {\n    marketplaceCategories(\n      filters: { isDelete: { eq: false }, isActive: { eq: true } }\n      sort: \"CategoryName:asc\"\n    ) {\n      data {\n        id\n        attributes {\n          CategoryName\n          CategoryImage {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          isDelete\n          isActive\n        }\n      }\n    }\n  }\n`;\nconst GetActivities = gql`\n  query getActivities($page: Int, $pageSize: Int) {\n    activities(\n      sort: \"createdAt:desc\"\n      pagination: { page: $page, pageSize: $pageSize }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          FarmerName\n          Date\n          Latitude\n          Longitude\n          NoOfAttendees\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ConditionOfCrop\n          PlannedFarmDay\n          Reason\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ActivityType\n          Time\n          createdAt\n        }\n      }\n    }\n  }\n`;\nconst GetSingleActivity = gql`\n  query getActivities($id: ID) {\n    activity(id: $id) {\n      data {\n        id\n        attributes {\n          FarmerName\n          Date\n          Latitude\n          Longitude\n          NoOfAttendees\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ConditionOfCrop\n          PlannedFarmDay\n          Reason\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ActivityType\n          Time\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst CreateActivities = gql`\n  mutation (\n    $FarmerName: String\n    $Date: Date\n    $Latitude: Float\n    $Longitude: Float\n    $NoOfAttendees: Int\n    $crop: ID\n    $ConditionOfCrop: String\n    $PlannedFarmDay: Date\n    $Reason: String\n    $area: ID\n    $ActivityType: ENUM_ACTIVITY_ACTIVITYTYPE\n    $Time: String\n  ) {\n    createActivity(\n      data: {\n        FarmerName: $FarmerName\n        Date: $Date\n        Latitude: $Latitude\n        Longitude: $Longitude\n        NoOfAttendees: $NoOfAttendees\n        crop: $crop\n        ConditionOfCrop: $ConditionOfCrop\n        PlannedFarmDay: $PlannedFarmDay\n        Reason: $Reason\n        area: $area\n        ActivityType: $ActivityType\n        Time: $Time\n      }\n    ) {\n      data {\n        id\n        attributes {\n          FarmerName\n          Date\n          Latitude\n          Longitude\n          NoOfAttendees\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ConditionOfCrop\n          PlannedFarmDay\n          Reason\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ActivityType\n          Time\n        }\n      }\n    }\n  }\n`;\nconst UpdateActivity = gql`\n  mutation (\n    $FarmerName: String\n    $Date: Date\n    $Latitude: Float\n    $Longitude: Float\n    $NoOfAttendees: Int\n    $crop: ID\n    $ConditionOfCrop: String\n    $PlannedFarmDay: Date\n    $Reason: String\n    $area: ID\n    $ActivityType: ENUM_ACTIVITY_ACTIVITYTYPE\n    $Time: String\n    $id: ID!\n  ) {\n    updateActivity(\n      id: $id\n      data: {\n        FarmerName: $FarmerName\n        Date: $Date\n        Latitude: $Latitude\n        Longitude: $Longitude\n        NoOfAttendees: $NoOfAttendees\n        crop: $crop\n        ConditionOfCrop: $ConditionOfCrop\n        PlannedFarmDay: $PlannedFarmDay\n        Reason: $Reason\n        area: $area\n        ActivityType: $ActivityType\n        Time: $Time\n      }\n    ) {\n      data {\n        id\n        attributes {\n          FarmerName\n          Date\n          Latitude\n          Longitude\n          NoOfAttendees\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ConditionOfCrop\n          PlannedFarmDay\n          Reason\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ActivityType\n          Time\n        }\n      }\n    }\n  }\n`;\nconst getDashboardStats = gql`\n  query dashboardAPI($state: ID, $fromDate: DateTime, $toDate: DateTime) {\n    soilTests(\n      filters: {\n        and: [\n          { lga: { state: { id: { eq: $state } } } }\n          { createdAt: { between: [$fromDate, $toDate] } }\n        ]\n      }\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    soilTestSamples(\n      filters: {\n        and: [\n          { soil_test: { lga: { state: { id: { eq: $state } } } } }\n          { createdAt: { between: [$fromDate, $toDate] } }\n        ]\n      }\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    soilTestResults(\n      filters: {\n        and: [\n          {\n            soil_test_sample: {\n              soil_test: { lga: { state: { id: { eq: $state } } } }\n            }\n          }\n          { createdAt: { between: [$fromDate, $toDate] } }\n        ]\n      }\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    farmDemos {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n`;\nconst getCropPricesDashboard = gql`\n  query ($id: ID, $market: ID, $fromDate: DateTime, $toDate: DateTime) {\n    cropPrices(\n      publicationState: LIVE\n      pagination: { limit: 10000 }\n      sort: \"publishedAt:desc\"\n      filters: {\n        crop: { id: { eq: $id } }\n        market: { id: { eq: $market } }\n        publishedAt: { between: [$fromDate, $toDate] }\n      }\n    ) {\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Price\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Unit\n          market {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          publishedAt\n        }\n      }\n    }\n  }\n`;\nconst getFarmDemoStatsDashboard = gql`\n  query dashboardAPI(\n    $state: ID\n    $status: String\n    $fromDate: DateTime\n    $toDate: DateTime\n  ) {\n    all: farmDemos(\n      filters: {\n        state: { id: { eq: $state } }\n        createdAt: { between: [$fromDate, $toDate] }\n      }\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    status: farmDemos(\n      filters: {\n        and: [\n          { state: { id: { eq: $state } } }\n          { Status: { eq: $status } }\n          { createdAt: { between: [$fromDate, $toDate] } }\n        ]\n      }\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n`;\nconst getallChats = gql`\n  query ($limit: Int, $start: Int, $key: String, $isAskIndorama: Boolean) {\n    chats(\n      filters: {\n        members: {\n          or: [{ username: { containsi: $key } }, { Name: { containsi: $key } }]\n        }\n        isAskIndorama: { eq: $isAskIndorama }\n      }\n      sort: \"updatedAt:desc\"\n      pagination: { limit: $limit, start: $start }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          isAskIndorama\n          members {\n            data {\n              id\n              attributes {\n                username\n                Name\n                UserType\n                Name\n                prof_pic {\n                  data {\n                    id\n                    attributes {\n                      name\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          chatInitiatedBy {\n            data {\n              id\n              attributes {\n                username\n                Name\n                UserType\n                Name\n                prof_pic {\n                  data {\n                    id\n                    attributes {\n                      name\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst getChatMessages = gql`\n  query ($id: ID!) {\n    chat(id: $id) {\n      data {\n        id\n        attributes {\n          messages {\n            data {\n              id\n              attributes {\n                message\n                createdAt\n                updatedAt\n                image_attachment {\n                  data {\n                    id\n                    attributes {\n                      name\n                      width\n                      height\n                      url\n                    }\n                  }\n                }\n                from_user {\n                  data {\n                    id\n                    attributes {\n                      username\n                      Name\n                      UserType\n                      prof_pic {\n                        data {\n                          id\n                          attributes {\n                            url\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                to_user {\n                  data {\n                    id\n                    attributes {\n                      username\n                      Name\n                      UserType\n                      prof_pic {\n                        data {\n                          id\n                          attributes {\n                            url\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                chat {\n                  data {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst getSurveys = gql`\n  query ($page: Int, $pageSize: Int) {\n    surveyForms(\n      sort: \"updatedAt:desc\"\n      pagination: { page: $page, pageSize: $pageSize }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          SurveyTitle\n          SurveyDescription\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst CreateSurveys = gql`\n  mutation (\n    $SurveyTitle: String\n    $SurveyDescription: String\n    $Fields: [SurveyFormFieldsDynamicZoneInput!]\n  ) {\n    createSurveyForm(\n      data: {\n        SurveyTitle: $SurveyTitle\n        SurveyDescription: $SurveyDescription\n        Fields: $Fields\n      }\n    ) {\n      data {\n        id\n        attributes {\n          SurveyTitle\n          SurveyDescription\n          Fields {\n            __typename\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst getSurveyResults = gql`\n  query ($limit: Int, $start: Int, $id: ID) {\n    surveyResults(\n      sort: \"updatedAt:desc\"\n      pagination: { limit: $limit, start: $start }\n      filters: { survey_form: { id: { eq: $id } } }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          SurveyResponse\n          createdAt\n        }\n      }\n    }\n  }\n`;\nconst deleteSurvey = gql`\n  mutation ($id: ID!) {\n    deleteSurveyForm(id: $id) {\n      data {\n        attributes {\n          SurveyTitle\n          SurveyDescription\n        }\n      }\n    }\n  }\n`;\nconst getDashboardAd = gql`\n  query {\n    advertisement {\n      data {\n        id\n        attributes {\n          AdImage {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          url\n          isActive\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst getRetailerAd = gql`\n  query {\n    retailerAdvertisement {\n      data {\n        id\n        attributes {\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          url\n          isActive\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst updateDashboardAd = gql`\n  mutation updateAdvertisement($imageId: ID, $clickUrl: String) {\n    updateAdvertisement(\n      data: { AdImage: $imageId, url: $clickUrl, isActive: true }\n    ) {\n      data {\n        id\n        attributes {\n          AdImage {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          url\n          isActive\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst updateRetailerAd = gql`\n  mutation updateAdvertisement($imageId: ID, $clickUrl: String) {\n    updateRetailerAdvertisement(\n      data: { Image: $imageId, url: $clickUrl, isActive: true }\n    ) {\n      data {\n        id\n        attributes {\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          url\n          isActive\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst getSmsCampaigns = gql`\n  query ($page: Int, $pageSize: Int, $id: ID) {\n    smsCampaigns(\n      sort: \"updatedAt:desc\"\n      pagination: { page: $page, pageSize: $pageSize }\n      filters: { id: { eq: $id } }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          message\n          isAllFarmers\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          recipients {\n            data {\n              id\n              attributes {\n                Name\n                ContactNumber\n              }\n            }\n          }\n          apiKey\n          SMSGatewayResponse\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst createSMSCampaign = gql`\n  mutation createSMSCampaign(\n    $message: String\n    $state: ID\n    $lga: ID\n    $area: ID\n    $village: ID\n    $isAllFarmers: Boolean\n  ) {\n    createSmsCampaign(\n      data: {\n        message: $message\n        state: $state\n        lga: $lga\n        area: $area\n        village: $village\n        isAllFarmers: $isAllFarmers\n      }\n    ) {\n      data {\n        id\n        attributes {\n          message\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          recipients {\n            data {\n              id\n              attributes {\n                Name\n                ContactNumber\n              }\n            }\n          }\n          apiKey\n          SMSGatewayResponse\n          isAllFarmers\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\n@Injectable({\n  providedIn: \"root\",\n})\nexport class DataService {\n  baseURL = environment.apiUrl;\n  params: URLSearchParams = new URLSearchParams();\n\n  constructor(\n    private http: HttpClient,\n    private apollo: Apollo,\n    private toastr: ToastrService\n  ) {}\n\n  handleError(error: HttpErrorResponse) {\n    let errorMessage = \"Unknown error!\";\n    console.log(error);\n    // if (error.error instanceof ErrorEvent) {\n    //   // Client-side errors\n    //   errorMessage = `Error: ${error.error.message}`;\n    // } else {\n    //   // Server-side errors\n    //   errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    // }\n    if (error.error.message) this.toastr.error(error.error.message);\n    if (error.status !== 200) {\n      this.toastr.error(error.error.error.Message);\n      this.toastr.error(error.error.message);\n      return throwError(errorMessage);\n    }\n  }\n\n  Login(data): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n    };\n    return this.http.post(this.baseURL + `/auth/login/`, data, httpOptions1);\n  }\n  createRetailer(data): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n    };\n    return this.http.post(this.baseURL + `/api/users`, data, httpOptions1);\n  }\n  fetchMessage(api_token, message_id): Observable<any> {\n    return this.http\n      .get(\n        `https://www.bulksmsnigeria.com/api/v2/delivery?api_token=${api_token}&message_id=${message_id}`\n      )\n      .pipe(catchError(this.handleError));\n  }\n  getSurveyDetails(data): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/survey-forms/${data}?populate=Fields`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n  downloadResponses(data): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/survey-result/download?surveyForm=${data}`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  getSoilTestStats(data, fromDate?, toDate?): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/dashboard-soil-npk?stateId=${data}&fromDate=${fromDate}T00:00:00.000Z&toDate=${toDate}T23:59:59.000Z`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n  getFarmDemoYieldStats(data, fromDate?, toDate?): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/dashboard-farm-demo?stateId=${data}&fromDate=${fromDate}T00:00:00.000Z&toDate=${toDate}T23:59:59.000Z`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n  getDashboardStats(data?, fromDate?, toDate?) {\n    return this.apollo.watchQuery({\n      query: getDashboardStats,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        state: data,\n        fromDate: `${fromDate}T00:00:00.000Z`,\n        toDate: `${toDate}T23:59:59.000Z`,\n      },\n    });\n  }\n  getCropPricesDashboard(id, market?, fromDate?, toDate?) {\n    return this.apollo.watchQuery({\n      query: getCropPricesDashboard,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n        market: market,\n        fromDate: `${fromDate}T00:00:00.000Z`,\n        toDate: `${toDate}T23:59:59.000Z`,\n      },\n    });\n  }\n  getFarmDemoStatsDashboard(state?, status?, fromDate?, toDate?) {\n    return this.apollo.watchQuery({\n      query: getFarmDemoStatsDashboard,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        state: state,\n        status: status,\n        fromDate: `${fromDate}T00:00:00.000Z`,\n        toDate: `${toDate}T23:59:59.000Z`,\n      },\n    });\n  }\n  getallChats(limit?, start?, key?, isAskIndorama?) {\n    return this.apollo.watchQuery({\n      query: getallChats,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        limit: limit,\n        start: start,\n        key: key ? key : undefined,\n        isAskIndorama: isAskIndorama ? isAskIndorama : undefined,\n      },\n    });\n  }\n  getSurveys(limit?, start?, key?) {\n    return this.apollo.watchQuery({\n      query: getSurveys,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        limit: limit,\n        start: start,\n        key: key ? key : undefined,\n      },\n    });\n  }\n  getSmsCampaigns(page?, pageSize?, id?) {\n    return this.apollo.watchQuery({\n      query: getSmsCampaigns,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        id: id,\n      },\n    });\n  }\n  createSMSCampaign(data) {\n    return this.apollo.mutate({\n      mutation: createSMSCampaign,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        message: data.message,\n        state: data.state ? data.state : undefined,\n        lga: data.lga ? data.lga : undefined,\n        area: data.area ? data.area : undefined,\n        village: data.village ? data.village : undefined,\n        isAllFarmers: !data.isAllFarmers,\n      },\n    });\n  }\n  getSurveyResults(id) {\n    return this.apollo.watchQuery({\n      query: getSurveyResults,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        limit: 10000,\n        id: id,\n      },\n    });\n  }\n  createSurveys(SurveyTitle, SurveyDescription, Fields) {\n    return this.apollo.mutate({\n      mutation: CreateSurveys,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        SurveyTitle: SurveyTitle,\n        SurveyDescription: SurveyDescription,\n        Fields: Fields,\n      },\n    });\n  }\n  deleteSurvey(id) {\n    return this.apollo.mutate({\n      mutation: deleteSurvey,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  getChatMessages(id) {\n    return this.apollo.watchQuery({\n      query: getChatMessages,\n      variables: {\n        id: id,\n      },\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getFarmDemos(page?, pageSize?) {\n    return this.apollo.watchQuery({\n      query: FarmDemosQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        page: page,\n        pageSize: pageSize,\n      },\n    });\n  }\n  getSingleFarmDemo(id) {\n    return this.apollo.watchQuery({\n      query: FarmDemoQuery,\n      variables: {\n        id: id,\n      },\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getCrops() {\n    return this.apollo.watchQuery({\n      query: CropsQuery,\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getStates() {\n    return this.apollo.watchQuery({\n      query: StatesQuery,\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getLGAs(id?) {\n    return this.apollo.watchQuery({\n      query: LGAquery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n      },\n    });\n  }\n  getVillages(id?) {\n    return this.apollo.watchQuery({\n      query: Villagesquery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n      },\n    });\n  }\n  getAreas(id?) {\n    return this.apollo.watchQuery({\n      query: Areasquery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n      },\n    });\n  }\n  getMarkets(id?) {\n    return this.apollo.watchQuery({\n      query: MarketQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n      },\n    });\n  }\n  getCropPrices(page?, pageSize?, PublicationState?, publishedAt?, Rejected?) {\n    return this.apollo.watchQuery({\n      query: CropPricesQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        publicationState: PublicationState,\n        publishedAt: publishedAt,\n        Rejected: Rejected,\n      },\n    });\n  }\n  getRetailers(page?, pageSize?, confirmed?, blocked?) {\n    return this.apollo.watchQuery({\n      query: RetailerQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        confirmed: confirmed,\n        blocked: blocked,\n      },\n    });\n  }\n  getRetailerCategories() {\n    return this.apollo.watchQuery({\n      query: getRetailerCategories,\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getUsers(page?, pageSize?, UserType?) {\n    return this.apollo.watchQuery({\n      query: UsersQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        UserType: UserType,\n        page: page,\n        pageSize: pageSize,\n      },\n    });\n  }\n  getUsersLarge(UserType?, data?) {\n    return this.apollo.watchQuery({\n      query: queryUsersLarge,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        UserType: UserType,\n        village: data.village ? data.village : null,\n        lga: data.lga ? data.lga : null,\n        area: data.area ? data.area : null,\n        state: data.state ? data.state : null,\n      },\n    });\n  }\n  getsoilTests(page?, pageSize?) {\n    return this.apollo.watchQuery({\n      query: SoilTestQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        page: page,\n        pageSize: pageSize,\n      },\n    });\n  }\n  getsingleSoilTests(id) {\n    return this.apollo.watchQuery({\n      query: SingleSoilTestQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n      },\n    });\n  }\n  getsingleRetailer(id) {\n    return this.apollo.watchQuery({\n      query: GetSingleRetailerQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n      },\n    });\n  }\n\n  AddFarmdemo(farmdemo) {\n    return this.apollo.mutate({\n      mutation: AddFarmDemoMutation,\n      variables: {\n        farmer: farmdemo.Farmer,\n        latitude: parseFloat(farmdemo.FarmLocationLatitude),\n        longitude: parseFloat(farmdemo.FarmLocationLongitude),\n        lga: farmdemo.lga,\n        state: farmdemo.state,\n        crop: farmdemo.Crops,\n        area: farmdemo.AreaOfField,\n        farmerPractise: farmdemo.ComponentFarmDemoFarmDemoPractiseInput,\n        indoramaPractise: farmdemo.ComponentFarmDemoFarmDemoPractiseInput,\n        dateOfHarvesting: farmdemo.dateOfHarvesting,\n        season: farmdemo.Season,\n        Status: farmdemo.Status,\n        isPesticidesUsed: farmdemo.isPesticidesUsed == \"true\" ? true : false,\n        images: farmdemo.images,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n\n  AddStates(state) {\n    return this.apollo.mutate({\n      mutation: StatesMutation,\n      variables: {\n        Name: state.state,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddLGA(lga) {\n    return this.apollo.mutate({\n      mutation: LGAmutation,\n      variables: {\n        Name: lga.lga,\n        state: lga.state,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddArea(area) {\n    return this.apollo.mutate({\n      mutation: AreaMutation,\n      variables: {\n        Name: area.area,\n        lga: area.lga,\n        PostalCode: area.PostalCode,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddMarket(market) {\n    return this.apollo.mutate({\n      mutation: MarketMutation,\n      variables: {\n        Name: market.market,\n        state: market.state,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddCrop(crop, image) {\n    return this.apollo.mutate({\n      mutation: CropsMutation,\n      variables: {\n        Name: crop.crop,\n        image: image,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  Addvillage(village) {\n    return this.apollo.mutate({\n      mutation: VillageMutation,\n      variables: {\n        Name: village.village,\n        area: village.area,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddCropPrice(price, image) {\n    return this.apollo.mutate({\n      mutation: CropPriceMutation,\n      variables: {\n        crop: price.crop,\n        price: parseFloat(price.Price),\n        unit: price.Unit,\n        state: price.state,\n        market: price.market,\n        image: image,\n        user: parseInt(localStorage.getItem(\"uid\")),\n        published: new Date(),\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddIndoramaUpdates(price, imageid) {\n    return this.apollo.mutate({\n      mutation: CreateIndoramaUpdates,\n      variables: {\n        Title: price.Title,\n        Body: price.Body,\n        Images: imageid ? imageid : price.Image,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  createBestCropPractise(price, imageid, media) {\n    return this.apollo.mutate({\n      mutation: CreateBestCropPractices,\n      variables: {\n        crop: price.crop,\n        content: price.content,\n        cropImage: imageid,\n        media: media,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  createMarketplaceProduct(price, imageid) {\n    return this.apollo.mutate({\n      mutation: CreateMarketplaceProduct,\n      variables: {\n        itemName: price.itemName,\n        images: imageid,\n        userId: price.userId,\n        contactNumber: String(price.contactNumber),\n        price: price.price,\n        availableQty: parseInt(price.availableQty),\n        unit: price.unit,\n        category: parseInt(price.category),\n        description: price.description,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  updateMarketplaceProduct(price, id, imageid?) {\n    return this.apollo.mutate({\n      mutation: UpdateMarketplaceProduct,\n      variables: {\n        id: id,\n        itemName: price.itemName,\n        images: imageid,\n        // userId: price.userId,\n        contactNumber: String(price.contactNumber),\n        price: price.price,\n        availableQty: parseInt(price.availableQty),\n        unit: price.unit,\n        category: parseInt(price.category),\n        description: price.description,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  updateMarketplaceProductImg(id, imageid?) {\n    return this.apollo.mutate({\n      mutation: UpdateMarketplaceProductImg,\n      variables: {\n        id: id,\n        images: imageid,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  createActivity(price) {\n    return this.apollo.mutate({\n      mutation: CreateActivities,\n      variables: {\n        FarmerName: price.FarmerName ? price.FarmerName : undefined,\n        Date: price.Date,\n        Latitude: parseFloat(price.Latitude),\n        Longitude: parseFloat(price.Longitude),\n        NoOfAttendees: parseInt(price.NoOfAttendees),\n        crop: price.crop ? price.crop : undefined,\n        ConditionOfCrop: price.ConditionOfCrop\n          ? price.ConditionOfCrop\n          : undefined,\n        PlannedFarmDay: price.PlannedFarmDay ? price.PlannedFarmDay : undefined,\n        Reason: price.Reason,\n        area: price.area,\n        ActivityType: price.ActivityType,\n        Time: price.Time,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getAgronomist(id?) {\n    return this.apollo.watchQuery({\n      query: getAgronomist,\n      variables: {\n        user: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getIndoramaUpdates(id?, page?, pageSize?) {\n    return this.apollo.watchQuery({\n      query: getIndoramaUpdates,\n      variables: {\n        id: id,\n        isActive: true,\n        isDelete: false,\n        page: page,\n        pageSize: pageSize,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getMarketplace(pageNumber?, pageSize?, categoryFilter?) {\n    return this.apollo.watchQuery({\n      query: GetMarketplace,\n      variables: {\n        pageNumber: pageNumber,\n        pageSize: pageSize,\n        categoryFilter: categoryFilter,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getSingleMarketplaceProduct(id) {\n    return this.apollo.watchQuery({\n      query: GetMarketplaceSingleProduct,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getBestCropPractises(page?, pageSize?, cropFilter?) {\n    return this.apollo.watchQuery({\n      query: GetBestCropPractices,\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        cropFilter: cropFilter,\n      },\n      errorPolicy: \"all\",\n      // fetchPolicy: \"no-cache\",\n    });\n  }\n  getActivities(page?, pageSize?) {\n    return this.apollo.watchQuery({\n      query: GetActivities,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        page: page,\n        pageSize: pageSize,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  getActivity(id?) {\n    return this.apollo.watchQuery({\n      query: GetSingleActivity,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  getMarketplaceCategories(id?) {\n    return this.apollo.watchQuery({\n      query: GetMarketplaceCategories,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  createAgronomist(data, id) {\n    return this.apollo.mutate({\n      mutation: CreateAgronomist,\n      variables: {\n        areas: data.area,\n        user: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateCropPrice(price, id, imageid, Rejected?, published?) {\n    return this.apollo.mutate({\n      mutation: UpdateCropPriceMutation,\n      variables: {\n        id: id,\n        crop: price?.crop,\n        price: price?.Price ? parseFloat(price?.Price) : undefined,\n        unit: price?.Unit,\n        state: price?.state,\n        market: price?.market,\n        published: published,\n        Rejected: Rejected,\n        image: imageid ? imageid : price?.Image,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddSoilTestResult(result) {\n    return this.apollo.mutate({\n      mutation: AddSoilTestResult,\n      variables: {\n        soilTestSampleID: result.soil_test_sample,\n        zinc: result.ZincObserved,\n        boron: result.BoronObserved,\n        iron: result.IronObserved,\n        calcium: result.CalciumObserved,\n        Carbon: result.OrganicCarbonObserved,\n        phosphorous: result.PhosphorousObserved,\n        magnesium: result.MagnesiumObserved,\n        ph: result.phObserved,\n        copper: result.CopperObserved,\n        Nitrogen: result.TotalNitrogenObserved,\n        manganese: result.ManganeseObserved,\n        pottassium: result.PotassiumObserved,\n        sulphur: result.SulphurObserved,\n        RecommendedNPKQty: result.RecommendedNPKQty,\n        RecommendedUreaQty: result.RecommendedUreaQty,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateSoilTestResult(result) {\n    return this.apollo.mutate({\n      mutation: UpdateSoilTestResult,\n      variables: {\n        id: result.id,\n        zinc: result.ZincObserved,\n        boron: result.BoronObserved,\n        iron: result.IronObserved,\n        calcium: result.CalciumObserved,\n        Carbon: result.OrganicCarbonObserved,\n        phosphorous: result.PhosphorousObserved,\n        magnesium: result.MagnesiumObserved,\n        ph: result.phObserved,\n        copper: result.CopperObserved,\n        Nitrogen: result.TotalNitrogenObserved,\n        manganese: result.ManganeseObserved,\n        pottassium: result.PotassiumObserved,\n        sulphur: result.SulphurObserved,\n        RecommendedNPKQty: result.RecommendedNPKQty,\n        RecommendedUreaQty: result.RecommendedUreaQty,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateCrop(crop, id, Imageid) {\n    return this.apollo.mutate({\n      mutation: UpdateCrops,\n      variables: {\n        Name: crop.crop,\n        isDelete: crop.isDelete,\n        id: id,\n        image: Imageid,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateState(data, id) {\n    return this.apollo.mutate({\n      mutation: UpdateState,\n      variables: {\n        Name: data.state,\n        isDelete: data.isDelete,\n        id: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateLGA(data, id) {\n    return this.apollo.mutate({\n      mutation: UpdateLGA,\n      variables: {\n        Name: data.lga,\n        state: data.state,\n        isDelete: data.isDelete,\n        id: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateMarket(data, id) {\n    return this.apollo.mutate({\n      mutation: UpdateMarket,\n      variables: {\n        Name: data.market,\n        state: data.state,\n        isDelete: data.isDelete,\n        id: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateArea(area, id) {\n    return this.apollo.mutate({\n      mutation: UpdateArea,\n      variables: {\n        Name: area.area,\n        lga: area.lga,\n        PostalCode: area.PostalCode,\n        isDelete: area.isDelete,\n        id: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  Updatevillage(village, id) {\n    return this.apollo.mutate({\n      mutation: UpdateVillage,\n      variables: {\n        Name: village.village,\n        area: village.area,\n        isDelete: village.isDelete,\n        id: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateSoilTest(test, soilTestId) {\n    return this.apollo.mutate({\n      mutation: UpdateSoilTest,\n      variables: {\n        soilTestId: soilTestId,\n        contactNumber: test.ContactNumber,\n        preferredCollectionDate: test.PreferredCollectionDate,\n        reason: test.ReasonForSoilTest,\n        farmerID: test.Farmer,\n        areaID: test.area,\n        lgaID: test.lga,\n        soilTestDisplayID: test.soilTestDisplayID,\n        status: test.Status,\n        nutrient: test.nutrient,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateFarmDemo(data, id) {\n    return this.apollo.mutate({\n      mutation: UpdateFarmDemo,\n      variables: {\n        id: id,\n        farmer: data.Farmer,\n        longitude: parseFloat(data.FarmLocationLongitude),\n        latitude: parseFloat(data.FarmLocationLatitude),\n        lga: data.lga,\n        state: data.state,\n        crop: data.Crops,\n        area: data.AreaOfField,\n        farmerPractise: {\n          Yield: parseFloat(data.Yield_F),\n          DateOfSowing: data.DateOfSowing_F,\n          DateOfDemonstration: data.DateOfDemonstration_F,\n          FirstUreaApplication: data.FirstUreaApplication_F,\n          SecondUreaApplication: data.SecondUreaApplication_F,\n        },\n        indoramaPractise: {\n          Yield: parseFloat(data.Yield_I),\n          DateOfSowing: data.DateOfSowing_I,\n          DateOfDemonstration: data.DateOfDemonstration_I,\n          FirstUreaApplication: data.FirstUreaApplication_I,\n          SecondUreaApplication: data.SecondUreaApplication_I,\n        },\n        // isPesticidesUsed: data.isPesticidesUsed,\n        images: data.images,\n        season: data.Season,\n        Status: data.Status,\n        dateOfHarvesting: data.DateOfHarvesting,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateRetailer(data, id) {\n    return this.apollo.mutate({\n      mutation: updateRetailerQuery,\n      variables: {\n        id: id,\n        categories: data.retailer_categories,\n        name: data.Name,\n        latitude: data.Latitude ? parseFloat(data.Latitude) : undefined,\n        longitude: data.Longitude ? parseFloat(data.Longitude) : undefined,\n        village: data.village,\n        password: data.password ? data.password : undefined,\n        lga: data.lga,\n        bio: data.Bio,\n        agronomist_lgas: data.agronomist_lgas,\n        blocked: data.blocked == \"true\" ? true : false,\n        confirmed: data.confirmed,\n        UserType: data?.UserType,\n        contactNumber: data.ContactNumber,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateRetailerPic(id, image) {\n    return this.apollo.mutate({\n      mutation: updateRetailerProfPic,\n      variables: {\n        id: id,\n        prof_pic: image,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddFarmdemoPic(id, image) {\n    return this.apollo.mutate({\n      mutation: UpdateFarmDemo,\n      variables: {\n        id: id,\n        images: image,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  addRetailerProducts(data, retailer_category, retailer, image) {\n    return this.apollo.mutate({\n      mutation: createdRetailerProducts,\n      variables: {\n        ItemName: data.itemName,\n        Price: parseInt(data.price),\n        Unit: data.unit,\n        Images: image,\n        isApproved: true,\n        retailer_category: retailer_category,\n        retailers: retailer,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateRetailerProducts(data, retailer_category, retailer) {\n    return this.apollo.mutate({\n      mutation: updateRetailerProducts,\n      variables: {\n        productId: data.id,\n        itemName: data.itemName,\n        price: parseInt(data.price),\n        unit: data.unit,\n        // images: data.,\n        isApproved: true,\n        retailer_category: retailer_category,\n        retailer: retailer,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateIndoramaUpdates(price?, id?, imageid?) {\n    return this.apollo.mutate({\n      mutation: UpdateIndoramaUpdates,\n      variables: {\n        id: id,\n        Title: price?.Title,\n        isDelete: price?.isDelete,\n        Body: price?.Body,\n        Images: imageid ? imageid : price?.Image,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  updateActivity(price, id) {\n    return this.apollo.mutate({\n      mutation: UpdateActivity,\n      variables: {\n        id: id,\n        FarmerName: price.FarmerName,\n        Date: price.Date,\n        Latitude: parseFloat(price.Latitude),\n        Longitude: parseFloat(price.Longitude),\n        NoOfAttendees: parseInt(price.NoOfAttendees),\n        crop: price.crop,\n        ConditionOfCrop: price.ConditionOfCrop,\n        PlannedFarmDay: price.PlannedFarmDay,\n        Reason: price.Reason,\n        area: price.area,\n        ActivityType: price.ActivityType,\n        Time: price.Time,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  upload(file: any): Observable<any> {\n    const formData = new FormData();\n    for (var i = 0; i < file.length; i++) {\n      // formData.append(\"file[]\",  file[i]);\n      formData.append(\"files\", file[i], file[i]?.name);\n    }\n    // formData.append(\"files\", file, file?.name);\n    console.log(formData);\n    const httpOptions1: Object = {\n      observe: \"response\",\n    };\n    return this.http.post(this.baseURL + `/api/upload`, formData, httpOptions1);\n  }\n  deleteArea(id) {\n    return this.apollo.mutate({\n      mutation: DeleteAreaMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteVillage(id) {\n    return this.apollo.mutate({\n      mutation: DeleteVillageMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteLGA(id) {\n    return this.apollo.mutate({\n      mutation: DeleteLGAMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteState(id) {\n    return this.apollo.mutate({\n      mutation: DeleteStatesMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteMarket(id) {\n    return this.apollo.mutate({\n      mutation: DeleteMarketMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteCrop(id) {\n    return this.apollo.mutate({\n      mutation: DeleteCropMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteFarmDemo(id) {\n    return this.apollo.mutate({\n      mutation: DeleteFarmdemo,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteProduct(id) {\n    return this.apollo.mutate({\n      mutation: DeleteRetailerProduct,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteFile(id) {\n    return this.apollo.mutate({\n      mutation: DeleteFile,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteUser(id) {\n    return this.apollo.mutate({\n      mutation: DeleteUser,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteBestPractice(id) {\n    return this.apollo.mutate({\n      mutation: DeleteBestPractice,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteActivity(id) {\n    return this.apollo.mutate({\n      mutation: DeleteActivity,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  DeleteMarketplaceProduct(id) {\n    return this.apollo.mutate({\n      mutation: DeleteMarketplaceProduct,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  getDashboardAd() {\n    return this.apollo.watchQuery({\n      query: getDashboardAd,\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getRetailerAd() {\n    return this.apollo.watchQuery({\n      query: getRetailerAd,\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  updateRetailerAd(url, image) {\n    return this.apollo.mutate({\n      mutation: updateRetailerAd,\n      variables: {\n        // clickUrl: url,\n        imageId: image,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  updateDashboardAd(url, image) {\n    return this.apollo.mutate({\n      mutation: updateDashboardAd,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        // clickUrl: url,\n        imageId: image,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\n\nimport { IconSetService } from '@coreui/icons-angular';\nimport { freeSet } from '@coreui/icons';\n\n@Component({\n  // tslint:disable-next-line\n  selector: 'body',\n  template: '<router-outlet></router-outlet>',\n  providers: [IconSetService],\n})\nexport class AppComponent implements OnInit {\n  constructor(\n    private router: Router,\n    public iconSet: IconSetService\n  ) {\n    // iconSet singleton\n    iconSet.icons = { ...freeSet };\n  }\n\n  ngOnInit() {\n    this.router.events.subscribe((evt) => {\n      if (!(evt instanceof NavigationEnd)) {\n        return;\n      }\n      window.scrollTo(0, 0);\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AgGridModule } from 'ag-grid-angular';\nimport { ToastrModule } from 'ngx-toastr';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { AppComponent } from './app.component';\n// Import containers\nimport { DefaultLayoutComponent } from './containers';\nimport { P404Component } from './views/error/404.component';\nimport { P500Component } from './views/error/500.component';\nimport { LoginComponent } from './views/login/login.component';\n\n// const APP_CONTAINERS = [\n//   DefaultLayoutComponent\n// ];\n\nimport {\n  AppAsideModule,\n  AppBreadcrumbModule,\n  AppHeaderModule,\n  AppFooterModule,\n  AppSidebarModule,\n} from '@coreui/angular';\n\n// Import routing module\nimport { AppRoutingModule } from './app.routing';\n// Import 3rd party components\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\n// import { TabsModule } from 'ngx-bootstrap/tabs';\nimport { GraphQLModule } from './graphql.module';\n\n@NgModule({\n  imports: [\n    AgGridModule.withComponents([]),\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    AppAsideModule,\n    AppBreadcrumbModule.forRoot(),\n    ToastrModule.forRoot(),\n    AppFooterModule,\n    AppHeaderModule,\n    NgSelectModule,\n    AppSidebarModule,\n    BsDropdownModule.forRoot(),\n    GraphQLModule,\n  ],\n  declarations: [\n    AppComponent,\n    P404Component,\n    P500Component,\n    LoginComponent,\n    DefaultLayoutComponent,\n  ],\n  providers: [\n    {\n      provide: LocationStrategy,\n      useClass: HashLocationStrategy\n    },\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n// Import Containers\nimport { DefaultLayoutComponent } from './containers';\nimport { P404Component } from './views/error/404.component';\nimport { P500Component } from './views/error/500.component';\nimport { LoginComponent } from './views/login/login.component';\nimport { AuthGuard } from './views/login/auth.guard';\n\nexport const routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'dashboard',\n    pathMatch: 'full',\n  },\n  {\n    path: '404',\n    component: P404Component,\n    data: {\n      title: 'Page 404'\n    }\n  },\n  {\n    path: '500',\n    component: P500Component,\n    data: {\n      title: 'Page 500'\n    }\n  },\n  {\n    path: 'login',\n    component: LoginComponent,\n    data: {\n      title: 'Login Page'\n    }\n  },\n  {\n    path: '',\n    component: DefaultLayoutComponent,\n    data: {\n      title: 'Home'\n    },\n    canActivate: [AuthGuard],\n    children: [\n      {\n        path: 'sms-campaigns',\n        loadChildren: () => import('./views/sms-campaigns/sms-campaigns.module').then(m => m.SMSCampaignsModule)\n      },\n      {\n        path: 'farmdemo',\n        loadChildren: () => import('./views/farm-demo/farm-demo.module').then(m => m.FarmDemoModule)\n      },\n      {\n        path: 'chat',\n        loadChildren: () => import('./views/chat/chat.module').then(m => m.ChatModule)\n      },\n      {\n        path: 'activities',\n        loadChildren: () => import('./views/activities/activities.module').then(m => m.ActivitiesModule)\n      },\n      {\n        path: 'surveys',\n        loadChildren: () => import('./views/surveys/surveys.module').then(m => m.SurveysModule)\n      },\n      {\n        path: 'marketplace',\n        loadChildren: () => import('./views/marketplace/marketplace.module').then(m => m.MarketplaceModule)\n      },\n      {\n        path: 'best-crop-practices',\n        loadChildren: () => import('./views/best-crop-practices/best-crop-practices.module').then(m => m.BestCropPracticesModule)\n      },\n      {\n        path: 'indorama_updates',\n        loadChildren: () => import('./views/indorama-updates/indorama-updates.module').then(m => m.IndoramaUpdatesModule)\n      },\n      {\n        path: 'soiltest',\n        loadChildren: () => import('./views/soil-test/soil-test.module').then(m => m.SoilTestModule)\n      },\n      {\n        path: 'cropprices',\n        loadChildren: () => import('./views/crop-prices/crop-prices.module').then(m => m.CropPricesModule)\n      },\n      {\n        path: 'dashboard',\n        loadChildren: () => import('./views/dashboard/dashboard.module').then(m => m.DashboardModule)\n      },\n      {\n        path: 'advertisement',\n        loadChildren: () => import('./views/advertisement/advertisement.module').then(m => m.AdvertisementModule)\n      },\n      {\n        path: 'retailers',\n        loadChildren: () => import('./views/retailers/retailers.module').then(m => m.RetailersModule)\n      },\n      {\n        path: 'users',\n        loadChildren: () => import('./views/users/users.module').then(m => m.UsersModule)\n      },\n      {\n        path: 'masters',\n        loadChildren: () => import('./views/masters/masters.module').then(m => m.MastersModule)\n      }\n    ]\n  },\n  { path: '**', component: P404Component }\n];\n\n@NgModule({\n  imports: [ RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' }) ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule {}\n","import { INavData } from \"@coreui/angular\";\n\nexport const navItems = [\n  // {\n  //   name: \"Dashboard\",\n  //   url: \"/dashboard\",\n  //   icon: \"icon-speedometer\",\n  //   role: \"\",\n  // },\n  {\n    name: \"Activities\",\n    url: \"/activities/all\",\n    icon: \"icon-cursor\",\n    role: \"\",\n  },\n  {\n    name: \"Marketplace\",\n    url: \"/marketplace/all\",\n    icon: \"icon-cursor\",\n    role: \"\",\n  },\n  {\n    name: \"Indorama Updates\",\n    url: \"/indorama_updates/all\",\n    icon: \"icon-cursor\",\n    role: \"\",\n  },\n  {\n    name: \"SMS Campaigns\",\n    url: \"/sms-campaigns/all\",\n    icon: \"icon-cursor\",\n    role: \"\",\n  },\n  {\n    name: \"Farm Demo\",\n    url: \"/farmdemo/all\",\n    icon: \"icon-cursor\",\n    role: \"\",\n  },\n  {\n    name: \"Soil Analysis\",\n    url: \"/soiltest/customers\",\n    icon: \"icon-cursor\",\n    role: \"\",\n  },\n  {\n    name: \"Crop Prices\",\n    url: \"/cropprices/all\",\n    icon: \"icon-cursor\",\n    role: \"\",\n  },\n  {\n    name: \"Retailers\",\n    url: \"/retailers/all\",\n    icon: \"icon-cursor\",\n    role: \"\",\n  },\n  {\n    name: \"Users\",\n    url: \"/users/all\",\n    icon: \"icon-cursor\",\n    role: \"\",\n  },\n  {\n    name: \"Best crop practices\",\n    url: \"/best-crop-practices/all\",\n    icon: \"icon-cursor\",\n    role: \"\",\n  },\n  {\n    name: \"Surveys\",\n    url: \"/surveys/all\",\n    icon: \"icon-cursor\",\n    role: \"\",\n  },\n  {\n    name: \"Chat\",\n    url: \"/chat/all\",\n    icon: \"icon-cursor\",\n    role: \"\",\n  },\n  {\n    name: \"Advertisement\",\n    url: \"/advertisement/all\",\n    icon: \"icon-cursor\",\n    role: \"\",\n  },\n  {\n    name: \"Masters\",\n    url: \"/soiltest/enquiries\",\n    icon: 'icon-cursor',\n    role: \"\",\n    children: [\n      {\n        name: \"States\",\n        url: \"/masters/States\",\n      },\n      {\n        name: \"LGA\",\n        url: \"/masters/LGA\",\n      },\n      {\n        name: \"City\",\n        url: \"/masters/Cities\",\n      },\n      {\n        name: \"Villages\",\n        url: \"/masters/Villages\",\n      },\n      {\n        name: \"Markets\",\n        url: \"/masters/Markets\",\n      },\n      {\n        name: \"Crops\",\n        url: \"/masters/Crops\",\n      },\n    ],\n  },\n];\n","import { Component } from '@angular/core';\n\n@Component({\n  templateUrl: '500.component.html'\n})\nexport class P500Component {\n\n  constructor() { }\n\n}\n","export default \"<app-header [navbarBrandRouterLink]=\\\"['/dashboard']\\\" [fixed]=\\\"true\\\"\\n  [navbarBrandFull]=\\\"{src: 'assets/img/brand/logo_new.png',width:200,alt: 'CartIntoCar Logo'}\\\"\\n  [navbarBrandMinimized]=\\\"{src: 'assets/img/brand/logo_new.png', width: 200, alt: 'CartIntoCar Logo'}\\\"\\n  [sidebarToggler]=\\\"'lg'\\\">\\n  <ul class=\\\"nav navbar-nav ml-auto\\\">\\n    {{userName}}\\n    <li class=\\\"nav-item dropdown\\\" dropdown placement=\\\"bottom right\\\">\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"dropdown\\\" href=\\\"#\\\" role=\\\"button\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\"\\n        dropdownToggle (click)=\\\"false\\\">\\n        <img src=\\\"assets/img/avatars/6.png\\\" class=\\\"img-avatar\\\" alt=\\\"admin@bootstrapmaster.com\\\" />\\n      </a>\\n      <div class=\\\"dropdown-menu dropdown-menu-right\\\" *dropdownMenu aria-labelledby=\\\"simple-dropdown\\\">\\n        <div class=\\\"dropdown-header text-center\\\"><strong>Settings</strong></div>\\n        <a class=\\\"dropdown-item\\\"><i class=\\\"fa fa-user\\\"></i>{{userName}}</a>\\n        <div class=\\\"divider\\\"></div>\\n        <a class=\\\"dropdown-item\\\" (click)=\\\"logout()\\\"><i class=\\\"fa fa-lock\\\"></i> Logout</a>\\n      </div>\\n    </li>\\n  </ul>\\n</app-header>\\n<div class=\\\"app-body\\\">\\n  <app-sidebar #appSidebar [fixed]=\\\"true\\\" [display]=\\\"'lg'\\\" [minimized]=\\\"sidebarMinimized\\\"\\n    (minimizedChange)=\\\"toggleMinimize($event)\\\">\\n    <app-sidebar-nav [navItems]=\\\"navItems\\\"></app-sidebar-nav>\\n    <!-- <app-sidebar-minimizer></app-sidebar-minimizer> -->\\n  </app-sidebar>\\n  <!-- Main content -->\\n  <main class=\\\"main\\\">\\n    <cui-breadcrumb>\\n    </cui-breadcrumb>\\n    <div class=\\\"container-fluid\\\">\\n      <router-outlet></router-outlet>\\n    </div>\\n  </main>\\n</div>\\n<app-footer>\\n  <span><a>Indorama Agronomy App</a> &copy; 2022 Untangle_</span>\\n  <!-- <span class=\\\"ml-auto\\\">Powered by <a href=\\\"https://www.upsquad.in\\\">upsquad</a></span> -->\\n</app-footer>\";","export default \"<div class=\\\"app flex-row align-items-center\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row justify-content-center\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"clearfix\\\">\\n          <h1 class=\\\"float-left display-3 mr-4\\\">404</h1>\\n          <h4 class=\\\"pt-3\\\">Oops! You're lost.</h4>\\n          <p class=\\\"text-muted\\\">The page you are looking for was not found.</p>\\n        </div>\\n        <div class=\\\"input-prepend input-group\\\">\\n          <div class=\\\"input-group-prepend\\\">\\n            <span class=\\\"input-group-text\\\"><i class=\\\"fa fa-search\\\"></i></span>\\n          </div>\\n          <input id=\\\"prependedInput\\\" class=\\\"form-control\\\" size=\\\"16\\\" type=\\\"text\\\" placeholder=\\\"What are you looking for?\\\">\\n          <span class=\\\"input-group-append\\\">\\n            <button class=\\\"btn btn-info\\\" type=\\\"button\\\">Search</button>\\n          </span>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\";","export default \"<!-- <div class=\\\"app-body bg-image\\\">\\n  <main class=\\\"main d-flex align-items-center\\\" style=\\\"background-color: rgba(0, 0, 0, 0.8);\\\">\\n    <div class=\\\"login-box\\\">\\n      <div class=\\\"card p-4\\\" style=\\\"width: fit-content;\\\">\\n        <div class=\\\"card-body\\\">\\n          <form>\\n            <h1>Login</h1>\\n            <p class=\\\"text-muted\\\">Welcome back! Please log in to your account</p>\\n            <div class=\\\"input-group mb-3\\\">\\n              <div class=\\\"input-group-prepend\\\">\\n                <span class=\\\"input-group-text\\\"><i class=\\\"icon-user\\\"></i></span>\\n              </div>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Username\\\" autocomplete=\\\"username\\\" required>\\n            </div>\\n            <div class=\\\"input-group mb-4\\\">\\n              <div class=\\\"input-group-prepend\\\">\\n                <span class=\\\"input-group-text\\\"><i class=\\\"icon-lock\\\"></i></span>\\n              </div>\\n              <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\" autocomplete=\\\"current-password\\\"\\n                required>\\n            </div>\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-6\\\">\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary px-4\\\">Login</button>\\n              </div>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n  </main>\\n</div> -->\\n<!-- <div class=\\\"bg-image\\\"> -->\\n<div class=\\\"d-md-flex h-md-100 align-items-center\\\">\\n  <div class=\\\"col-md-6 p-0 bg-black h-md-100 login-screen\\\">\\n    <div\\n      class=\\\"text-white d-md-flex align-items-center h-100 text-center justify-content-center\\\"\\n    >\\n      <div class=\\\"container-fluid bg-image\\\" style=\\\"height: 100vh\\\"></div>\\n    </div>\\n  </div>\\n  <div class=\\\"col-md-6 p-0 bg-white h-md-100\\\">\\n    <div class=\\\"d-md-flex align-items-center h-md-100 justify-content-center\\\">\\n      <div class=\\\"container-fluid fallback-image\\\" style=\\\"height: 100vh\\\">\\n        <form\\n          class=\\\"login-box\\\"\\n          #usForm=\\\"ngForm\\\"\\n          (ngSubmit)=\\\"onSubmit()\\\"\\n          style=\\\"background: #ffffff75; padding: 20px; border-radius: 10px\\\"\\n        >\\n          <img\\n            src=\\\"assets/img/brand/logo_new.png\\\"\\n            width=\\\"300\\\"\\n            style=\\\"margin-bottom: 25px\\\"\\n          />\\n          <h3 class=\\\"mt-3\\\">Admin Panel</h3>\\n          <p class=\\\"text-muted\\\">Welcome back! Please log in to your account</p>\\n          <div class=\\\"input-group mb-3\\\">\\n            <div class=\\\"input-group-prepend\\\">\\n              <span class=\\\"input-group-text\\\"><i class=\\\"icon-user\\\"></i></span>\\n            </div>\\n            <input\\n              type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              placeholder=\\\"Username\\\"\\n              id=\\\"login\\\"\\n              maxlength=\\\"80\\\"\\n              size=\\\"30\\\"\\n              ngModel\\n              value=\\\"\\\"\\n              name=\\\"identifier\\\"\\n              required\\n            />\\n          </div>\\n          <div class=\\\"input-group mb-4\\\">\\n            <div class=\\\"input-group-prepend\\\">\\n              <span class=\\\"input-group-text\\\"><i class=\\\"icon-lock\\\"></i></span>\\n            </div>\\n            <input\\n              type=\\\"password\\\"\\n              class=\\\"form-control\\\"\\n              placeholder=\\\"Password\\\"\\n              id=\\\"password\\\"\\n              size=\\\"30\\\"\\n              ngModel\\n              name=\\\"password\\\"\\n              value=\\\"\\\"\\n              required\\n            />\\n          </div>\\n          <!-- <div class=\\\"row\\\"> -->\\n          <!-- <div class=\\\"col-6\\\"> -->\\n          <button\\n            type=\\\"submit\\\"\\n            class=\\\"btn btn-primary ml-2\\\"\\n            [disabled]=\\\"loading\\\"\\n            style=\\\"background-color: #108d51; color: white\\\"\\n          >\\n            <span\\n              *ngIf=\\\"loading\\\"\\n              class=\\\"spinner-border spinner-border-sm mr-1\\\"\\n              role=\\\"status\\\"\\n              aria-hidden=\\\"true\\\"\\n            >\\n            </span\\n            >Login\\n          </button>\\n          <!-- </div> -->\\n          <!-- </div> -->\\n        </form>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<!-- </div> -->\\n\";","import { Injectable } from '@angular/core';\nimport {\n  Router,\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private authenticationService: AuthenticationService\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const currentUser: any = this.authenticationService.currentUserValue;\n    if (currentUser) {\n      console.log(currentUser, 'authguard', route.data.roles);\n      // check if route is restricted by role\n      if (\n        route.data.roles &&\n        route.data.roles.indexOf(currentUser.user.UserType) === -1\n      ) {\n        // role not authorised so redirect to home page\n        this.router.navigate(['/500']);\n        console.log('authguard failed');\n        return false;\n      }\n      // authorised so return true\n      return true;\n    }\n    console.log(currentUser, 'authguard il kerilla', route.data.roles);\n    // not logged in so redirect to login page with the return url\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n    return false;\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule, {\n  useJit: true,\n  preserveWhitespaces: true\n})\n  .catch(err => console.log(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}