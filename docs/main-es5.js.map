{"version":3,"sources":["webpack:///src/app/views/login/authentication.service.ts","webpack:///src/app/graphql.module.ts","webpack:///src/app/views/error/404.component.ts","webpack:///src/environments/environment.ts","webpack:///src/app/containers/default-layout/index.ts","webpack:///src/app/containers/index.ts","webpack:///src/app/containers/default-layout/default-layout.component.ts","webpack:///src/app/views/error/500.component.html","webpack:///src/app/views/login/login.component.ts","webpack:///src/app/data.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/app.routing.ts","webpack:///src/app/_nav.ts","webpack:///src/app/views/error/500.component.ts","webpack:///src/app/containers/default-layout/default-layout.component.html","webpack:///src/app/views/error/404.component.html","webpack:///src/app/views/login/login.component.html","webpack:///src/app/views/login/auth.guard.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["AuthenticationService","http","currentUserSubject","JSON","parse","localStorage","getItem","currentUser","asObservable","console","log","value","data","post","apiUrl","pipe","user","jwt","setItem","username","id","UserType","email","Name","ContactNumber","stringify","next","removeItem","providedIn","uri","createApollo","httpLink","basic","operation","context","headers","Accept","token","auth","Authorization","link","from","create","cache","createNamedApollo","second","name","GraphQLModule","providers","provide","useFactory","deps","P404Component","template","environment","production","DefaultLayoutComponent","router","authenticationService","sidebarMinimized","userName","navItems","filter","item","role","subscribe","x","e","logout","navigate","selector","LoginComponent","dataservice","route","toastr","loginForm","result","error","loading","currentUserValue","returnUrl","snapshot","queryParams","usForm","success","login","message","messages","FarmDemosQuery","FarmDemoQuery","AddFarmDemoMutation","UpdateFarmDemo","CropsQuery","CropsMutation","UpdateCrops","StatesQuery","StatesMutation","UpdateState","LGAquery","LGAmutation","UpdateLGA","Villagesquery","VillageMutation","UpdateVillage","Areasquery","AreaMutation","UpdateArea","MarketQuery","MarketMutation","UpdateMarket","CropPricesQuery","UpdateCropPriceMutation","CropPriceMutation","RetailerQuery","SoilTestQuery","SingleSoilTestQuery","UpdateSoilTest","UsersQuery","AddSoilTestResult","UpdateSoilTestResult","GetSingleRetailerQuery","updateRetailerProfPic","updateRetailerQuery","getRetailerCategories","createdRetailerProducts","updateRetailerProducts","DeleteStatesMutation","DeleteLGAMutation","DeleteAreaMutation","DeleteVillageMutation","DeleteCropMutation","DeleteMarketMutation","DeleteFarmdemo","DeleteRetailerProduct","DeleteFile","DeleteUser","DeleteBestPractice","DeleteActivity","DeleteMarketplaceProduct","CreateAgronomist","getAgronomist","queryUsersLarge","getIndoramaUpdates","UpdateIndoramaUpdates","CreateIndoramaUpdates","GetMarketplace","GetMarketplaceSingleProduct","CreateMarketplaceProduct","UpdateMarketplaceProduct","UpdateMarketplaceProductImg","GetBestCropPractices","CreateBestCropPractices","GetMarketplaceCategories","GetActivities","GetSingleActivity","CreateActivities","UpdateActivity","getDashboardStats","getCropPricesDashboard","getallChats","getChatMessages","getSurveys","CreateSurveys","getSurveyResults","deleteSurvey","getDashboardAd","getRetailerAd","updateDashboardAd","updateRetailerAd","DataService","apollo","baseURL","params","URLSearchParams","errorMessage","window","alert","status","Message","httpOptions1","observe","handleError","get","watchQuery","query","fetchPolicy","market","variables","limit","start","key","isAskIndorama","undefined","SurveyTitle","SurveyDescription","Fields","mutate","mutation","errorPolicy","page","pageSize","village","lga","area","state","farmdemo","farmer","Farmer","latitude","parseFloat","FarmLocationLatitude","longitude","FarmLocationLongitude","crop","Crops","AreaOfField","farmerPractise","ComponentFarmDemoFarmDemoPractiseInput","indoramaPractise","dateOfHarvesting","season","Season","Status","isPesticidesUsed","images","PostalCode","price","image","Price","unit","Unit","published","Date","imageid","Title","Body","Images","Image","media","content","cropImage","itemName","userId","contactNumber","String","availableQty","parseInt","category","description","FarmerName","Latitude","Longitude","NoOfAttendees","ConditionOfCrop","PlannedFarmDay","Reason","ActivityType","Time","isActive","isDelete","pageNumber","categoryFilter","cropFilter","areas","soilTestSampleID","soil_test_sample","zinc","ZincObserved","boron","BoronObserved","iron","IronObserved","calcium","CalciumObserved","Carbon","OrganicCarbonObserved","phosphorous","PhosphorousObserved","magnesium","MagnesiumObserved","ph","phObserved","copper","CopperObserved","Nitrogen","TotalNitrogenObserved","manganese","ManganeseObserved","pottassium","PotassiumObserved","sulphur","SulphurObserved","test","soilTestId","preferredCollectionDate","PreferredCollectionDate","reason","ReasonForSoilTest","farmerID","areaID","lgaID","soilTestDisplayID","nutrient","Yield","Yield_F","DateOfSowing","DateOfSowing_F","DateOfDemonstration","DateOfDemonstration_F","FirstUreaApplication","FirstUreaApplication_F","SecondUreaApplication","SecondUreaApplication_F","Yield_I","DateOfSowing_I","DateOfDemonstration_I","FirstUreaApplication_I","SecondUreaApplication_I","DateOfHarvesting","categories","retailer_categories","bio","Bio","blocked","prof_pic","retailer_category","retailer","ItemName","isApproved","retailers","productId","file","formData","FormData","i","length","append","url","clickUrl","imageId","AppComponent","iconSet","icons","events","evt","scrollTo","AppModule","imports","withComponents","forRoot","declarations","useClass","bootstrap","routes","path","redirectTo","pathMatch","component","title","canActivate","children","loadChildren","then","m","SMSCampaignsModule","FarmDemoModule","ChatModule","ActivitiesModule","SurveysModule","MarketplaceModule","BestCropPracticesModule","IndoramaUpdatesModule","SoilTestModule","CropPricesModule","DashboardModule","AdvertisementModule","RetailersModule","UsersModule","MastersModule","AppRoutingModule","relativeLinkResolution","exports","icon","P500Component","AuthGuard","roles","indexOf","bootstrapModule","useJit","preserveWhitespaces","err","webpackEmptyAsyncContext","req","Promise","resolve","Error","code","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\n\r\nimport { environment } from \"../../../environments/environment\";\r\nimport { User } from \"../../models/user\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class AuthenticationService {\r\n  private currentUserSubject: BehaviorSubject<User>;\r\n  public currentUser: Observable<User>;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.currentUserSubject = new BehaviorSubject<User>(\r\n      JSON.parse(localStorage.getItem(\"currentUser\"))\r\n    );\r\n    this.currentUser = this.currentUserSubject.asObservable();\r\n  }\r\n\r\n  public get currentUserValue(): User {\r\n    console.log(\"curentuser\", this.currentUserSubject);\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  login(data) {\r\n    return this.http.post<any>(`${environment.apiUrl}api/auth/local/`, data).pipe(\r\n      map((user) => {\r\n        // login successful if there's a jwt token in the response\r\n        console.log(user);\r\n        if (user.jwt) {\r\n          // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n          localStorage.setItem(\"token\", user.jwt);\r\n          localStorage.setItem(\"username\", user.user.username);\r\n          localStorage.setItem(\"uid\", user.user.id);\r\n          localStorage.setItem(\"user_type\", user.user.UserType);\r\n          localStorage.setItem(\"email\", user.user.email);\r\n          localStorage.setItem('name', user.user.Name);\r\n          localStorage.setItem('phone_number', user.user.ContactNumber);\r\n\r\n          localStorage.setItem(\"currentUser\", JSON.stringify(user));\r\n          this.currentUserSubject.next(user);\r\n        }\r\n\r\n        return user;\r\n      })\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem(\"currentUser\");\r\n    localStorage.removeItem(\"token\");\r\n    this.currentUserSubject.next(null);\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { APOLLO_OPTIONS, APOLLO_NAMED_OPTIONS } from \"apollo-angular\";\r\nimport {\r\n  ApolloClientOptions,\r\n  ApolloLink,\r\n  InMemoryCache,\r\n} from \"@apollo/client/core\";\r\nimport { setContext } from \"@apollo/client/link/context\";\r\nimport { HttpLink } from \"apollo-angular/http\";\r\n\r\nconst uri = \"https://indoramaapp.untanglestrategy.com/graphql\";\r\n\r\nexport function createApollo(httpLink: HttpLink): ApolloClientOptions<any> {\r\n  const basic = setContext((operation, context) => ({\r\n    headers: {\r\n      Accept: \"charset=utf-8\",\r\n    },\r\n  }));\r\n  // Get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem(\"token\");\r\n  const auth = setContext((operation, context) => ({\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  }));\r\n\r\n  return {\r\n    link: ApolloLink.from([basic, auth, httpLink.create({ uri })]),\r\n    cache: new InMemoryCache(),\r\n  };\r\n}\r\n\r\nexport function createNamedApollo(\r\n  httpLink: HttpLink\r\n): Record<string, ApolloClientOptions<any>> {\r\n  const basic = setContext((operation, context) => ({\r\n    headers: {\r\n      Accept: \"charset=utf-8\",\r\n    },\r\n  }));\r\n  return {\r\n    second: {\r\n      name: \"second\",\r\n      link: ApolloLink.from([ basic, httpLink.create({ uri }) ]),\r\n      cache: new InMemoryCache(),\r\n    },\r\n  };\r\n}\r\n\r\n@NgModule({\r\n  providers: [\r\n    {\r\n      provide: APOLLO_OPTIONS,\r\n      useFactory: createApollo,\r\n      deps: [HttpLink],\r\n    },\r\n    {\r\n      provide: APOLLO_NAMED_OPTIONS,\r\n      deps: [HttpLink],\r\n      useFactory: createNamedApollo,\r\n    },\r\n  ],\r\n})\r\nexport class GraphQLModule {}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  templateUrl: '404.component.html'\r\n})\r\nexport class P404Component {\r\n\r\n  constructor() { }\r\n\r\n}\r\n","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiUrl: \"https://indoramaapp.untanglestrategy.com/\"\r\n};\r\n","export * from './default-layout.component';\r\n","export * from './default-layout';\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { User } from \"../../models/user\";\r\nimport { AuthenticationService } from \"../../views/login/authentication.service\";\r\nimport { navItems } from \"../../_nav\";\r\n\r\n@Component({\r\n  selector: \"app-dashboard\",\r\n  templateUrl: \"./default-layout.component.html\",\r\n})\r\nexport class DefaultLayoutComponent {\r\n  currentUser: User;\r\n  public sidebarMinimized = false;\r\n  userName = localStorage.getItem(\"username\");\r\n  constructor(\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService\r\n  ) {\r\n    this.authenticationService.currentUser.subscribe(\r\n      (x) => (this.currentUser = x)\r\n    );\r\n    // console.log(\"constructor\",this.currentUser.user.UserType)\r\n  }\r\n  public navItems = navItems.filter((item) => item.role == localStorage.getItem(\"user_type\") || item.role == \"\");;\r\n\r\n  toggleMinimize(e) {\r\n    this.sidebarMinimized = e;\r\n    console.log(this.currentUser.user?.UserType);\r\n  }\r\n  logout() {\r\n    this.authenticationService.logout();\r\n    this.router.navigate([\"/login\"]);\r\n  }\r\n}\r\n","export default \"<div class=\\\"app flex-row align-items-center\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row justify-content-center\\\">\\r\\n      <div class=\\\"col-md-6\\\">\\r\\n        <div class=\\\"clearfix\\\">\\r\\n          <h1 class=\\\"float-left display-3 mr-4\\\">500</h1>\\r\\n          <h4 class=\\\"pt-3\\\">Houston, we have a problem!</h4>\\r\\n          <p class=\\\"text-muted\\\">The page you are looking for is temporarily unavailable.</p>\\r\\n        </div>\\r\\n        <div class=\\\"input-prepend input-group\\\">\\r\\n          <div class=\\\"input-group-prepend\\\">\\r\\n            <span class=\\\"input-group-text\\\"><i class=\\\"fa fa-search\\\"></i></span>\\r\\n          </div>\\r\\n          <input id=\\\"prependedInput\\\" class=\\\"form-control\\\" size=\\\"16\\\" type=\\\"text\\\" placeholder=\\\"What are you looking for?\\\">\\r\\n          <span class=\\\"input-group-append\\\">\\r\\n            <button class=\\\"btn btn-info\\\" type=\\\"button\\\">Search</button>\\r\\n          </span>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { Component, ViewChild } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\nimport { first } from \"rxjs/operators\";\r\nimport { DataService } from \"../../data.service\";\r\nimport { AuthenticationService } from \"./authentication.service\";\r\n\r\n@Component({\r\n  selector: \"app-dashboard\",\r\n  templateUrl: \"login.component.html\",\r\n})\r\nexport class LoginComponent {\r\n  @ViewChild(\"usForm\") usForm: NgForm;\r\n\r\n  loginForm: any = {};\r\n  result: any = {};\r\n  returnUrl: string;\r\n  error = \"\";\r\n  loading = false;\r\n\r\n  constructor(\r\n    public dataservice: DataService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService,\r\n    private toastr: ToastrService\r\n  ) {\r\n    if (this.authenticationService.currentUserValue) {\r\n      this.router.navigate([\"/\"]);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.returnUrl = this.route.snapshot.queryParams[\"returnUrl\"] || \"/\";\r\n  }\r\n  onSubmit() {\r\n    this.loginForm = this.usForm.value;\r\n    console.log(this.loginForm);\r\n    this.loading = true;\r\n    this.router.navigate([\"/dashboard\"]);\r\n    this.toastr.success(\"Login successful\");\r\n    this.authenticationService\r\n      .login(this.loginForm)\r\n      .pipe(first())\r\n      .subscribe(\r\n        (data) => {\r\n          this.loading = false;\r\n          this.router.navigate([this.returnUrl]);\r\n          this.toastr.success(\"Login successful\");\r\n        },\r\n        (error) => {\r\n          this.error = error;\r\n          this.loading = false;\r\n          console.log(error.error.message[0].messages[0].message);\r\n          this.toastr.error(\"Error\",error.error.message[0].messages[0].message);\r\n        }\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  HttpClient,\r\n  HttpErrorResponse,\r\n  HttpHeaders,\r\n} from \"@angular/common/http\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { environment } from \"../environments/environment\";\r\nimport { Apollo, gql } from \"apollo-angular\";\r\nimport { catchError } from \"rxjs/operators\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\nimport { idText } from \"typescript\";\r\n\r\nconst FarmDemosQuery = gql`\r\n  query ($page: Int, $pageSize: Int) {\r\n    farmDemos(\r\n      pagination: { page: $page, pageSize: $pageSize }\r\n      sort: \"createdAt:desc\"\r\n    ) {\r\n      meta {\r\n        pagination {\r\n          total\r\n          page\r\n          pageSize\r\n          pageCount\r\n        }\r\n      }\r\n      data {\r\n        id\r\n        attributes {\r\n          Farmer\r\n          FarmLocationLatitude\r\n          FarmLocationLongitude\r\n          lgas {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          crop {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          AreaOfField\r\n          isPesticidesUsed\r\n          FarmerPractise {\r\n            id\r\n            Yield\r\n            DateOfSowing\r\n            DateOfDemonstration\r\n            FirstUreaApplication\r\n            SecondUreaApplication\r\n          }\r\n          IndoramaPractise {\r\n            id\r\n            Yield\r\n            DateOfSowing\r\n            DateOfDemonstration\r\n            FirstUreaApplication\r\n            SecondUreaApplication\r\n          }\r\n          Images {\r\n            data {\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          DateOfHarvesting\r\n          Season\r\n          Status\r\n          state {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst FarmDemoQuery = gql`\r\n  query ($id: ID) {\r\n    farmDemo(id: $id) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Farmer\r\n          FarmLocationLatitude\r\n          FarmLocationLongitude\r\n          lgas {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          crop {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          createdAt\r\n          AreaOfField\r\n          isPesticidesUsed\r\n          DateOfHarvesting\r\n          Season\r\n          FarmerPractise {\r\n            id\r\n            Yield\r\n            DateOfSowing\r\n            DateOfDemonstration\r\n            FirstUreaApplication\r\n            SecondUreaApplication\r\n          }\r\n          IndoramaPractise {\r\n            id\r\n            Yield\r\n            DateOfSowing\r\n            DateOfDemonstration\r\n            FirstUreaApplication\r\n            SecondUreaApplication\r\n          }\r\n          Status\r\n          Images {\r\n            data {\r\n              id\r\n              attributes {\r\n                name\r\n                previewUrl\r\n                url\r\n              }\r\n            }\r\n          }\r\n          state {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst AddFarmDemoMutation = gql`\r\n  mutation (\r\n    $farmer: String\r\n    $latitude: Float\r\n    $longitude: Float\r\n    $lga: ID\r\n    $state: ID\r\n    $crop: ID\r\n    $area: String\r\n    $farmerPractise: ComponentFarmDemoFarmDemoPractiseInput\r\n    $indoramaPractise: ComponentFarmDemoFarmDemoPractiseInput\r\n    $dateOfHarvesting: Date\r\n    $season: String\r\n    $Status: ENUM_FARMDEMO_STATUS\r\n    $isPesticidesUsed: Boolean\r\n    $images: [ID]\r\n  ) {\r\n    createFarmDemo(\r\n      data: {\r\n        Farmer: $farmer\r\n        FarmLocationLatitude: $latitude\r\n        FarmLocationLongitude: $longitude\r\n        lgas: $lga\r\n        state: $state\r\n        crop: $crop\r\n        Status: $Status\r\n        AreaOfField: $area\r\n        FarmerPractise: $farmerPractise\r\n        IndoramaPractise: $indoramaPractise\r\n        isPesticidesUsed: $isPesticidesUsed\r\n        DateOfHarvesting: $dateOfHarvesting\r\n        Season: $season\r\n        Images: $images\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Farmer\r\n          FarmLocationLatitude\r\n          FarmLocationLongitude\r\n          lgas {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          crop {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          Status\r\n          AreaOfField\r\n          isPesticidesUsed\r\n          FarmerPractise {\r\n            id\r\n            Yield\r\n            DateOfSowing\r\n            DateOfDemonstration\r\n            FirstUreaApplication\r\n            SecondUreaApplication\r\n          }\r\n          IndoramaPractise {\r\n            id\r\n            Yield\r\n            DateOfSowing\r\n            DateOfDemonstration\r\n            FirstUreaApplication\r\n            SecondUreaApplication\r\n          }\r\n          Images {\r\n            data {\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          DateOfHarvesting\r\n          Season\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateFarmDemo = gql`\r\n  mutation (\r\n    $id: ID!\r\n    $farmer: String\r\n    $latitude: Float\r\n    $longitude: Float\r\n    $lga: ID\r\n    $crop: ID\r\n    $area: String\r\n    $farmerPractise: ComponentFarmDemoFarmDemoPractiseInput\r\n    $indoramaPractise: ComponentFarmDemoFarmDemoPractiseInput\r\n    $dateOfHarvesting: Date\r\n    $season: String\r\n    $isPesticidesUsed: Boolean\r\n    $images: [ID]\r\n    $Status: ENUM_FARMDEMO_STATUS\r\n    $state: ID\r\n  ) {\r\n    updateFarmDemo(\r\n      id: $id\r\n      data: {\r\n        Farmer: $farmer\r\n        FarmLocationLatitude: $latitude\r\n        FarmLocationLongitude: $longitude\r\n        lgas: $lga\r\n        crop: $crop\r\n        Status: $Status\r\n        state: $state\r\n        AreaOfField: $area\r\n        FarmerPractise: $farmerPractise\r\n        IndoramaPractise: $indoramaPractise\r\n        isPesticidesUsed: $isPesticidesUsed\r\n        DateOfHarvesting: $dateOfHarvesting\r\n        Season: $season\r\n        Images: $images\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Farmer\r\n          FarmLocationLatitude\r\n          FarmLocationLongitude\r\n          Status\r\n          Season\r\n          state {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          lgas {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          crop {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          AreaOfField\r\n          isPesticidesUsed\r\n          FarmerPractise {\r\n            id\r\n            Yield\r\n            DateOfSowing\r\n            DateOfDemonstration\r\n            FirstUreaApplication\r\n            SecondUreaApplication\r\n          }\r\n          IndoramaPractise {\r\n            id\r\n            Yield\r\n            DateOfSowing\r\n            DateOfDemonstration\r\n            FirstUreaApplication\r\n            SecondUreaApplication\r\n          }\r\n          Images {\r\n            data {\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          DateOfHarvesting\r\n          Season\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst CropsQuery = gql`\r\n  query {\r\n    crops(pagination: { limit: 100 }, sort: \"createdAt:desc\") {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst CropsMutation = gql`\r\n  mutation ($Name: String) {\r\n    createCrop(data: { Name: $Name }) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateCrops = gql`\r\n  mutation ($Name: String, $id: ID!, $isDelete: Boolean) {\r\n    updateCrop(id: $id, data: { Name: $Name, isDelete: $isDelete }) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          isDelete\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst StatesQuery = gql`\r\n  query {\r\n    states(pagination: { limit: 100 }, sort: \"createdAt:desc\") {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          lgas {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          markets {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst StatesMutation = gql`\r\n  mutation ($Name: String) {\r\n    createState(data: { Name: $Name }) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          lgas {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          markets {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateState = gql`\r\n  mutation ($Name: String, $id: ID!, $isDelete: Boolean) {\r\n    updateState(id: $id, data: { Name: $Name, isDelete: $isDelete }) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          lgas {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          markets {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          createdAt\r\n          updatedAt\r\n          isDelete\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst LGAquery = gql`\r\n  query ($id: ID) {\r\n    lgas(\r\n      pagination: { limit: 100 }\r\n      sort: \"createdAt:desc\"\r\n      filters: { state: { id: { eq: $id } } }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          state {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          areas {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst LGAmutation = gql`\r\n  mutation ($Name: String, $state: ID) {\r\n    createLga(data: { Name: $Name, state: $state }) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          state {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          areas {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateLGA = gql`\r\n  mutation ($Name: String, $state: ID, $id: ID!, $isDelete: Boolean) {\r\n    updateLga(\r\n      id: $id\r\n      data: { Name: $Name, isDelete: $isDelete, state: $state }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          state {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          areas {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst Villagesquery = gql`\r\n  query ($id: ID) {\r\n    villages(\r\n      pagination: { limit: 100 }\r\n      sort: \"createdAt:desc\"\r\n      filters: { area: { lga: { id: { eq: $id } } } }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          area {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n                PostalCode\r\n                lga {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      Name\r\n                      state {\r\n                        data {\r\n                          id\r\n                          attributes {\r\n                            Name\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          localizations {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n        __typename\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst VillageMutation = gql`\r\n  mutation ($Name: String, $area: ID) {\r\n    createVillage(data: { Name: $Name, area: $area }) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          area {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateVillage = gql`\r\n  mutation ($Name: String, $area: ID, $id: ID!, $isDelete: Boolean) {\r\n    updateVillage(\r\n      id: $id\r\n      data: { Name: $Name, area: $area, isDelete: $isDelete }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          area {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          isDelete\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst Areasquery = gql`\r\n  query ($id: ID) {\r\n    areas(\r\n      pagination: { limit: 100 }\r\n      sort: \"createdAt:desc\"\r\n      filters: { lga: { id: { eq: $id } } }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          PostalCode\r\n          lga {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n                state {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      Name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          villages {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst AreaMutation = gql`\r\n  mutation ($Name: String, $PostalCode: Long, $lga: ID) {\r\n    createArea(data: { Name: $Name, PostalCode: $PostalCode, lga: $lga }) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          PostalCode\r\n          lga {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n                state {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      Name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          villages {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateArea = gql`\r\n  mutation (\r\n    $Name: String\r\n    $lga: ID\r\n    $PostalCode: Long\r\n    $id: ID!\r\n    $isDelete: Boolean\r\n  ) {\r\n    updateArea(\r\n      id: $id\r\n      data: {\r\n        Name: $Name\r\n        PostalCode: $PostalCode\r\n        lga: $lga\r\n        isDelete: $isDelete\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          PostalCode\r\n          lga {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n                state {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      Name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          villages {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst MarketQuery = gql`\r\n  query ($id: ID) {\r\n    markets(\r\n      pagination: { limit: 100 }\r\n      sort: \"createdAt:desc\"\r\n      filters: { state: { id: { eq: $id } } }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          state {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst MarketMutation = gql`\r\n  mutation ($Name: String, $state: ID) {\r\n    createMarket(data: { Name: $Name, state: $state }) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          state {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateMarket = gql`\r\n  mutation ($Name: String, $state: ID, $id: ID!, $isDelete: Boolean) {\r\n    updateMarket(\r\n      id: $id\r\n      data: { Name: $Name, isDelete: $isDelete, state: $state }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          state {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst CropPricesQuery = gql`\r\n  query ($page: Int, $pageSize: Int) {\r\n    cropPrices(\r\n      publicationState: PREVIEW\r\n      pagination: { page: $page, pageSize: $pageSize }\r\n      sort: \"createdAt:desc\"\r\n    ) {\r\n      meta {\r\n        pagination {\r\n          total\r\n          page\r\n          pageSize\r\n          pageCount\r\n        }\r\n      }\r\n      data {\r\n        id\r\n        attributes {\r\n          crop {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          Price\r\n          state {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          Unit\r\n          market {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          Image {\r\n            data {\r\n              id\r\n              attributes {\r\n                name\r\n                alternativeText\r\n                caption\r\n                width\r\n                height\r\n                url\r\n                previewUrl\r\n              }\r\n            }\r\n          }\r\n          createdAt\r\n          updatedAt\r\n          publishedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateCropPriceMutation = gql`\r\n  mutation updateCropPrice(\r\n    $id: ID!\r\n    $crop: ID\r\n    $price: Float\r\n    $state: ID\r\n    $unit: String\r\n    $market: ID\r\n    $image: ID\r\n    $published: DateTime\r\n  ) {\r\n    updateCropPrice(\r\n      id: $id\r\n      data: {\r\n        crop: $crop\r\n        Price: $price\r\n        state: $state\r\n        Unit: $unit\r\n        market: $market\r\n        Image: $image\r\n        publishedAt: $published\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          crop {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          Price\r\n          Unit\r\n          state {\r\n            data {\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          market {\r\n            data {\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          Image {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst CropPriceMutation = gql`\r\n  mutation addCropPrice(\r\n    $crop: ID\r\n    $price: Float\r\n    $state: ID\r\n    $unit: String\r\n    $market: ID\r\n    $image: ID\r\n    $published: DateTime\r\n  ) {\r\n    createCropPrice(\r\n      data: {\r\n        crop: $crop\r\n        Price: $price\r\n        state: $state\r\n        Unit: $unit\r\n        market: $market\r\n        Image: $image\r\n        publishedAt: $published\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          crop {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          Price\r\n          Unit\r\n          state {\r\n            data {\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          market {\r\n            data {\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          Image {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst RetailerQuery = gql`\r\n  query ($page: Int, $pageSize: Int) {\r\n    usersPermissionsUsers(\r\n      pagination: { page: $page, pageSize: $pageSize }\r\n      sort: \"createdAt:desc\"\r\n      filters: { UserType: { eq: \"Retailer\" } }\r\n    ) {\r\n      meta {\r\n        pagination {\r\n          total\r\n          page\r\n          pageSize\r\n          pageCount\r\n        }\r\n      }\r\n      data {\r\n        id\r\n        attributes {\r\n          username\r\n          Name\r\n          email\r\n          village {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          lga {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n                state {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      Name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          retailer_products {\r\n            data {\r\n              attributes {\r\n                ItemName\r\n                Price\r\n                Unit\r\n                Images {\r\n                  data {\r\n                    attributes {\r\n                      url\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          UserType\r\n          Bio\r\n          Latitude\r\n          Longitude\r\n          UserType\r\n          prof_pic {\r\n            data {\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          ContactNumber\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst SoilTestQuery = gql`\r\n  query ($page: Int, $pageSize: Int) {\r\n    soilTests(\r\n      pagination: { page: $page, pageSize: $pageSize }\r\n      sort: \"createdAt:desc\"\r\n    ) {\r\n      meta {\r\n        pagination {\r\n          total\r\n          page\r\n          pageSize\r\n          pageCount\r\n        }\r\n      }\r\n      data {\r\n        id\r\n        attributes {\r\n          SoilTestID\r\n          Status\r\n          ReasonForSoilTest\r\n          ContactNumber\r\n          nutrient\r\n          Farmer {\r\n            data {\r\n              attributes {\r\n                username\r\n                email\r\n                agronomist {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      users_permissions_user {\r\n                        data {\r\n                          id\r\n                          attributes {\r\n                            username\r\n                            email\r\n                            Name\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          lga {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n                state {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      Name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          area {\r\n            data {\r\n              attributes {\r\n                Name\r\n                PostalCode\r\n              }\r\n            }\r\n          }\r\n          soil_test_samples {\r\n            data {\r\n              attributes {\r\n                SampleID\r\n              }\r\n            }\r\n          }\r\n          PreferredCollectionDate\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst SingleSoilTestQuery = gql`\r\n  query ($id: ID) {\r\n    soilTest(id: $id) {\r\n      data {\r\n        id\r\n        attributes {\r\n          SoilTestID\r\n          Status\r\n          ReasonForSoilTest\r\n          ContactNumber\r\n          nutrient\r\n          Farmer {\r\n            data {\r\n              id\r\n              attributes {\r\n                username\r\n                email\r\n                agronomist {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      users_permissions_user {\r\n                        data {\r\n                          id\r\n                          attributes {\r\n                            username\r\n                            email\r\n                            Name\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          lga {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n                state {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      Name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          area {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n                PostalCode\r\n              }\r\n            }\r\n          }\r\n          soil_test_samples {\r\n            data {\r\n              id\r\n              attributes {\r\n                SampleID\r\n                QuantityOfSamples\r\n                createdAt\r\n                updatedAt\r\n                SampleAddedBy {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      Name\r\n                    }\r\n                  }\r\n                }\r\n                soil_test_results {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      soil_test_sample {\r\n                        data {\r\n                          id\r\n                          attributes {\r\n                            SampleID\r\n                          }\r\n                        }\r\n                      }\r\n                      phObserved\r\n                      OrganicCarbonObserved\r\n                      TotalNitrogenObserved\r\n                      PhosphorousObserved\r\n                      PotassiumObserved\r\n                      CalciumObserved\r\n                      MagnesiumObserved\r\n                      ZincObserved\r\n                      SulphurObserved\r\n                      IronObserved\r\n                      CopperObserved\r\n                      BoronObserved\r\n                      ManganeseObserved\r\n                      updatedAt\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          PreferredCollectionDate\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateSoilTest = gql`\r\n  mutation updateSoilTest(\r\n    $soilTestId: ID!\r\n    $contactNumber: String\r\n    $preferredCollectionDate: DateTime\r\n    $reason: String\r\n    $farmerID: ID\r\n    $areaID: ID\r\n    $lgaID: ID\r\n    $soilTestDisplayID: String\r\n    $status: ENUM_SOILTEST_STATUS\r\n    $nutrient: String\r\n  ) {\r\n    updateSoilTest(\r\n      id: $soilTestId\r\n      data: {\r\n        ContactNumber: $contactNumber\r\n        PreferredCollectionDate: $preferredCollectionDate\r\n        ReasonForSoilTest: $reason\r\n        Farmer: $farmerID\r\n        area: $areaID\r\n        lga: $lgaID\r\n        SoilTestID: $soilTestDisplayID\r\n        Status: $status\r\n        nutrient: $nutrient\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          ContactNumber\r\n          PreferredCollectionDate\r\n          ReasonForSoilTest\r\n          Farmer {\r\n            data {\r\n              id\r\n              attributes {\r\n                username\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          area {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          lga {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          SoilTestID\r\n          Status\r\n          nutrient\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UsersQuery = gql`\r\n  query ($UserType: String, $page: Int, $pageSize: Int) {\r\n    usersPermissionsUsers(\r\n      pagination: { page: $page, pageSize: $pageSize }\r\n      sort: \"createdAt:desc\"\r\n      filters: { UserType: { eq: $UserType } }\r\n    ) {\r\n      meta {\r\n        pagination {\r\n          total\r\n          page\r\n          pageSize\r\n          pageCount\r\n        }\r\n      }\r\n      data {\r\n        id\r\n        attributes {\r\n          username\r\n          Name\r\n          email\r\n          village {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          lga {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n                state {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      Name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          retailer_categories {\r\n            data {\r\n              id\r\n              attributes {\r\n                CategoryName\r\n              }\r\n            }\r\n          }\r\n          retailer_products {\r\n            data {\r\n              attributes {\r\n                ItemName\r\n                Price\r\n                Unit\r\n                Images {\r\n                  data {\r\n                    attributes {\r\n                      url\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          UserType\r\n          Bio\r\n          Latitude\r\n          Longitude\r\n          UserType\r\n          prof_pic {\r\n            data {\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          ContactNumber\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst AddSoilTestResult = gql`\r\n  mutation soilTestAddResult(\r\n    $soilTestSampleID: ID\r\n    $ph: String\r\n    $Carbon: String\r\n    $Nitrogen: String\r\n    $phosphorous: String\r\n    $pottassium: String\r\n    $calcium: String\r\n    $magnesium: String\r\n    $zinc: String\r\n    $sulphur: String\r\n    $iron: String\r\n    $copper: String\r\n    $boron: String\r\n    $manganese: String\r\n  ) {\r\n    createSoilTestResult(\r\n      data: {\r\n        soil_test_sample: $soilTestSampleID\r\n        phObserved: $ph\r\n        OrganicCarbonObserved: $Carbon\r\n        TotalNitrogenObserved: $Nitrogen\r\n        PhosphorousObserved: $phosphorous\r\n        PotassiumObserved: $pottassium\r\n        CalciumObserved: $calcium\r\n        MagnesiumObserved: $magnesium\r\n        ZincObserved: $zinc\r\n        SulphurObserved: $sulphur\r\n        IronObserved: $iron\r\n        CopperObserved: $copper\r\n        BoronObserved: $boron\r\n        ManganeseObserved: $manganese\r\n      }\r\n    ) {\r\n      data {\r\n        attributes {\r\n          soil_test_sample {\r\n            data {\r\n              id\r\n              attributes {\r\n                SampleID\r\n              }\r\n            }\r\n          }\r\n          phObserved\r\n          OrganicCarbonObserved\r\n          TotalNitrogenObserved\r\n          PhosphorousObserved\r\n          PotassiumObserved\r\n          CalciumObserved\r\n          MagnesiumObserved\r\n          ZincObserved\r\n          SulphurObserved\r\n          CopperObserved\r\n          IronObserved\r\n          BoronObserved\r\n          ManganeseObserved\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateSoilTestResult = gql`\r\n  mutation soilTestAddResult(\r\n    $id: ID!\r\n    $soilTestSampleID: ID\r\n    $ph: String\r\n    $Carbon: String\r\n    $Nitrogen: String\r\n    $phosphorous: String\r\n    $pottassium: String\r\n    $calcium: String\r\n    $magnesium: String\r\n    $zinc: String\r\n    $sulphur: String\r\n    $iron: String\r\n    $copper: String\r\n    $boron: String\r\n    $manganese: String\r\n  ) {\r\n    updateSoilTestResult(\r\n      id: $id\r\n      data: {\r\n        soil_test_sample: $soilTestSampleID\r\n        phObserved: $ph\r\n        OrganicCarbonObserved: $Carbon\r\n        TotalNitrogenObserved: $Nitrogen\r\n        PhosphorousObserved: $phosphorous\r\n        PotassiumObserved: $pottassium\r\n        CalciumObserved: $calcium\r\n        MagnesiumObserved: $magnesium\r\n        ZincObserved: $zinc\r\n        SulphurObserved: $sulphur\r\n        IronObserved: $iron\r\n        CopperObserved: $copper\r\n        BoronObserved: $boron\r\n        ManganeseObserved: $manganese\r\n      }\r\n    ) {\r\n      data {\r\n        attributes {\r\n          soil_test_sample {\r\n            data {\r\n              id\r\n              attributes {\r\n                SampleID\r\n              }\r\n            }\r\n          }\r\n          phObserved\r\n          OrganicCarbonObserved\r\n          TotalNitrogenObserved\r\n          PhosphorousObserved\r\n          PotassiumObserved\r\n          CalciumObserved\r\n          MagnesiumObserved\r\n          ZincObserved\r\n          SulphurObserved\r\n          CopperObserved\r\n          IronObserved\r\n          BoronObserved\r\n          ManganeseObserved\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GetSingleRetailerQuery = gql`\r\n  query ($id: ID) {\r\n    usersPermissionsUsers(filters: { id: { eq: $id } }) {\r\n      data {\r\n        id\r\n        attributes {\r\n          username\r\n          Name\r\n          email\r\n          village {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          lga {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n                state {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      Name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          retailer_categories {\r\n            data {\r\n              id\r\n              attributes {\r\n                CategoryName\r\n              }\r\n            }\r\n          }\r\n          retailer_products {\r\n            data {\r\n              id\r\n              attributes {\r\n                ItemName\r\n                Price\r\n                Unit\r\n                Images {\r\n                  data {\r\n                    attributes {\r\n                      url\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          UserType\r\n          Bio\r\n          Latitude\r\n          Longitude\r\n          UserType\r\n          prof_pic {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          createdAt\r\n          updatedAt\r\n          blocked\r\n          ContactNumber\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst updateRetailerProfPic = gql`\r\n  mutation editRetailer($id: ID!, $prof_pic: ID) {\r\n    updateUsersPermissionsUser(id: $id, data: { prof_pic: $prof_pic }) {\r\n      data {\r\n        id\r\n        attributes {\r\n          username\r\n          Name\r\n          email\r\n          prof_pic {\r\n            data {\r\n              id\r\n              attributes {\r\n                name\r\n                url\r\n              }\r\n            }\r\n          }\r\n          village {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          lga {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n                state {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      Name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          retailer_categories {\r\n            data {\r\n              id\r\n              attributes {\r\n                CategoryName\r\n              }\r\n            }\r\n          }\r\n          retailer_products {\r\n            data {\r\n              attributes {\r\n                ItemName\r\n                Price\r\n                Unit\r\n                Images {\r\n                  data {\r\n                    attributes {\r\n                      url\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          UserType\r\n          Bio\r\n          Latitude\r\n          Longitude\r\n          UserType\r\n          prof_pic {\r\n            data {\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          ContactNumber\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst updateRetailerQuery = gql`\r\n  mutation editRetailer(\r\n    $id: ID!\r\n    $name: String\r\n    $village: ID\r\n    $lga: ID\r\n    $UserType: ENUM_USERSPERMISSIONSUSER_USERTYPE\r\n    $categories: [ID]\r\n    $bio: String\r\n    $latitude: Float\r\n    $longitude: Float\r\n    $profpic: ID\r\n    $blocked: Boolean\r\n    $contactNumber: String\r\n  ) {\r\n    updateUsersPermissionsUser(\r\n      id: $id\r\n      data: {\r\n        Name: $name\r\n        village: $village\r\n        lga: $lga\r\n        UserType: $UserType\r\n        retailer_categories: $categories\r\n        Bio: $bio\r\n        blocked: $blocked\r\n        Latitude: $latitude\r\n        Longitude: $longitude\r\n        prof_pic: $profpic\r\n        ContactNumber: $contactNumber\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          username\r\n          Name\r\n          email\r\n          village {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          lga {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n                state {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      Name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          retailer_categories {\r\n            data {\r\n              id\r\n              attributes {\r\n                CategoryName\r\n              }\r\n            }\r\n          }\r\n          retailer_products {\r\n            data {\r\n              attributes {\r\n                ItemName\r\n                Price\r\n                Unit\r\n                Images {\r\n                  data {\r\n                    attributes {\r\n                      url\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          UserType\r\n          Bio\r\n          Latitude\r\n          Longitude\r\n          UserType\r\n          prof_pic {\r\n            data {\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          ContactNumber\r\n          blocked\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getRetailerCategories = gql`\r\n  query {\r\n    retailerCategories {\r\n      data {\r\n        id\r\n        attributes {\r\n          CategoryName\r\n          createdAt\r\n          CategoryImage {\r\n            data {\r\n              id\r\n              attributes {\r\n                name\r\n                url\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst createdRetailerProducts = gql`\r\n  mutation (\r\n    $ItemName: String\r\n    $Price: Int\r\n    $Unit: String\r\n    $Images: [ID]\r\n    $retailer_category: ID\r\n    $retailers: [ID]\r\n  ) {\r\n    createRetailerProduct(\r\n      data: {\r\n        ItemName: $ItemName\r\n        Price: $Price\r\n        Unit: $Unit\r\n        Images: $Images\r\n        retailer_category: $retailer_category\r\n        retailers: $retailers\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          ItemName\r\n          Unit\r\n          Price\r\n          Images {\r\n            data {\r\n              id\r\n            }\r\n          }\r\n          retailer_category {\r\n            data {\r\n              id\r\n            }\r\n          }\r\n          retailers {\r\n            data {\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst updateRetailerProducts = gql`\r\n  mutation editRetailerProduct(\r\n    $productId: ID!\r\n    $itemName: String\r\n    $price: Int\r\n    $unit: String\r\n    $images: [ID]\r\n    $isApproved: Boolean\r\n    $retailer: [ID]\r\n    $retailer_category: ID\r\n  ) {\r\n    updateRetailerProduct(\r\n      id: $productId\r\n      data: {\r\n        ItemName: $itemName\r\n        Price: $price\r\n        Unit: $unit\r\n        Images: $images\r\n        isApproved: $isApproved\r\n        retailers: $retailer\r\n        retailer_category: $retailer_category\r\n      }\r\n    ) {\r\n      data {\r\n        attributes {\r\n          ItemName\r\n          Price\r\n          Unit\r\n          retailers {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          retailer_category {\r\n            data {\r\n              id\r\n              attributes {\r\n                CategoryName\r\n              }\r\n            }\r\n          }\r\n          Images {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          isApproved\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst DeleteStatesMutation = gql`\r\n  mutation ($id: ID!) {\r\n    deleteState(id: $id) {\r\n      data {\r\n        attributes {\r\n          Name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst DeleteLGAMutation = gql`\r\n  mutation ($id: ID!) {\r\n    deleteLga(id: $id) {\r\n      data {\r\n        attributes {\r\n          Name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst DeleteAreaMutation = gql`\r\n  mutation ($id: ID!) {\r\n    deleteArea(id: $id) {\r\n      data {\r\n        attributes {\r\n          Name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst DeleteVillageMutation = gql`\r\n  mutation ($id: ID!) {\r\n    deleteVillage(id: $id) {\r\n      data {\r\n        attributes {\r\n          Name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst DeleteCropMutation = gql`\r\n  mutation ($id: ID!) {\r\n    deleteCrop(id: $id) {\r\n      data {\r\n        attributes {\r\n          Name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst DeleteMarketMutation = gql`\r\n  mutation ($id: ID!) {\r\n    deleteMarket(id: $id) {\r\n      data {\r\n        attributes {\r\n          Name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst DeleteFarmdemo = gql`\r\n  mutation ($id: ID!) {\r\n    deleteFarmDemo(id: $id) {\r\n      data {\r\n        attributes {\r\n          Farmer\r\n          DateOfHarvesting\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst DeleteRetailerProduct = gql`\r\n  mutation ($id: ID!) {\r\n    deleteRetailerProduct(id: $id) {\r\n      data {\r\n        attributes {\r\n          ItemName\r\n          Price\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst DeleteFile = gql`\r\n  mutation ($id: ID!) {\r\n    deleteUploadFile(id: $id) {\r\n      data {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst DeleteUser = gql`\r\n  mutation ($id: ID!) {\r\n    deleteUsersPermissionsUser(id: $id) {\r\n      data {\r\n        id\r\n        attributes {\r\n          username\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst DeleteBestPractice = gql`\r\n  mutation ($id: ID!) {\r\n    deleteBestCropPractise(id: $id) {\r\n      data {\r\n        attributes {\r\n          content\r\n          crop {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst DeleteActivity = gql`\r\n  mutation ($id: ID!) {\r\n    deleteActivity(id: $id) {\r\n      data {\r\n        attributes {\r\n          FarmerName\r\n          Date\r\n          Latitude\r\n          Longitude\r\n          NoOfAttendees\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst DeleteMarketplaceProduct = gql`\r\n  mutation ($id: ID!) {\r\n    deleteMarketplaceProduct(id: $id) {\r\n      data {\r\n        attributes {\r\n          ItemName\r\n          Price\r\n          AvailableQty\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst CreateAgronomist = gql`\r\n  mutation ($areas: [ID], $user: ID) {\r\n    createAgronomist(data: { areas: $areas, users_permissions_user: $user }) {\r\n      data {\r\n        id\r\n        attributes {\r\n          users_permissions_user {\r\n            data {\r\n              id\r\n              attributes {\r\n                username\r\n                Name\r\n                UserType\r\n              }\r\n            }\r\n          }\r\n          areas {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getAgronomist = gql`\r\n  query ($user: ID) {\r\n    agronomists(filters: { users_permissions_user: { id: { eq: $user } } }) {\r\n      data {\r\n        id\r\n        attributes {\r\n          users_permissions_user {\r\n            data {\r\n              id\r\n              attributes {\r\n                username\r\n                Name\r\n                UserType\r\n              }\r\n            }\r\n          }\r\n          areas {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst queryUsersLarge = gql`\r\n  query ($UserType: String, $village: ID, $lga: ID, $area: ID, $state: ID) {\r\n    usersPermissionsUsers(\r\n      pagination: { limit: 10000 }\r\n      sort: \"createdAt:desc\"\r\n      filters: {\r\n        UserType: { eq: $UserType }\r\n        village: {\r\n          or: [{ id: { eq: $village } }, { area: { id: { eq: $area } } }]\r\n        }\r\n        lga: { or: [{ id: { eq: $lga } }, { state: { id: { eq: $state } } }] }\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          ContactNumber\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getIndoramaUpdates = gql`\r\n  query (\r\n    $isDelete: Boolean\r\n    $isActive: Boolean\r\n    $id: ID\r\n    $page: Int\r\n    $pageSize: Int\r\n  ) {\r\n    newsAndUpdates(\r\n      sort: \"createdAt:desc\"\r\n      pagination: { page: $page, pageSize: $pageSize }\r\n      filters: {\r\n        isActive: { eq: $isActive }\r\n        isDelete: { eq: $isDelete }\r\n        id: { eq: $id }\r\n      }\r\n    ) {\r\n      meta {\r\n        pagination {\r\n          total\r\n          page\r\n          pageSize\r\n          pageCount\r\n        }\r\n      }\r\n      data {\r\n        id\r\n        attributes {\r\n          Title\r\n          Body\r\n          Images {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          isActive\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateIndoramaUpdates = gql`\r\n  mutation (\r\n    $id: ID!\r\n    $Title: String\r\n    $Body: String\r\n    $isDelete: Boolean\r\n    $isActive: Boolean\r\n    $Images: [ID]\r\n  ) {\r\n    updateNewsAndUpdate(\r\n      id: $id\r\n      data: {\r\n        Title: $Title\r\n        Body: $Body\r\n        isActive: $isActive\r\n        isDelete: $isDelete\r\n        Images: $Images\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Title\r\n          Body\r\n          isActive\r\n          isDelete\r\n          Images {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst CreateIndoramaUpdates = gql`\r\n  mutation ($Title: String, $Body: String, $Images: [ID]) {\r\n    createNewsAndUpdate(\r\n      data: {\r\n        Title: $Title\r\n        Body: $Body\r\n        isActive: true\r\n        isDelete: false\r\n        Images: $Images\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Title\r\n          Body\r\n          isActive\r\n          isDelete\r\n          Images {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GetMarketplace = gql`\r\n  query ($pageNumber: Int, $pageSize: Int, $categoryFilter: [ID]) {\r\n    marketplaceProducts(\r\n      filters: { marketplace_category: { id: { in: $categoryFilter } } }\r\n      pagination: { page: $pageNumber, pageSize: $pageSize }\r\n      sort: \"createdAt:desc\"\r\n    ) {\r\n      meta {\r\n        pagination {\r\n          total\r\n          page\r\n          pageSize\r\n          pageCount\r\n        }\r\n      }\r\n      data {\r\n        id\r\n        attributes {\r\n          ItemName\r\n          Images {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          seller {\r\n            data {\r\n              attributes {\r\n                Name\r\n                username\r\n                ContactNumber\r\n              }\r\n            }\r\n          }\r\n          description\r\n          contactNumber\r\n          Price\r\n          AvailableQty\r\n          Unit\r\n          marketplace_category {\r\n            data {\r\n              id\r\n              attributes {\r\n                CategoryName\r\n              }\r\n            }\r\n          }\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GetMarketplaceSingleProduct = gql`\r\n  query ($id: ID!) {\r\n    marketplaceProduct(id: $id) {\r\n      data {\r\n        id\r\n        attributes {\r\n          ItemName\r\n          Images {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          seller {\r\n            data {\r\n              attributes {\r\n                Name\r\n                username\r\n                ContactNumber\r\n              }\r\n            }\r\n          }\r\n          description\r\n          contactNumber\r\n          Price\r\n          AvailableQty\r\n          Unit\r\n          marketplace_category {\r\n            data {\r\n              id\r\n              attributes {\r\n                CategoryName\r\n              }\r\n            }\r\n          }\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst CreateMarketplaceProduct = gql`\r\n  mutation sellItemMarketplace(\r\n    $itemName: String\r\n    $images: [ID]\r\n    $userId: ID\r\n    $contactNumber: String\r\n    $price: Int\r\n    $availableQty: Int\r\n    $unit: String\r\n    $category: ID\r\n    $description: String\r\n  ) {\r\n    createMarketplaceProduct(\r\n      data: {\r\n        ItemName: $itemName\r\n        Images: $images\r\n        seller: $userId\r\n        contactNumber: $contactNumber\r\n        Price: $price\r\n        AvailableQty: $availableQty\r\n        Unit: $unit\r\n        marketplace_category: $category\r\n        description: $description\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          ItemName\r\n          Images {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          seller {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n                username\r\n              }\r\n            }\r\n          }\r\n          description\r\n          contactNumber\r\n          Price\r\n          AvailableQty\r\n          Unit\r\n          marketplace_category {\r\n            data {\r\n              id\r\n              attributes {\r\n                CategoryName\r\n              }\r\n            }\r\n          }\r\n          createdAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateMarketplaceProduct = gql`\r\n  mutation updateMarketplaceProduct(\r\n    $itemName: String\r\n    $images: [ID]\r\n    $contactNumber: String\r\n    $price: Int\r\n    $id: ID!\r\n    $availableQty: Int\r\n    $unit: String\r\n    $category: ID\r\n    $description: String\r\n  ) {\r\n    updateMarketplaceProduct(\r\n      id: $id\r\n      data: {\r\n        ItemName: $itemName\r\n        Images: $images\r\n        contactNumber: $contactNumber\r\n        Price: $price\r\n        AvailableQty: $availableQty\r\n        Unit: $unit\r\n        marketplace_category: $category\r\n        description: $description\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          ItemName\r\n          Images {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          seller {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n                username\r\n              }\r\n            }\r\n          }\r\n          description\r\n          contactNumber\r\n          Price\r\n          AvailableQty\r\n          Unit\r\n          marketplace_category {\r\n            data {\r\n              id\r\n              attributes {\r\n                CategoryName\r\n              }\r\n            }\r\n          }\r\n          createdAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateMarketplaceProductImg = gql`\r\n  mutation updateMarketplaceProduct($images: [ID], $id: ID!) {\r\n    updateMarketplaceProduct(id: $id, data: { Images: $images }) {\r\n      data {\r\n        id\r\n        attributes {\r\n          ItemName\r\n          Images {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          seller {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n                username\r\n              }\r\n            }\r\n          }\r\n          description\r\n          contactNumber\r\n          Price\r\n          AvailableQty\r\n          Unit\r\n          marketplace_category {\r\n            data {\r\n              id\r\n              attributes {\r\n                CategoryName\r\n              }\r\n            }\r\n          }\r\n          createdAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GetBestCropPractices = gql`\r\n  query getBestCropPractises($cropFilter: ID, $page: Int, $pageSize: Int) {\r\n    bestCropPractises(\r\n      filters: { crop: { id: { eq: $cropFilter } } }\r\n      pagination: { page: $page, pageSize: $pageSize }\r\n      sort: \"createdAt:desc\"\r\n    ) {\r\n      meta {\r\n        pagination {\r\n          total\r\n        }\r\n      }\r\n      data {\r\n        id\r\n        attributes {\r\n          crop {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          media {\r\n            data {\r\n              id\r\n              attributes {\r\n                name\r\n                formats\r\n                url\r\n                size\r\n                mime\r\n                ext\r\n              }\r\n            }\r\n          }\r\n          content\r\n          cropImage {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst CreateBestCropPractices = gql`\r\n  mutation ($crop: ID, $media: ID, $content: String, $cropImage: ID) {\r\n    createBestCropPractise(\r\n      data: {\r\n        crop: $crop\r\n        media: $media\r\n        content: $content\r\n        cropImage: $cropImage\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          crop {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          media {\r\n            data {\r\n              id\r\n              attributes {\r\n                name\r\n                formats\r\n                url\r\n                size\r\n                mime\r\n                ext\r\n              }\r\n            }\r\n          }\r\n          content\r\n          cropImage {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GetMarketplaceCategories = gql`\r\n  query {\r\n    marketplaceCategories(\r\n      filters: { isDelete: { eq: false }, isActive: { eq: true } }\r\n      sort: \"CategoryName:asc\"\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          CategoryName\r\n          CategoryImage {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          isDelete\r\n          isActive\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GetActivities = gql`\r\n  query getActivities($page: Int, $pageSize: Int) {\r\n    activities(\r\n      sort: \"createdAt:desc\"\r\n      pagination: { page: $page, pageSize: $pageSize }\r\n    ) {\r\n      meta {\r\n        pagination {\r\n          total\r\n          page\r\n          pageSize\r\n          pageCount\r\n        }\r\n      }\r\n      data {\r\n        id\r\n        attributes {\r\n          FarmerName\r\n          Date\r\n          Latitude\r\n          Longitude\r\n          NoOfAttendees\r\n          crop {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          ConditionOfCrop\r\n          PlannedFarmDay\r\n          Reason\r\n          area {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          ActivityType\r\n          Time\r\n          createdAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GetSingleActivity = gql`\r\n  query getActivities($id: ID) {\r\n    activity(id: $id) {\r\n      data {\r\n        id\r\n        attributes {\r\n          FarmerName\r\n          Date\r\n          Latitude\r\n          Longitude\r\n          NoOfAttendees\r\n          crop {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          ConditionOfCrop\r\n          PlannedFarmDay\r\n          Reason\r\n          area {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          ActivityType\r\n          Time\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst CreateActivities = gql`\r\n  mutation (\r\n    $FarmerName: String\r\n    $Date: Date\r\n    $Latitude: Float\r\n    $Longitude: Float\r\n    $NoOfAttendees: Int\r\n    $crop: ID\r\n    $ConditionOfCrop: String\r\n    $PlannedFarmDay: Date\r\n    $Reason: String\r\n    $area: ID\r\n    $ActivityType: ENUM_ACTIVITY_ACTIVITYTYPE\r\n    $Time: String\r\n  ) {\r\n    createActivity(\r\n      data: {\r\n        FarmerName: $FarmerName\r\n        Date: $Date\r\n        Latitude: $Latitude\r\n        Longitude: $Longitude\r\n        NoOfAttendees: $NoOfAttendees\r\n        crop: $crop\r\n        ConditionOfCrop: $ConditionOfCrop\r\n        PlannedFarmDay: $PlannedFarmDay\r\n        Reason: $Reason\r\n        area: $area\r\n        ActivityType: $ActivityType\r\n        Time: $Time\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          FarmerName\r\n          Date\r\n          Latitude\r\n          Longitude\r\n          NoOfAttendees\r\n          crop {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          ConditionOfCrop\r\n          PlannedFarmDay\r\n          Reason\r\n          area {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          ActivityType\r\n          Time\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateActivity = gql`\r\n  mutation (\r\n    $FarmerName: String\r\n    $Date: Date\r\n    $Latitude: Float\r\n    $Longitude: Float\r\n    $NoOfAttendees: Int\r\n    $crop: ID\r\n    $ConditionOfCrop: String\r\n    $PlannedFarmDay: Date\r\n    $Reason: String\r\n    $area: ID\r\n    $ActivityType: ENUM_ACTIVITY_ACTIVITYTYPE\r\n    $Time: String\r\n    $id: ID!\r\n  ) {\r\n    updateActivity(\r\n      id: $id\r\n      data: {\r\n        FarmerName: $FarmerName\r\n        Date: $Date\r\n        Latitude: $Latitude\r\n        Longitude: $Longitude\r\n        NoOfAttendees: $NoOfAttendees\r\n        crop: $crop\r\n        ConditionOfCrop: $ConditionOfCrop\r\n        PlannedFarmDay: $PlannedFarmDay\r\n        Reason: $Reason\r\n        area: $area\r\n        ActivityType: $ActivityType\r\n        Time: $Time\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          FarmerName\r\n          Date\r\n          Latitude\r\n          Longitude\r\n          NoOfAttendees\r\n          crop {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          ConditionOfCrop\r\n          PlannedFarmDay\r\n          Reason\r\n          area {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          ActivityType\r\n          Time\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getDashboardStats = gql`\r\n  query dashboardAPI {\r\n    crops {\r\n      data {\r\n        id\r\n        attributes {\r\n          Name\r\n          crop_prices {\r\n            data {\r\n              id\r\n              attributes {\r\n                Price\r\n                publishedAt\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    soilTests {\r\n      meta {\r\n        pagination {\r\n          total\r\n        }\r\n      }\r\n    }\r\n    soilTestSamples {\r\n      meta {\r\n        pagination {\r\n          total\r\n        }\r\n      }\r\n    }\r\n    soilTestResults {\r\n      meta {\r\n        pagination {\r\n          total\r\n        }\r\n      }\r\n      data {\r\n        id\r\n        attributes {\r\n          soil_test_sample {\r\n            data {\r\n              attributes {\r\n                soil_test {\r\n                  data {\r\n                    attributes {\r\n                      lga {\r\n                        data {\r\n                          attributes {\r\n                            state {\r\n                              data {\r\n                                attributes {\r\n                                  Name\r\n                                }\r\n                              }\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    farmDemos {\r\n      meta {\r\n        pagination {\r\n          total\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getCropPricesDashboard = gql`\r\n  query ($id: ID, $market: ID) {\r\n    cropPrices(\r\n      publicationState: LIVE\r\n      pagination: { limit: 100 }\r\n      sort: \"publishedAt:desc\"\r\n      filters: { crop: { id: { eq: $id } }, market: { id: { eq: $market } } }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          crop {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          Price\r\n          state {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          Unit\r\n          market {\r\n            data {\r\n              id\r\n              attributes {\r\n                Name\r\n              }\r\n            }\r\n          }\r\n          createdAt\r\n          updatedAt\r\n          publishedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getallChats = gql`\r\n  query ($limit: Int, $start: Int, $key: String, $isAskIndorama: Boolean) {\r\n    chats(\r\n      filters: {\r\n        members: {\r\n          or: [{ username: { containsi: $key } }, { Name: { containsi: $key } }]\r\n        }\r\n        isAskIndorama: { eq: $isAskIndorama }\r\n      }\r\n      sort: \"updatedAt:desc\"\r\n      pagination: { limit: $limit, start: $start }\r\n    ) {\r\n      meta {\r\n        pagination {\r\n          total\r\n          page\r\n          pageSize\r\n          pageCount\r\n        }\r\n      }\r\n      data {\r\n        id\r\n        attributes {\r\n          isAskIndorama\r\n          members {\r\n            data {\r\n              id\r\n              attributes {\r\n                username\r\n                Name\r\n                UserType\r\n                Name\r\n                prof_pic {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      name\r\n                      url\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          chatInitiatedBy {\r\n            data {\r\n              id\r\n              attributes {\r\n                username\r\n                Name\r\n                UserType\r\n                Name\r\n                prof_pic {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      name\r\n                      url\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getChatMessages = gql`\r\n  query ($id: ID!) {\r\n    chat(id: $id) {\r\n      data {\r\n        id\r\n        attributes {\r\n          messages {\r\n            data {\r\n              id\r\n              attributes {\r\n                message\r\n                createdAt\r\n                updatedAt\r\n                image_attachment {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      name\r\n                      width\r\n                      height\r\n                      url\r\n                    }\r\n                  }\r\n                }\r\n                from_user {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      username\r\n                      Name\r\n                      UserType\r\n                      prof_pic {\r\n                        data {\r\n                          id\r\n                          attributes {\r\n                            url\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                to_user {\r\n                  data {\r\n                    id\r\n                    attributes {\r\n                      username\r\n                      Name\r\n                      UserType\r\n                      prof_pic {\r\n                        data {\r\n                          id\r\n                          attributes {\r\n                            url\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                chat {\r\n                  data {\r\n                    id\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getSurveys = gql`\r\n  query ($page: Int, $pageSize: Int) {\r\n    surveyForms(\r\n      sort: \"updatedAt:desc\"\r\n      pagination: { page: $page, pageSize: $pageSize }\r\n    ) {\r\n      meta {\r\n        pagination {\r\n          total\r\n          page\r\n          pageSize\r\n          pageCount\r\n        }\r\n      }\r\n      data {\r\n        id\r\n        attributes {\r\n          SurveyTitle\r\n          SurveyDescription\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst CreateSurveys = gql`\r\n  mutation (\r\n    $SurveyTitle: String\r\n    $SurveyDescription: String\r\n    $Fields: [SurveyFormFieldsDynamicZoneInput!]\r\n  ) {\r\n    createSurveyForm(\r\n      data: {\r\n        SurveyTitle: $SurveyTitle\r\n        SurveyDescription: $SurveyDescription\r\n        Fields: $Fields\r\n      }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          SurveyTitle\r\n          SurveyDescription\r\n          Fields {\r\n            __typename\r\n          }\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getSurveyResults = gql`\r\n  query ($limit: Int, $start: Int, $id: ID) {\r\n    surveyResults(\r\n      sort: \"updatedAt:desc\"\r\n      pagination: { limit: $limit, start: $start }\r\n      filters: { survey_form: { id: { eq: $id } } }\r\n    ) {\r\n      meta {\r\n        pagination {\r\n          total\r\n          page\r\n          pageSize\r\n          pageCount\r\n        }\r\n      }\r\n      data {\r\n        id\r\n        attributes {\r\n          SurveyResponse\r\n          createdAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst deleteSurvey = gql`\r\n  mutation ($id: ID!) {\r\n    deleteSurveyForm(id: $id) {\r\n      data {\r\n        attributes {\r\n          SurveyTitle\r\n          SurveyDescription\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getDashboardAd = gql`\r\n  query {\r\n    advertisement {\r\n      data {\r\n        id\r\n        attributes {\r\n          AdImage {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          url\r\n          isActive\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getRetailerAd = gql`\r\n  query {\r\n    retailerAdvertisement {\r\n      data {\r\n        id\r\n        attributes {\r\n          Image {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          url\r\n          isActive\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst updateDashboardAd = gql`\r\n  mutation updateAdvertisement($imageId: ID, $clickUrl: String) {\r\n    updateAdvertisement(\r\n      data: { AdImage: $imageId, url: $clickUrl, isActive: true }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          AdImage {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          url\r\n          isActive\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst updateRetailerAd = gql`\r\n  mutation updateAdvertisement($imageId: ID, $clickUrl: String) {\r\n    updateRetailerAdvertisement(\r\n      data: { Image: $imageId, url: $clickUrl, isActive: true }\r\n    ) {\r\n      data {\r\n        id\r\n        attributes {\r\n          Image {\r\n            data {\r\n              id\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n          url\r\n          isActive\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class DataService {\r\n  baseURL = environment.apiUrl;\r\n  params: URLSearchParams = new URLSearchParams();\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private apollo: Apollo,\r\n    private toastr: ToastrService\r\n  ) {}\r\n\r\n  handleError(error: HttpErrorResponse) {\r\n    let errorMessage = \"Unknown error!\";\r\n    console.log(error);\r\n    window.alert(error.error.error.message);\r\n    // if (error.error instanceof ErrorEvent) {\r\n    //   // Client-side errors\r\n    //   errorMessage = `Error: ${error.error.message}`;\r\n    // } else {\r\n    //   // Server-side errors\r\n    //   errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    // }\r\n    if (error.status !== 200) {\r\n      this.toastr.error(error.error.error.Message);\r\n      return throwError(errorMessage);\r\n    }\r\n  }\r\n\r\n  Login(data): Observable<any> {\r\n    const httpOptions1: Object = {\r\n      observe: \"response\",\r\n    };\r\n    return this.http.post(this.baseURL + `auth/login/`, data, httpOptions1);\r\n  }\r\n  createRetailer(data): Observable<any> {\r\n    const httpOptions1: Object = {\r\n      observe: \"response\",\r\n    };\r\n    return this.http.post(this.baseURL + `api/users`, data, httpOptions1);\r\n  }\r\n  sendMessage(data): Observable<any> {\r\n    const httpOptions1: Object = {\r\n      observe: \"response\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    };\r\n    return this.http\r\n      .post(\r\n        `https://www.bulksmsnigeria.com/api/v1/sms/create`,\r\n        data,\r\n        httpOptions1\r\n      )\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n  getSurveyDetails(data): Observable<any> {\r\n    const httpOptions1: Object = {\r\n      observe: \"response\",\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n      },\r\n    };\r\n    return this.http\r\n      .get(\r\n        `http://13.89.242.79/api/survey-forms/${data}?populate=Fields`,\r\n        httpOptions1\r\n      )\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n  getDashboardStats() {\r\n    return this.apollo.watchQuery({\r\n      query: getDashboardStats,\r\n      fetchPolicy: \"no-cache\",\r\n    });\r\n  }\r\n  getCropPricesDashboard(id, market?) {\r\n    return this.apollo.watchQuery({\r\n      query: getCropPricesDashboard,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        id: id,\r\n        market: market,\r\n      },\r\n    });\r\n  }\r\n  getallChats(limit?, start?, key?, isAskIndorama?) {\r\n    return this.apollo.watchQuery({\r\n      query: getallChats,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        limit: limit,\r\n        start: start,\r\n        key: key ? key : undefined,\r\n        isAskIndorama: isAskIndorama ? isAskIndorama : undefined,\r\n      },\r\n    });\r\n  }\r\n  getSurveys(limit?, start?, key?) {\r\n    return this.apollo.watchQuery({\r\n      query: getSurveys,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        limit: limit,\r\n        start: start,\r\n        key: key ? key : undefined,\r\n      },\r\n    });\r\n  }\r\n\r\n  getSurveyResults(id) {\r\n    return this.apollo.watchQuery({\r\n      query: getSurveyResults,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        limit: 10000,\r\n        id: id,\r\n      },\r\n    });\r\n  }\r\n  createSurveys(SurveyTitle, SurveyDescription, Fields) {\r\n    return this.apollo.mutate({\r\n      mutation: CreateSurveys,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        SurveyTitle: SurveyTitle,\r\n        SurveyDescription: SurveyDescription,\r\n        Fields: Fields,\r\n      },\r\n    });\r\n  }\r\n  deleteSurvey(id) {\r\n    return this.apollo.mutate({\r\n      mutation: deleteSurvey,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  getChatMessages(id) {\r\n    return this.apollo.watchQuery({\r\n      query: getChatMessages,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      fetchPolicy: \"no-cache\",\r\n    });\r\n  }\r\n  getFarmDemos(page?, pageSize?) {\r\n    return this.apollo.watchQuery({\r\n      query: FarmDemosQuery,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        page: page,\r\n        pageSize: pageSize,\r\n      },\r\n    });\r\n  }\r\n  getSingleFarmDemo(id) {\r\n    return this.apollo.watchQuery({\r\n      query: FarmDemoQuery,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      fetchPolicy: \"no-cache\",\r\n    });\r\n  }\r\n  getCrops() {\r\n    return this.apollo.watchQuery({\r\n      query: CropsQuery,\r\n      fetchPolicy: \"no-cache\",\r\n    });\r\n  }\r\n  getStates() {\r\n    return this.apollo.watchQuery({\r\n      query: StatesQuery,\r\n      fetchPolicy: \"no-cache\",\r\n    });\r\n  }\r\n  getLGAs(id?) {\r\n    return this.apollo.watchQuery({\r\n      query: LGAquery,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        id: id,\r\n      },\r\n    });\r\n  }\r\n  getVillages(id?) {\r\n    return this.apollo.watchQuery({\r\n      query: Villagesquery,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        id: id,\r\n      },\r\n    });\r\n  }\r\n  getAreas(id?) {\r\n    return this.apollo.watchQuery({\r\n      query: Areasquery,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        id: id,\r\n      },\r\n    });\r\n  }\r\n  getMarkets(id?) {\r\n    return this.apollo.watchQuery({\r\n      query: MarketQuery,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        id: id,\r\n      },\r\n    });\r\n  }\r\n  getCropPrices(page?, pageSize?) {\r\n    return this.apollo.watchQuery({\r\n      query: CropPricesQuery,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        page: page,\r\n        pageSize: pageSize,\r\n      },\r\n    });\r\n  }\r\n  getRetailers(page?, pageSize?) {\r\n    return this.apollo.watchQuery({\r\n      query: RetailerQuery,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        page: page,\r\n        pageSize: pageSize,\r\n      },\r\n    });\r\n  }\r\n  getRetailerCategories() {\r\n    return this.apollo.watchQuery({\r\n      query: getRetailerCategories,\r\n      fetchPolicy: \"no-cache\",\r\n    });\r\n  }\r\n  getUsers(page?, pageSize?, UserType?) {\r\n    return this.apollo.watchQuery({\r\n      query: UsersQuery,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        UserType: UserType,\r\n        page: page,\r\n        pageSize: pageSize,\r\n      },\r\n    });\r\n  }\r\n  getUsersLarge(UserType?, data?) {\r\n    return this.apollo.watchQuery({\r\n      query: queryUsersLarge,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        UserType: UserType,\r\n        village: data.village ? data.village : null,\r\n        lga: data.lga ? data.lga : null,\r\n        area: data.area ? data.area : null,\r\n        state: data.state ? data.state : null,\r\n      },\r\n    });\r\n  }\r\n  getsoilTests(page?, pageSize?) {\r\n    return this.apollo.watchQuery({\r\n      query: SoilTestQuery,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        page: page,\r\n        pageSize: pageSize,\r\n      },\r\n    });\r\n  }\r\n  getsingleSoilTests(id) {\r\n    return this.apollo.watchQuery({\r\n      query: SingleSoilTestQuery,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        id: id,\r\n      },\r\n    });\r\n  }\r\n  getsingleRetailer(id) {\r\n    return this.apollo.watchQuery({\r\n      query: GetSingleRetailerQuery,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: {\r\n        id: id,\r\n      },\r\n    });\r\n  }\r\n\r\n  AddFarmdemo(farmdemo) {\r\n    return this.apollo.mutate({\r\n      mutation: AddFarmDemoMutation,\r\n      variables: {\r\n        farmer: farmdemo.Farmer,\r\n        latitude: parseFloat(farmdemo.FarmLocationLatitude),\r\n        longitude: parseFloat(farmdemo.FarmLocationLongitude),\r\n        lga: farmdemo.lga,\r\n        state: farmdemo.state,\r\n        crop: farmdemo.Crops,\r\n        area: farmdemo.AreaOfField,\r\n        farmerPractise: farmdemo.ComponentFarmDemoFarmDemoPractiseInput,\r\n        indoramaPractise: farmdemo.ComponentFarmDemoFarmDemoPractiseInput,\r\n        dateOfHarvesting: farmdemo.dateOfHarvesting,\r\n        season: farmdemo.Season,\r\n        Status: farmdemo.Status,\r\n        isPesticidesUsed: farmdemo.isPesticidesUsed == \"true\" ? true : false,\r\n        images: farmdemo.images,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n\r\n  AddStates(state) {\r\n    return this.apollo.mutate({\r\n      mutation: StatesMutation,\r\n      variables: {\r\n        Name: state.state,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  AddLGA(lga) {\r\n    return this.apollo.mutate({\r\n      mutation: LGAmutation,\r\n      variables: {\r\n        Name: lga.lga,\r\n        state: lga.state,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  AddArea(area) {\r\n    return this.apollo.mutate({\r\n      mutation: AreaMutation,\r\n      variables: {\r\n        Name: area.area,\r\n        lga: area.lga,\r\n        PostalCode: area.PostalCode,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  AddMarket(market) {\r\n    return this.apollo.mutate({\r\n      mutation: MarketMutation,\r\n      variables: {\r\n        Name: market.market,\r\n        state: market.state,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  AddCrop(crop) {\r\n    return this.apollo.mutate({\r\n      mutation: CropsMutation,\r\n      variables: {\r\n        Name: crop.crop,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  Addvillage(village) {\r\n    return this.apollo.mutate({\r\n      mutation: VillageMutation,\r\n      variables: {\r\n        Name: village.village,\r\n        area: village.area,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  AddCropPrice(price, image) {\r\n    return this.apollo.mutate({\r\n      mutation: CropPriceMutation,\r\n      variables: {\r\n        crop: price.crop,\r\n        price: parseFloat(price.Price),\r\n        unit: price.Unit,\r\n        state: price.state,\r\n        market: price.market,\r\n        image: image,\r\n        published: new Date(),\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  AddIndoramaUpdates(price, imageid) {\r\n    return this.apollo.mutate({\r\n      mutation: CreateIndoramaUpdates,\r\n      variables: {\r\n        Title: price.Title,\r\n        Body: price.Body,\r\n        Images: imageid ? imageid : price.Image,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  createBestCropPractise(price, imageid, media) {\r\n    return this.apollo.mutate({\r\n      mutation: CreateBestCropPractices,\r\n      variables: {\r\n        crop: price.crop,\r\n        content: price.content,\r\n        cropImage: imageid,\r\n        media: media,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  createMarketplaceProduct(price, imageid) {\r\n    return this.apollo.mutate({\r\n      mutation: CreateMarketplaceProduct,\r\n      variables: {\r\n        itemName: price.itemName,\r\n        images: imageid,\r\n        userId: price.userId,\r\n        contactNumber: String(price.contactNumber),\r\n        price: price.price,\r\n        availableQty: parseInt(price.availableQty),\r\n        unit: price.unit,\r\n        category: parseInt(price.category),\r\n        description: price.description,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  updateMarketplaceProduct(price, id, imageid?) {\r\n    return this.apollo.mutate({\r\n      mutation: UpdateMarketplaceProduct,\r\n      variables: {\r\n        id: id,\r\n        itemName: price.itemName,\r\n        images: imageid,\r\n        // userId: price.userId,\r\n        contactNumber: String(price.contactNumber),\r\n        price: price.price,\r\n        availableQty: parseInt(price.availableQty),\r\n        unit: price.unit,\r\n        category: parseInt(price.category),\r\n        description: price.description,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  updateMarketplaceProductImg(id, imageid?) {\r\n    return this.apollo.mutate({\r\n      mutation: UpdateMarketplaceProductImg,\r\n      variables: {\r\n        id: id,\r\n        images: imageid,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  createActivity(price) {\r\n    return this.apollo.mutate({\r\n      mutation: CreateActivities,\r\n      variables: {\r\n        FarmerName: price.FarmerName,\r\n        Date: price.Date,\r\n        Latitude: parseFloat(price.Latitude),\r\n        Longitude: parseFloat(price.Longitude),\r\n        NoOfAttendees: parseInt(price.NoOfAttendees),\r\n        crop: price.crop,\r\n        ConditionOfCrop: price.ConditionOfCrop,\r\n        PlannedFarmDay: price.PlannedFarmDay,\r\n        Reason: price.Reason,\r\n        area: price.area,\r\n        ActivityType: price.ActivityType,\r\n        Time: price.Time,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  getAgronomist(id?) {\r\n    return this.apollo.watchQuery({\r\n      query: getAgronomist,\r\n      variables: {\r\n        user: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  getIndoramaUpdates(id?, page?, pageSize?) {\r\n    return this.apollo.watchQuery({\r\n      query: getIndoramaUpdates,\r\n      variables: {\r\n        id: id,\r\n        isActive: true,\r\n        isDelete: false,\r\n        page: page,\r\n        pageSize: pageSize,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  getMarketplace(pageNumber?, pageSize?, categoryFilter?) {\r\n    return this.apollo.watchQuery({\r\n      query: GetMarketplace,\r\n      variables: {\r\n        pageNumber: pageNumber,\r\n        pageSize: pageSize,\r\n        categoryFilter: categoryFilter,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  getSingleMarketplaceProduct(id) {\r\n    return this.apollo.watchQuery({\r\n      query: GetMarketplaceSingleProduct,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  getBestCropPractises(page?, pageSize?, cropFilter?) {\r\n    return this.apollo.watchQuery({\r\n      query: GetBestCropPractices,\r\n      variables: {\r\n        page: page,\r\n        pageSize: pageSize,\r\n        cropFilter: cropFilter,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  getActivities(page?, pageSize?) {\r\n    return this.apollo.watchQuery({\r\n      query: GetActivities,\r\n      variables: {\r\n        page: page,\r\n        pageSize: pageSize,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  getActivity(id?) {\r\n    return this.apollo.watchQuery({\r\n      query: GetSingleActivity,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  getMarketplaceCategories(id?) {\r\n    return this.apollo.watchQuery({\r\n      query: GetMarketplaceCategories,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  createAgronomist(data, id) {\r\n    return this.apollo.mutate({\r\n      mutation: CreateAgronomist,\r\n      variables: {\r\n        areas: data.area,\r\n        user: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  UpdateCropPrice(price, id, imageid) {\r\n    return this.apollo.mutate({\r\n      mutation: UpdateCropPriceMutation,\r\n      variables: {\r\n        id: id,\r\n        crop: price.crop,\r\n        price: parseFloat(price.Price),\r\n        unit: price.Unit,\r\n        state: price.state,\r\n        market: price.market,\r\n        published: new Date(),\r\n        image: imageid ? imageid : price.Image,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  AddSoilTestResult(result) {\r\n    return this.apollo.mutate({\r\n      mutation: AddSoilTestResult,\r\n      variables: {\r\n        soilTestSampleID: result.soil_test_sample,\r\n        zinc: result.ZincObserved,\r\n        boron: result.BoronObserved,\r\n        iron: result.IronObserved,\r\n        calcium: result.CalciumObserved,\r\n        Carbon: result.OrganicCarbonObserved,\r\n        phosphorous: result.PhosphorousObserved,\r\n        magnesium: result.MagnesiumObserved,\r\n        ph: result.phObserved,\r\n        copper: result.CopperObserved,\r\n        Nitrogen: result.TotalNitrogenObserved,\r\n        manganese: result.ManganeseObserved,\r\n        pottassium: result.PotassiumObserved,\r\n        sulphur: result.SulphurObserved,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  UpdateSoilTestResult(result) {\r\n    return this.apollo.mutate({\r\n      mutation: UpdateSoilTestResult,\r\n      variables: {\r\n        id: result.id,\r\n        zinc: result.ZincObserved,\r\n        boron: result.BoronObserved,\r\n        iron: result.IronObserved,\r\n        calcium: result.CalciumObserved,\r\n        Carbon: result.OrganicCarbonObserved,\r\n        phosphorous: result.PhosphorousObserved,\r\n        magnesium: result.MagnesiumObserved,\r\n        ph: result.phObserved,\r\n        copper: result.CopperObserved,\r\n        Nitrogen: result.TotalNitrogenObserved,\r\n        manganese: result.ManganeseObserved,\r\n        pottassium: result.PotassiumObserved,\r\n        sulphur: result.SulphurObserved,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  UpdateCrop(crop, id) {\r\n    return this.apollo.mutate({\r\n      mutation: UpdateCrops,\r\n      variables: {\r\n        Name: crop.crop,\r\n        isDelete: crop.isDelete,\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  UpdateState(data, id) {\r\n    return this.apollo.mutate({\r\n      mutation: UpdateState,\r\n      variables: {\r\n        Name: data.state,\r\n        isDelete: data.isDelete,\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  UpdateLGA(data, id) {\r\n    return this.apollo.mutate({\r\n      mutation: UpdateLGA,\r\n      variables: {\r\n        Name: data.lga,\r\n        state: data.state,\r\n        isDelete: data.isDelete,\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  UpdateMarket(data, id) {\r\n    return this.apollo.mutate({\r\n      mutation: UpdateMarket,\r\n      variables: {\r\n        Name: data.market,\r\n        state: data.state,\r\n        isDelete: data.isDelete,\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  UpdateArea(area, id) {\r\n    return this.apollo.mutate({\r\n      mutation: UpdateArea,\r\n      variables: {\r\n        Name: area.area,\r\n        lga: area.lga,\r\n        PostalCode: area.PostalCode,\r\n        isDelete: area.isDelete,\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  Updatevillage(village, id) {\r\n    return this.apollo.mutate({\r\n      mutation: UpdateVillage,\r\n      variables: {\r\n        Name: village.village,\r\n        area: village.area,\r\n        isDelete: village.isDelete,\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  UpdateSoilTest(test, soilTestId) {\r\n    return this.apollo.mutate({\r\n      mutation: UpdateSoilTest,\r\n      variables: {\r\n        soilTestId: soilTestId,\r\n        contactNumber: test.ContactNumber,\r\n        preferredCollectionDate: test.PreferredCollectionDate,\r\n        reason: test.ReasonForSoilTest,\r\n        farmerID: test.Farmer,\r\n        areaID: test.area,\r\n        lgaID: test.lga,\r\n        soilTestDisplayID: test.soilTestDisplayID,\r\n        status: test.Status,\r\n        nutrient: test.nutrient,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  UpdateFarmDemo(data, id) {\r\n    return this.apollo.mutate({\r\n      mutation: UpdateFarmDemo,\r\n      variables: {\r\n        id: id,\r\n        farmer: data.Farmer,\r\n        longitude: parseFloat(data.FarmLocationLongitude),\r\n        latitude: parseFloat(data.FarmLocationLatitude),\r\n        lga: data.lga,\r\n        state: data.state,\r\n        crop: data.Crops,\r\n        area: data.AreaOfField,\r\n        farmerPractise: {\r\n          Yield: parseFloat(data.Yield_F),\r\n          DateOfSowing: data.DateOfSowing_F,\r\n          DateOfDemonstration: data.DateOfDemonstration_F,\r\n          FirstUreaApplication: data.FirstUreaApplication_F,\r\n          SecondUreaApplication: data.SecondUreaApplication_F,\r\n        },\r\n        indoramaPractise: {\r\n          Yield: parseFloat(data.Yield_I),\r\n          DateOfSowing: data.DateOfSowing_I,\r\n          DateOfDemonstration: data.DateOfDemonstration_I,\r\n          FirstUreaApplication: data.FirstUreaApplication_I,\r\n          SecondUreaApplication: data.SecondUreaApplication_I,\r\n        },\r\n        // isPesticidesUsed: data.isPesticidesUsed,\r\n        images: data.images,\r\n        season: data.Season,\r\n        Status: data.Status,\r\n        dateOfHarvesting: data.DateOfHarvesting,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  UpdateRetailer(data, id) {\r\n    return this.apollo.mutate({\r\n      mutation: updateRetailerQuery,\r\n      variables: {\r\n        id: id,\r\n        categories: data.retailer_categories,\r\n        name: data.Name,\r\n        latitude: parseFloat(data.Latitude),\r\n        longitude: parseFloat(data.Longitude),\r\n        village: data.village,\r\n        lga: data.lga,\r\n        bio: data.Bio,\r\n        blocked: data.blocked == \"true\" ? true : false,\r\n        UserType: data?.UserType,\r\n        contactNumber: data.ContactNumber,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  UpdateRetailerPic(id, image) {\r\n    return this.apollo.mutate({\r\n      mutation: updateRetailerProfPic,\r\n      variables: {\r\n        id: id,\r\n        prof_pic: image,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  AddFarmdemoPic(id, image) {\r\n    return this.apollo.mutate({\r\n      mutation: UpdateFarmDemo,\r\n      variables: {\r\n        id: id,\r\n        images: image,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  addRetailerProducts(data, retailer_category, retailer, image) {\r\n    return this.apollo.mutate({\r\n      mutation: createdRetailerProducts,\r\n      variables: {\r\n        ItemName: data.itemName,\r\n        Price: parseInt(data.price),\r\n        Unit: data.unit,\r\n        Images: image,\r\n        isApproved: true,\r\n        retailer_category: retailer_category,\r\n        retailers: retailer,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  UpdateRetailerProducts(data, retailer_category, retailer) {\r\n    return this.apollo.mutate({\r\n      mutation: updateRetailerProducts,\r\n      variables: {\r\n        productId: data.id,\r\n        itemName: data.itemName,\r\n        price: parseInt(data.price),\r\n        unit: data.unit,\r\n        // images: data.,\r\n        isApproved: true,\r\n        retailer_category: retailer_category,\r\n        retailer: retailer,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  UpdateIndoramaUpdates(price?, id?, imageid?) {\r\n    return this.apollo.mutate({\r\n      mutation: UpdateIndoramaUpdates,\r\n      variables: {\r\n        id: id,\r\n        Title: price?.Title,\r\n        isDelete: price?.isDelete,\r\n        Body: price?.Body,\r\n        Images: imageid ? imageid : price?.Image,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  updateActivity(price, id) {\r\n    return this.apollo.mutate({\r\n      mutation: UpdateActivity,\r\n      variables: {\r\n        id: id,\r\n        FarmerName: price.FarmerName,\r\n        Date: price.Date,\r\n        Latitude: parseFloat(price.Latitude),\r\n        Longitude: parseFloat(price.Longitude),\r\n        NoOfAttendees: parseInt(price.NoOfAttendees),\r\n        crop: price.crop,\r\n        ConditionOfCrop: price.ConditionOfCrop,\r\n        PlannedFarmDay: price.PlannedFarmDay,\r\n        Reason: price.Reason,\r\n        area: price.area,\r\n        ActivityType: price.ActivityType,\r\n        Time: price.Time,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  upload(file: any): Observable<any> {\r\n    const formData = new FormData();\r\n    for (var i = 0; i < file.length; i++) {\r\n      // formData.append(\"file[]\",  file[i]);\r\n      formData.append(\"files\", file[i], file[i]?.name);\r\n    }\r\n    // formData.append(\"files\", file, file?.name);\r\n    console.log(formData);\r\n    const httpOptions1: Object = {\r\n      observe: \"response\",\r\n    };\r\n    return this.http.post(this.baseURL + `api/upload`, formData, httpOptions1);\r\n  }\r\n  deleteArea(id) {\r\n    return this.apollo.mutate({\r\n      mutation: DeleteAreaMutation,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  deleteVillage(id) {\r\n    return this.apollo.mutate({\r\n      mutation: DeleteVillageMutation,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  deleteLGA(id) {\r\n    return this.apollo.mutate({\r\n      mutation: DeleteLGAMutation,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  deleteState(id) {\r\n    return this.apollo.mutate({\r\n      mutation: DeleteStatesMutation,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  deleteMarket(id) {\r\n    return this.apollo.mutate({\r\n      mutation: DeleteMarketMutation,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  deleteCrop(id) {\r\n    return this.apollo.mutate({\r\n      mutation: DeleteCropMutation,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  deleteFarmDemo(id) {\r\n    return this.apollo.mutate({\r\n      mutation: DeleteFarmdemo,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  deleteProduct(id) {\r\n    return this.apollo.mutate({\r\n      mutation: DeleteRetailerProduct,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  deleteFile(id) {\r\n    return this.apollo.mutate({\r\n      mutation: DeleteFile,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  deleteUser(id) {\r\n    return this.apollo.mutate({\r\n      mutation: DeleteUser,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  deleteBestPractice(id) {\r\n    return this.apollo.mutate({\r\n      mutation: DeleteBestPractice,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  deleteActivity(id) {\r\n    return this.apollo.mutate({\r\n      mutation: DeleteActivity,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  DeleteMarketplaceProduct(id) {\r\n    return this.apollo.mutate({\r\n      mutation: DeleteMarketplaceProduct,\r\n      variables: {\r\n        id: id,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  getDashboardAd() {\r\n    return this.apollo.watchQuery({\r\n      query: getDashboardAd,\r\n      fetchPolicy: \"no-cache\",\r\n    });\r\n  }\r\n  getRetailerAd() {\r\n    return this.apollo.watchQuery({\r\n      query: getRetailerAd,\r\n      fetchPolicy: \"no-cache\",\r\n    });\r\n  }\r\n  updateRetailerAd(url, image) {\r\n    return this.apollo.mutate({\r\n      mutation: updateRetailerAd,\r\n      variables: {\r\n        clickUrl: url,\r\n        imageId: image,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n  updateDashboardAd(url, image) {\r\n    return this.apollo.mutate({\r\n      mutation: updateDashboardAd,\r\n      variables: {\r\n        clickUrl: url,\r\n        imageId: image,\r\n      },\r\n      errorPolicy: \"all\",\r\n    });\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\n\r\nimport { IconSetService } from '@coreui/icons-angular';\r\nimport { freeSet } from '@coreui/icons';\r\n\r\n@Component({\r\n  // tslint:disable-next-line\r\n  selector: 'body',\r\n  template: '<router-outlet></router-outlet>',\r\n  providers: [IconSetService],\r\n})\r\nexport class AppComponent implements OnInit {\r\n  constructor(\r\n    private router: Router,\r\n    public iconSet: IconSetService\r\n  ) {\r\n    // iconSet singleton\r\n    iconSet.icons = { ...freeSet };\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.router.events.subscribe((evt) => {\r\n      if (!(evt instanceof NavigationEnd)) {\r\n        return;\r\n      }\r\n      window.scrollTo(0, 0);\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\r\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AgGridModule } from 'ag-grid-angular';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\n\r\nimport { AppComponent } from './app.component';\r\n// Import containers\r\nimport { DefaultLayoutComponent } from './containers';\r\nimport { P404Component } from './views/error/404.component';\r\nimport { P500Component } from './views/error/500.component';\r\nimport { LoginComponent } from './views/login/login.component';\r\n\r\n// const APP_CONTAINERS = [\r\n//   DefaultLayoutComponent\r\n// ];\r\n\r\nimport {\r\n  AppAsideModule,\r\n  AppBreadcrumbModule,\r\n  AppHeaderModule,\r\n  AppFooterModule,\r\n  AppSidebarModule,\r\n} from '@coreui/angular';\r\n\r\n// Import routing module\r\nimport { AppRoutingModule } from './app.routing';\r\n// Import 3rd party components\r\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\r\n// import { TabsModule } from 'ngx-bootstrap/tabs';\r\nimport { GraphQLModule } from './graphql.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    AgGridModule.withComponents([]),\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    AppRoutingModule,\r\n    AppAsideModule,\r\n    AppBreadcrumbModule.forRoot(),\r\n    ToastrModule.forRoot(),\r\n    AppFooterModule,\r\n    AppHeaderModule,\r\n    NgSelectModule,\r\n    AppSidebarModule,\r\n    BsDropdownModule.forRoot(),\r\n    GraphQLModule,\r\n  ],\r\n  declarations: [\r\n    AppComponent,\r\n    P404Component,\r\n    P500Component,\r\n    LoginComponent,\r\n    DefaultLayoutComponent,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: LocationStrategy,\r\n      useClass: HashLocationStrategy\r\n    },\r\n  ],\r\n  bootstrap: [ AppComponent ]\r\n})\r\nexport class AppModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n// Import Containers\r\nimport { DefaultLayoutComponent } from './containers';\r\nimport { P404Component } from './views/error/404.component';\r\nimport { P500Component } from './views/error/500.component';\r\nimport { LoginComponent } from './views/login/login.component';\r\nimport { AuthGuard } from './views/login/auth.guard';\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'dashboard',\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: '404',\r\n    component: P404Component,\r\n    data: {\r\n      title: 'Page 404'\r\n    }\r\n  },\r\n  {\r\n    path: '500',\r\n    component: P500Component,\r\n    data: {\r\n      title: 'Page 500'\r\n    }\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n    data: {\r\n      title: 'Login Page'\r\n    }\r\n  },\r\n  {\r\n    path: '',\r\n    component: DefaultLayoutComponent,\r\n    data: {\r\n      title: 'Home'\r\n    },\r\n    canActivate: [AuthGuard],\r\n    children: [\r\n      {\r\n        path: 'sms-campaigns',\r\n        loadChildren: () => import('./views/sms-campaigns/sms-campaigns.module').then(m => m.SMSCampaignsModule)\r\n      },\r\n      {\r\n        path: 'farmdemo',\r\n        loadChildren: () => import('./views/farm-demo/farm-demo.module').then(m => m.FarmDemoModule)\r\n      },\r\n      {\r\n        path: 'chat',\r\n        loadChildren: () => import('./views/chat/chat.module').then(m => m.ChatModule)\r\n      },\r\n      {\r\n        path: 'activities',\r\n        loadChildren: () => import('./views/activities/activities.module').then(m => m.ActivitiesModule)\r\n      },\r\n      {\r\n        path: 'surveys',\r\n        loadChildren: () => import('./views/surveys/surveys.module').then(m => m.SurveysModule)\r\n      },\r\n      {\r\n        path: 'marketplace',\r\n        loadChildren: () => import('./views/marketplace/marketplace.module').then(m => m.MarketplaceModule)\r\n      },\r\n      {\r\n        path: 'best-crop-practices',\r\n        loadChildren: () => import('./views/best-crop-practices/best-crop-practices.module').then(m => m.BestCropPracticesModule)\r\n      },\r\n      {\r\n        path: 'indorama_updates',\r\n        loadChildren: () => import('./views/indorama-updates/indorama-updates.module').then(m => m.IndoramaUpdatesModule)\r\n      },\r\n      {\r\n        path: 'soiltest',\r\n        loadChildren: () => import('./views/soil-test/soil-test.module').then(m => m.SoilTestModule)\r\n      },\r\n      {\r\n        path: 'cropprices',\r\n        loadChildren: () => import('./views/crop-prices/crop-prices.module').then(m => m.CropPricesModule)\r\n      },\r\n      {\r\n        path: 'dashboard',\r\n        loadChildren: () => import('./views/dashboard/dashboard.module').then(m => m.DashboardModule)\r\n      },\r\n      {\r\n        path: 'advertisement',\r\n        loadChildren: () => import('./views/advertisement/advertisement.module').then(m => m.AdvertisementModule)\r\n      },\r\n      {\r\n        path: 'retailers',\r\n        loadChildren: () => import('./views/retailers/retailers.module').then(m => m.RetailersModule)\r\n      },\r\n      {\r\n        path: 'users',\r\n        loadChildren: () => import('./views/users/users.module').then(m => m.UsersModule)\r\n      },\r\n      {\r\n        path: 'masters',\r\n        loadChildren: () => import('./views/masters/masters.module').then(m => m.MastersModule)\r\n      }\r\n    ]\r\n  },\r\n  { path: '**', component: P404Component }\r\n];\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' }) ],\r\n  exports: [ RouterModule ]\r\n})\r\nexport class AppRoutingModule {}\r\n","import { INavData } from \"@coreui/angular\";\r\n\r\nexport const navItems: INavData[] = [\r\n  // {\r\n  //   name: \"Dashboard\",\r\n  //   url: \"/dashboard\",\r\n  //   icon: \"icon-speedometer\",\r\n  //   role: \"\",\r\n  // },\r\n  {\r\n    name: \"Activities\",\r\n    url: \"/activities/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"\",\r\n  },\r\n  {\r\n    name: \"Marketplace\",\r\n    url: \"/marketplace/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"\",\r\n  },\r\n  {\r\n    name: \"Indorama Updates\",\r\n    url: \"/indorama_updates/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"\",\r\n  },\r\n  {\r\n    name: \"SMS Campaigns\",\r\n    url: \"/sms-campaigns/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"\",\r\n  },\r\n  {\r\n    name: \"Farm Demo\",\r\n    url: \"/farmdemo/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"\",\r\n  },\r\n  {\r\n    name: \"Soil Analysis\",\r\n    url: \"/soiltest/customers\",\r\n    icon: \"icon-cursor\",\r\n    role: \"\",\r\n  },\r\n  {\r\n    name: \"Crop Prices\",\r\n    url: \"/cropprices/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"\",\r\n  },\r\n  {\r\n    name: \"Retailers\",\r\n    url: \"/retailers/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"\",\r\n  },\r\n  {\r\n    name: \"Users\",\r\n    url: \"/users/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"\",\r\n  },\r\n  {\r\n    name: \"Best crop practices\",\r\n    url: \"/best-crop-practices/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"\",\r\n  },\r\n  {\r\n    name: \"Surveys\",\r\n    url: \"/surveys/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"\",\r\n  },\r\n  {\r\n    name: \"Chat\",\r\n    url: \"/chat/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"\",\r\n  },\r\n  {\r\n    name: \"Advertisement\",\r\n    url: \"/advertisement/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"\",\r\n  },\r\n  {\r\n    name: \"Masters\",\r\n    url: \"/soiltest/enquiries\",\r\n    icon: 'icon-cursor',\r\n    role: \"\",\r\n    children: [\r\n      {\r\n        name: \"States\",\r\n        url: \"/masters/States\",\r\n      },\r\n      {\r\n        name: \"LGA\",\r\n        url: \"/masters/LGA\",\r\n      },\r\n      {\r\n        name: \"Area\",\r\n        url: \"/masters/Areas\",\r\n      },\r\n      {\r\n        name: \"Villages\",\r\n        url: \"/masters/Villages\",\r\n      },\r\n      {\r\n        name: \"Markets\",\r\n        url: \"/masters/Markets\",\r\n      },\r\n      {\r\n        name: \"Crops\",\r\n        url: \"/masters/Crops\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  templateUrl: '500.component.html'\r\n})\r\nexport class P500Component {\r\n\r\n  constructor() { }\r\n\r\n}\r\n","export default \"<app-header [navbarBrandRouterLink]=\\\"['/dashboard']\\\" [fixed]=\\\"true\\\"\\r\\n  [navbarBrandFull]=\\\"{src: 'assets/img/brand/logo.png',width:200,alt: 'CartIntoCar Logo'}\\\"\\r\\n  [navbarBrandMinimized]=\\\"{src: 'assets/img/brand/logo.png', width: 200, alt: 'CartIntoCar Logo'}\\\"\\r\\n  [sidebarToggler]=\\\"'lg'\\\">\\r\\n  <ul class=\\\"nav navbar-nav ml-auto\\\">\\r\\n    {{userName}}\\r\\n    <li class=\\\"nav-item dropdown\\\" dropdown placement=\\\"bottom right\\\">\\r\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"dropdown\\\" href=\\\"#\\\" role=\\\"button\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\"\\r\\n        dropdownToggle (click)=\\\"false\\\">\\r\\n        <img src=\\\"assets/img/avatars/6.png\\\" class=\\\"img-avatar\\\" alt=\\\"admin@bootstrapmaster.com\\\" />\\r\\n      </a>\\r\\n      <div class=\\\"dropdown-menu dropdown-menu-right\\\" *dropdownMenu aria-labelledby=\\\"simple-dropdown\\\">\\r\\n        <div class=\\\"dropdown-header text-center\\\"><strong>Settings</strong></div>\\r\\n        <a class=\\\"dropdown-item\\\"><i class=\\\"fa fa-user\\\"></i>{{userName}}</a>\\r\\n        <div class=\\\"divider\\\"></div>\\r\\n        <a class=\\\"dropdown-item\\\" (click)=\\\"logout()\\\"><i class=\\\"fa fa-lock\\\"></i> Logout</a>\\r\\n      </div>\\r\\n    </li>\\r\\n  </ul>\\r\\n</app-header>\\r\\n<div class=\\\"app-body\\\">\\r\\n  <app-sidebar #appSidebar [fixed]=\\\"true\\\" [display]=\\\"'lg'\\\" [minimized]=\\\"sidebarMinimized\\\"\\r\\n    (minimizedChange)=\\\"toggleMinimize($event)\\\">\\r\\n    <app-sidebar-nav [navItems]=\\\"navItems\\\"></app-sidebar-nav>\\r\\n    <!-- <app-sidebar-minimizer></app-sidebar-minimizer> -->\\r\\n  </app-sidebar>\\r\\n  <!-- Main content -->\\r\\n  <main class=\\\"main\\\">\\r\\n    <cui-breadcrumb>\\r\\n    </cui-breadcrumb>\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n      <router-outlet></router-outlet>\\r\\n    </div>\\r\\n  </main>\\r\\n</div>\\r\\n<app-footer>\\r\\n  <span><a>Indorama Agronomy App</a> &copy; 2022 Untangle_</span>\\r\\n  <!-- <span class=\\\"ml-auto\\\">Powered by <a href=\\\"https://www.upsquad.in\\\">upsquad</a></span> -->\\r\\n</app-footer>\";","export default \"<div class=\\\"app flex-row align-items-center\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row justify-content-center\\\">\\r\\n      <div class=\\\"col-md-6\\\">\\r\\n        <div class=\\\"clearfix\\\">\\r\\n          <h1 class=\\\"float-left display-3 mr-4\\\">404</h1>\\r\\n          <h4 class=\\\"pt-3\\\">Oops! You're lost.</h4>\\r\\n          <p class=\\\"text-muted\\\">The page you are looking for was not found.</p>\\r\\n        </div>\\r\\n        <div class=\\\"input-prepend input-group\\\">\\r\\n          <div class=\\\"input-group-prepend\\\">\\r\\n            <span class=\\\"input-group-text\\\"><i class=\\\"fa fa-search\\\"></i></span>\\r\\n          </div>\\r\\n          <input id=\\\"prependedInput\\\" class=\\\"form-control\\\" size=\\\"16\\\" type=\\\"text\\\" placeholder=\\\"What are you looking for?\\\">\\r\\n          <span class=\\\"input-group-append\\\">\\r\\n            <button class=\\\"btn btn-info\\\" type=\\\"button\\\">Search</button>\\r\\n          </span>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \"<!-- <div class=\\\"app-body bg-image\\\">\\r\\n  <main class=\\\"main d-flex align-items-center\\\" style=\\\"background-color: rgba(0, 0, 0, 0.8);\\\">\\r\\n    <div class=\\\"login-box\\\">\\r\\n      <div class=\\\"card p-4\\\" style=\\\"width: fit-content;\\\">\\r\\n        <div class=\\\"card-body\\\">\\r\\n          <form>\\r\\n            <h1>Login</h1>\\r\\n            <p class=\\\"text-muted\\\">Welcome back! Please log in to your account</p>\\r\\n            <div class=\\\"input-group mb-3\\\">\\r\\n              <div class=\\\"input-group-prepend\\\">\\r\\n                <span class=\\\"input-group-text\\\"><i class=\\\"icon-user\\\"></i></span>\\r\\n              </div>\\r\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Username\\\" autocomplete=\\\"username\\\" required>\\r\\n            </div>\\r\\n            <div class=\\\"input-group mb-4\\\">\\r\\n              <div class=\\\"input-group-prepend\\\">\\r\\n                <span class=\\\"input-group-text\\\"><i class=\\\"icon-lock\\\"></i></span>\\r\\n              </div>\\r\\n              <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\" autocomplete=\\\"current-password\\\"\\r\\n                required>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-6\\\">\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary px-4\\\">Login</button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </form>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </main>\\r\\n</div> -->\\r\\n<!-- <div class=\\\"bg-image\\\"> -->\\r\\n<div class=\\\"d-md-flex h-md-100 align-items-center\\\">\\r\\n  <div class=\\\"col-md-6 p-0 bg-black h-md-100 login-screen\\\">\\r\\n    <div class=\\\"text-white d-md-flex align-items-center h-100 text-center justify-content-center\\\">\\r\\n      <div class=\\\"container-fluid bg-image\\\" style=\\\" height: 100vh \\\">\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"col-md-6 p-0 bg-white h-md-100\\\">\\r\\n    <div class=\\\"d-md-flex align-items-center h-md-100 justify-content-center\\\">\\r\\n      <div class=\\\"container-fluid fallback-image\\\" style=\\\" height: 100vh \\\">\\r\\n        <form class=\\\"login-box\\\" #usForm=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit()\\\" style=\\\"\\r\\n        background: #ffffff75;\\r\\n        padding: 20px;\\r\\n        border-radius: 10px;\\r\\n    \\\">\\r\\n          <img src='assets/img/brand/logo.png' width=\\\"300\\\" style=\\\"margin-bottom: 25px;\\\"/>\\r\\n          <h3 class=\\\"mt-3\\\">Admin Panel</h3>\\r\\n          <p class=\\\"text-muted\\\">Welcome back! Please log in to your account</p>\\r\\n          <div class=\\\"input-group mb-3\\\">\\r\\n            <div class=\\\"input-group-prepend\\\">\\r\\n              <span class=\\\"input-group-text\\\"><i class=\\\"icon-user\\\"></i></span>\\r\\n            </div>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Username\\\" id=\\\"login\\\" maxlength=\\\"80\\\" size=\\\"30\\\" ngModel\\r\\n              value=\\\"\\\" name=\\\"identifier\\\" required>\\r\\n          </div>\\r\\n          <div class=\\\"input-group mb-4\\\">\\r\\n            <div class=\\\"input-group-prepend\\\">\\r\\n              <span class=\\\"input-group-text\\\"><i class=\\\"icon-lock\\\"></i></span>\\r\\n            </div>\\r\\n            <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\" id=\\\"password\\\" size=\\\"30\\\" ngModel\\r\\n              name=\\\"password\\\" value=\\\"\\\" required>\\r\\n          </div>\\r\\n          <!-- <div class=\\\"row\\\"> -->\\r\\n          <!-- <div class=\\\"col-6\\\"> -->\\r\\n          <button type=\\\"submit\\\" class=\\\"btn btn-lg px-4\\\" style=\\\"background-color: #108D51; color: white;\\\">\\r\\n            <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm\\\" role=\\\"status\\\" aria-hidden=\\\"true\\\">\\r\\n            </span>Login\\r\\n          </button>\\r\\n          <!-- </div> -->\\r\\n          <!-- </div> -->\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n<!-- </div> -->\";","import { Injectable } from '@angular/core';\r\nimport {\r\n  Router,\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { AuthenticationService } from './authentication.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const currentUser: any = this.authenticationService.currentUserValue;\r\n    if (currentUser) {\r\n      console.log(currentUser, 'authguard', route.data.roles);\r\n      // check if route is restricted by role\r\n      if (\r\n        route.data.roles &&\r\n        route.data.roles.indexOf(currentUser.user.UserType) === -1\r\n      ) {\r\n        // role not authorised so redirect to home page\r\n        this.router.navigate(['/500']);\r\n        console.log('authguard failed');\r\n        return false;\r\n      }\r\n      // authorised so return true\r\n      return true;\r\n    }\r\n    console.log(currentUser, 'authguard il kerilla', route.data.roles);\r\n    // not logged in so redirect to login page with the return url\r\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\r\n    return false;\r\n  }\r\n}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule, {\r\n  useJit: true,\r\n  preserveWhitespaces: true\r\n})\r\n  .catch(err => console.log(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}