{"version":3,"sources":["webpack:///src/app/views/sms-campaigns/sms-campaigns.module.ts","webpack:///src/app/views/sms-campaigns/sms-campaigns.component.html","webpack:///src/app/views/sms-campaigns/sms-campaigns.component.ts","webpack:///src/app/views/sms-campaigns/sms-campaigns-routing.module.ts"],"names":["SMSCampaignsModule","imports","withComponents","forRoot","declarations","SMSCampaignsComponent","dataservice","router","fb","toastr","loading","btnLoading","disableButton","title","orders","columnDefs","Farmers","Villages","LGA","Areas","States","rowData","to","selectedRows","years","filter","messageForm","group","body","required","village","area","lga","state","rowSelection","console","log","getCropPrices","getAreas","getLGAs","getStates","getVillages","valueChanges","subscribe","result","data","cropPrices","states","stateid","lgas","lgaid","areas","areaid","villages","reset","NoOfContacts","getUsersLarge","value","usersPermissionsUsers","Array","from","x","attributes","ContactNumber","i","length","event","target","params","gridApi","api","gridColumnApi","columnApi","sizeColumnsToFit","getSelectedRows","Name","messageModal","show","request","api_token","sendMessage","template","routes","path","children","redirectTo","component","SMSCampaignsRoutingModule","forChild","exports"],"mappings":"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","file":"views-sms-campaigns-sms-campaigns-module-es5.js","sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { SMSCampaignsComponent } from './sms-campaigns.component';\r\n\r\n// Dropdowns Component\r\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\r\nimport { TabsModule } from 'ngx-bootstrap/tabs';\r\n\r\n// Buttons Routing\r\nimport { SMSCampaignsRoutingModule } from './sms-campaigns-routing.module';\r\n\r\n// Angular\r\nimport { AgGridModule } from 'ag-grid-angular';\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TabsModule,\r\n    ReactiveFormsModule,\r\n    SMSCampaignsRoutingModule,\r\n    AgGridModule.withComponents([]),\r\n    BsDropdownModule.forRoot(),\r\n    ModalModule.forRoot(),\r\n    FormsModule\r\n  ],\r\n  declarations: [\r\n    SMSCampaignsComponent,\r\n  ]\r\n})\r\nexport class SMSCampaignsModule { }\r\n","export default \"<div class=\\\"animated fadeIn\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\" style=\\\"display: flex; justify-content: space-between\\\">\\r\\n      <h2>SMS Campaigns</h2>\\r\\n      <div>\\r\\n        <!-- <button\\r\\n          type=\\\"button\\\"\\r\\n          class=\\\"btn btn-danger\\\"\\r\\n          data-toggle=\\\"modal\\\"\\r\\n          [disabled]=\\\"disableButton\\\"\\r\\n          (click)=\\\"openModal()\\\"\\r\\n        >\\r\\n          Delete\\r\\n        </button> -->\\r\\n        <!-- <button type=\\\"button\\\" [disabled]=\\\"disableButton\\\" class=\\\"btn btn-info\\\" data-toggle=\\\"modal\\\"\\r\\n          (click)=\\\"openModal('Edit')\\\">\\r\\n          Edit\\r\\n        </button> -->\\r\\n        <button type=\\\"button\\\" [disabled]=\\\"!disableButton\\\" class=\\\"btn btn-primary\\\" data-toggle=\\\"modal\\\"\\r\\n          (click)=\\\"openModal()\\\">\\r\\n          Create new campaign\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n    <!-- <p class=\\\"text-muted mx-3\\\">\\r\\n      To approve a crop price simply select and edit the record without\\r\\n      modifying the data\\r\\n    </p> -->\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n          <ag-grid-angular #agGrid style=\\\"width: 100%; height: 65vh\\\" id=\\\"myGrid\\\" class=\\\"ag-theme-alpine\\\"\\r\\n            [columnDefs]=\\\"columnDefs\\\" [rowData]=\\\"rowData\\\" [rowSelection]=\\\"rowSelection\\\"\\r\\n            (selectionChanged)=\\\"onSelectionChanged($event)\\\" (gridReady)=\\\"onGridReady($event)\\\" animateRows=\\\"true\\\">\\r\\n          </ag-grid-angular>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n<div bsModal #messageModal=\\\"bs-modal\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\"\\r\\n  aria-hidden=\\\"true\\\">\\r\\n  <div class=\\\"modal-dialog modal-dialog-centered\\\" role=\\\"document\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <div class=\\\"modal-header\\\">\\r\\n        <h4 class=\\\"modal-title\\\">New Campaign</h4>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" (click)=\\\"messageModal.hide()\\\" aria-label=\\\"Close\\\">\\r\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n        </button>\\r\\n      </div>\\r\\n      <div class=\\\"modal-body\\\">\\r\\n        <form [formGroup]=\\\"messageForm\\\" (ngSubmit)=\\\"sendMessage()\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"state\\\">State</label>\\r\\n                <select class=\\\"form-control\\\" id=\\\"state\\\" ngModel (change)=\\\"filterLGA($event)\\\" name=\\\"state\\\"\\r\\n                  formControlName=\\\"state\\\">\\r\\n                  <option value=\\\"\\\" disabled selected hidden>\\r\\n                    Choose...\\r\\n                  </option>\\r\\n                  <option *ngFor=\\\"let item of States\\\" value=\\\"{{ item.id }}\\\">\\r\\n                    {{ item.attributes.Name }}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"area\\\">Area</label>\\r\\n                <select class=\\\"form-control\\\" id=\\\"area\\\" ngModel (change)=\\\"filterVillage($event)\\\" name=\\\"area\\\" formControlName=\\\"area\\\">\\r\\n                  <option value=\\\"\\\" disabled selected hidden>\\r\\n                    Choose...\\r\\n                  </option>\\r\\n                  <option *ngFor=\\\"let item of Areas\\\" value=\\\"{{ item.id }}\\\">\\r\\n                    {{ item.attributes.Name }}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"lga\\\">LGA</label>\\r\\n                <select class=\\\"form-control\\\" id=\\\"lga\\\" ngModel (change)=\\\"filterArea($event)\\\" name=\\\"lga\\\" formControlName=\\\"lga\\\">\\r\\n                  <option value=\\\"\\\" disabled selected hidden>\\r\\n                    Choose...\\r\\n                  </option>\\r\\n                  <option *ngFor=\\\"let item of LGA\\\" value=\\\"{{ item.id }}\\\">\\r\\n                    {{ item.attributes.Name }}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"village\\\">Village</label>\\r\\n                <select class=\\\"form-control\\\" id=\\\"village\\\" ngModel name=\\\"village\\\" formControlName=\\\"village\\\">\\r\\n                  <option value=\\\"\\\" disabled selected hidden>\\r\\n                    Choose...\\r\\n                  </option>\\r\\n                  <option *ngFor=\\\"let item of Villages\\\" value=\\\"{{ item.id }}\\\">\\r\\n                    {{ item.attributes.Name }}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            Farmers selected : {{NoOfContacts}}\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"clearSearch()\\\">\\r\\n              Clear\\r\\n            </button>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary ml-2\\\" (click)=\\\"getUsers()\\\">\\r\\n              <span *ngIf=\\\"btnLoading\\\" class=\\\"spinner-border spinner-border-sm\\\" role=\\\"status\\\" aria-hidden=\\\"true\\\"></span>\\r\\n              Search\\r\\n            </button>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"name\\\">Message body</label>\\r\\n            <textarea rows=\\\"5\\\" class=\\\"form-control\\\" id=\\\"body\\\" name=\\\"body\\\" formControlName=\\\"body\\\"\\r\\n              placeholder=\\\"Max 160 characters\\\"></textarea>\\r\\n          </div>\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"messageModal.hide()\\\">\\r\\n            Close\\r\\n          </button>\\r\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary ml-2\\\" [disabled]=\\\"btnLoading || !messageForm.valid\\\">\\r\\n            <span *ngIf=\\\"btnLoading\\\" class=\\\"spinner-border spinner-border-sm\\\" role=\\\"status\\\" aria-hidden=\\\"true\\\"></span>\\r\\n            Create\\r\\n          </button>\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n    <!-- /.modal-content -->\\r\\n  </div>\\r\\n  <!-- /.modal-dialog -->\\r\\n</div>\";","import { Component, ViewChild } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\nimport { DataService } from \"../../data.service\";\r\n// import { ActionRenderer } from \"../../utils/StatusRenderer\";\r\nimport { SmsColumn } from \"../../constants/columnMetadata\";\r\nimport { ModalDirective } from \"ngx-bootstrap/modal\";\r\n\r\n@Component({\r\n  templateUrl: \"sms-campaigns.component.html\",\r\n})\r\nexport class SMSCampaignsComponent {\r\n  rowSelection: string;\r\n  constructor(\r\n    public dataservice: DataService,\r\n    public router: Router,\r\n    private fb: FormBuilder,\r\n    private toastr: ToastrService\r\n  ) {\r\n    this.columnDefs = [...SmsColumn];\r\n    this.rowSelection = \"single\";\r\n  }\r\n  @ViewChild(\"messageModal\") public messageModal: ModalDirective;\r\n  @ViewChild(\"detailsModal\") public detailsModal: ModalDirective;\r\n\r\n  loading = true;\r\n  btnLoading = false;\r\n  disableButton = true;\r\n  title = \"Verification\";\r\n  orders: any = {};\r\n  columnDefs = [];\r\n  Farmers: any = [];\r\n  Villages: any = [];\r\n  LGA: any = [];\r\n  Areas: any = [];\r\n  States: any = [];\r\n  rowData: any = [];\r\n  to: any = \"\";\r\n  selectedRows: any = [];\r\n  years: any = [];\r\n  private gridApi;\r\n  private gridColumnApi;\r\n  filter: any = {};\r\n  NoOfContacts;\r\n\r\n  messageForm = this.fb.group({\r\n    body: [\"\", Validators.required],\r\n    village: [\"\"],\r\n    area: [\"\"],\r\n    lga: [\"\"],\r\n    state: [\"\"],\r\n  });\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    console.log(this.router);\r\n    this.getCropPrices();\r\n    this.getAreas();\r\n    this.getLGAs();\r\n    this.getStates();\r\n    this.getVillages();\r\n  }\r\n  getCropPrices() {\r\n    this.dataservice.getCropPrices().valueChanges.subscribe((result: any) => {\r\n      console.log(\"getCropPrices\", result.data.cropPrices.data);\r\n      this.rowData = result.data.cropPrices.data;\r\n    });\r\n  }\r\n  getStates() {\r\n    this.dataservice.getStates().valueChanges.subscribe((result: any) => {\r\n      console.log(\"getStates\", result.data.states.data);\r\n      this.States = result.data.states.data;\r\n    });\r\n  }\r\n  getLGAs(stateid?) {\r\n    this.dataservice.getLGAs(stateid).valueChanges.subscribe((result: any) => {\r\n      console.log(\"getLGAs\", result.data.lgas.data);\r\n      this.LGA = result.data.lgas.data;\r\n    });\r\n  }\r\n  getAreas(lgaid?) {\r\n    this.dataservice.getAreas(lgaid).valueChanges.subscribe((result: any) => {\r\n      console.log(\"getAreas\", result.data.areas.data);\r\n      this.Areas = result.data.areas.data;\r\n    });\r\n  }\r\n  getVillages(areaid?) {\r\n    this.dataservice\r\n      .getVillages(areaid)\r\n      .valueChanges.subscribe((result: any) => {\r\n        console.log(\"getVillages\", result.data.villages.data);\r\n        this.Villages = result.data.villages.data;\r\n      });\r\n  }\r\n  clearSearch() {\r\n    this.messageForm.reset();\r\n    this.Farmers = [];\r\n    this.NoOfContacts = 0;\r\n  }\r\n  getUsers() {\r\n    this.dataservice\r\n      .getUsersLarge(\"Farmer\", this.messageForm.value)\r\n      .valueChanges.subscribe((result: any) => {\r\n        console.log(\"getVillages\", result.data.usersPermissionsUsers.data);\r\n        this.Farmers = Array.from(\r\n          result.data.usersPermissionsUsers.data,\r\n          (x: any) => x.attributes.ContactNumber\r\n        );\r\n        for (let i = 0; i < this.Farmers.length; i++) {\r\n          if (this.Farmers[i]) {\r\n            this.to = this.to + this.Farmers[i] + \",\";\r\n          }\r\n        }\r\n        this.NoOfContacts = this.Farmers.length;\r\n        console.log(\"farmers\", this.Farmers, this.to);\r\n      });\r\n  }\r\n  filterLGA(event) {\r\n    this.getLGAs(event.target.value);\r\n  }\r\n  filterArea(event) {\r\n    this.getAreas(event.target.value);\r\n  }\r\n  filterVillage(event) {\r\n    this.getVillages(event.target.value);\r\n  }\r\n  onGridReady(params) {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.gridApi.sizeColumnsToFit();\r\n  }\r\n  onRowClicked(event: any) {\r\n    console.log(\"row\", event.data);\r\n  }\r\n  onSelectionChanged(event: any) {\r\n    this.selectedRows = this.gridApi.getSelectedRows();\r\n    if (this.selectedRows.length > 0) {\r\n      this.disableButton = false;\r\n    } else {\r\n      this.disableButton = true;\r\n    }\r\n    console.log(this.selectedRows, this.selectedRows[0].attributes.Name);\r\n  }\r\n  openModal(data: any) {\r\n    this.messageModal.show();\r\n  }\r\n  sendMessage() {\r\n    console.log(this.messageForm.value, \"sendmessage\");\r\n    let request = {\r\n      api_token: \"sw4evLMU9UOK1WFHsarICwcvDnyGN3sVSANPo2VyWX7q6CZ5sNr9OCYKRyQ5\",\r\n      to: this.to,\r\n      from: \"INDORAMA\",\r\n      body: this.messageForm.value?.body,\r\n    };\r\n    this.dataservice\r\n    .sendMessage(request)\r\n    .subscribe((result: any) => {\r\n      console.log(\"response\", result);\r\n      // this.toastr.success(\"Success!\");\r\n      // if (result.data.deleteRetailerProduct) {\r\n      //   this.toastr.success(\"Success!\");\r\n      //   this.deleteModal.hide();\r\n      //   this.getTest();\r\n      // } else {\r\n      //   this.toastr.error(\"Failed!\");\r\n      // }\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {SMSCampaignsComponent } from './sms-campaigns.component';\r\nimport { AuthGuard } from '../login/auth.guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    \r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'sms-campaigns'\r\n      },\r\n      {\r\n        path: 'all',\r\n        // canActivate: [AuthGuard],\r\n        component: SMSCampaignsComponent,\r\n        data: {\r\n          title: 'SMS'\r\n        }\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class SMSCampaignsRoutingModule {}\r\n"]}