{"version":3,"sources":["webpack:///src/app/views/surveys/surveys-detail.component.html","webpack:///src/app/views/surveys/surveys.module.ts","webpack:///src/app/views/surveys/surveys.component.html","webpack:///src/app/views/surveys/surveys-add.component.ts","webpack:///src/app/views/surveys/surveys-add.component.html","webpack:///src/app/views/surveys/surveys-routing.module.ts","webpack:///src/app/views/surveys/surveys.component.ts","webpack:///src/app/views/surveys/surveys-detail.component.ts"],"names":["SurveysModule","imports","withComponents","forRoot","declarations","NewSurveyComponent","dataservice","activatedRouter","router","fb","toastr","loading","btnLoading","isText","dateConverter","questions","addForm","group","FieldName","required","__typename","FieldType","FieldKey","Mandatory","Values","params","subscribe","id","console","log","value","replace","length","split","push","event","target","item","splice","SurveyDescription","SurveyTitle","resp","createSurveys","result","data","createSurveyForm","success","navigate","error","template","routes","path","children","redirectTo","component","title","SurveysRoutingModule","forChild","exports","SurveysComponent","disableButton","disableNextButton","disablePrevButton","pageSize","count","columnDefs","cropPriceForm","crop","state","market","Price","Unit","Image","rowData","selectedRows","selectedYear","Date","getFullYear","years","filter","file","rowSelection","getSurveys","page","valueChanges","surveyForms","meta","pagination","pageCount","gridApi","api","gridColumnApi","columnApi","sizeColumnsToFit","getSelectedRows","SurveyDetailsComponent","getSurveyDetails","getSurveyResults","body","surveyResults","deleteSurvey","deleteSurveyForm","deleteModal","hide"],"mappings":"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","file":"views-surveys-surveys-module-es5.js","sourcesContent":["export default \"<div class=\\\"animated fadeIn\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\" style=\\\"display: flex; justify-content: space-between\\\">\\r\\n      <h2>Survey details</h2>\\r\\n      <span>\\r\\n        <div>\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-toggle=\\\"modal\\\" (click)=\\\"myModal.show()\\\">\\r\\n            Download responses\\r\\n          </button>\\r\\n          <button\\r\\n            type=\\\"button\\\"\\r\\n            class=\\\"btn btn-danger\\\"\\r\\n            data-toggle=\\\"modal\\\"\\r\\n            (click)=\\\"deleteModal.show()\\\"\\r\\n          >\\r\\n            Delete\\r\\n          </button>\\r\\n        </div>\\r\\n      </span>\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <div class=\\\"row p-2\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"title\\\">Survey Title</label>\\r\\n          <h5>{{questions?.attributes?.SurveyTitle}}</h5>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"row p-2\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"title\\\">Survey Description</label>\\r\\n          <h5>{{questions?.attributes?.SurveyDescription}}</h5>\\r\\n        </div>\\r\\n      </div>\\r\\n      <h6>Survey Questions</h6>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col\\\">\\r\\n          <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\" *ngFor=\\\"let item of questions?.attributes?.Fields;let indexOfelement=index;\\\">\\r\\n              <div style=\\\"display: flex; justify-content: space-between\\\">\\r\\n                <h5 class=\\\"card-title\\\">{{item.FieldName}}</h5>\\r\\n                <!-- <button type=\\\"button\\\" class=\\\"btn btn-outline-danger\\\" data-toggle=\\\"modal\\\"\\r\\n                  (click)=\\\"deleteQuestion(indexOfelement)\\\">\\r\\n                  Delete\\r\\n                </button> -->\\r\\n              </div>\\r\\n              <p class=\\\"card-text\\\">\\r\\n                Question type : {{returnQuesType(item.__component)}}\\r\\n              </p>\\r\\n              <p class=\\\"card-text\\\">\\r\\n                Field type : {{item.FieldType}}\\r\\n              </p>\\r\\n              <p class=\\\"card-text\\\">\\r\\n                Required : {{item.Mandatory}}\\r\\n              </p>\\r\\n              <p *ngIf=\\\"item.Values\\\" class=\\\"card-text\\\">\\r\\n                Options : <span *ngFor=\\\"let option of item.Values\\\" class=\\\"badge badge-success mx-1\\\">{{option}}</span>\\r\\n              </p>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n<div\\r\\n    bsModal\\r\\n    #deleteModal=\\\"bs-modal\\\"\\r\\n    class=\\\"modal fade\\\"\\r\\n    tabindex=\\\"-1\\\"\\r\\n    role=\\\"dialog\\\"\\r\\n    aria-labelledby=\\\"myModalLabel\\\"\\r\\n    aria-hidden=\\\"true\\\"\\r\\n  >\\r\\n    <div class=\\\"modal-dialog modal-dialog-centered modal-sm\\\">\\r\\n      <div class=\\\"modal-content\\\">\\r\\n        <div class=\\\"modal-body text-center\\\">\\r\\n          This will permanently delete the survey. Are you sure?\\r\\n        </div>\\r\\n        <div class=\\\"modal-footer justify-content-around\\\">\\r\\n          <button\\r\\n            type=\\\"button\\\"\\r\\n            class=\\\"btn btn-secondary\\\"\\r\\n            (click)=\\\"deleteModal.hide()\\\"\\r\\n          >\\r\\n            No! Cancel.\\r\\n          </button>\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"deleteSurvey()\\\">\\r\\n            Yes! Delete.\\r\\n          </button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\";","import { CommonModule } from \"@angular/common\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { SurveysComponent } from \"./surveys.component\";\r\n// Dropdowns Component\r\nimport { BsDropdownModule } from \"ngx-bootstrap/dropdown\";\r\nimport { TabsModule } from \"ngx-bootstrap/tabs\";\r\n// Buttons Routing\r\nimport { SurveysRoutingModule } from \"./surveys-routing.module\";\r\n// Angular\r\nimport { AgGridModule } from \"ag-grid-angular\";\r\nimport { ModalModule } from \"ngx-bootstrap/modal\";\r\nimport { SurveyDetailsComponent } from \"./surveys-detail.component\";\r\nimport { NewSurveyComponent } from \"./surveys-add.component\";\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TabsModule,\r\n    ReactiveFormsModule,\r\n    AgGridModule.withComponents([]),\r\n    SurveysRoutingModule,\r\n    BsDropdownModule.forRoot(),\r\n    ModalModule.forRoot(),\r\n    FormsModule,\r\n  ],\r\n  declarations: [SurveysComponent, SurveyDetailsComponent, NewSurveyComponent],\r\n})\r\nexport class SurveysModule {}\r\n","export default \"<div class=\\\"animated fadeIn\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n    <div\\r\\n      class=\\\"card-header\\\"\\r\\n      style=\\\"display: flex; justify-content: space-between\\\"\\r\\n    >\\r\\n      <h2>Surveys</h2>\\r\\n      <div>\\r\\n        <!-- <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" data-toggle=\\\"modal\\\" [disabled]=\\\"disableButton\\\"\\r\\n          (click)=\\\"deleteModal.show()\\\">\\r\\n          Delete\\r\\n        </button>\\r\\n        <button type=\\\"button\\\" [disabled]=\\\"disableButton\\\" class=\\\"btn btn-info\\\" data-toggle=\\\"modal\\\"\\r\\n          (click)=\\\"openModal('Edit')\\\">\\r\\n          Edit\\r\\n        </button> -->\\r\\n        <a\\r\\n          type=\\\"button\\\"\\r\\n          class=\\\"btn btn-primary\\\"\\r\\n          data-toggle=\\\"modal\\\"\\r\\n          href=\\\"/#/surveys/new_survey\\\"\\r\\n        >\\r\\n          Add New Survey\\r\\n        </a>\\r\\n      </div>\\r\\n    </div>\\r\\n    <!-- <p class=\\\"text-muted mx-3\\\">\\r\\n      To approve a crop price simply select and edit the record without\\r\\n      modifying the data\\r\\n    </p> -->\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n          <ag-grid-angular\\r\\n            #agGrid\\r\\n            style=\\\"width: 100%; height: 65vh\\\"\\r\\n            id=\\\"myGrid\\\"\\r\\n            class=\\\"ag-theme-alpine\\\"\\r\\n            [columnDefs]=\\\"columnDefs\\\"\\r\\n            [rowData]=\\\"rowData\\\"\\r\\n            [rowSelection]=\\\"rowSelection\\\"\\r\\n            (selectionChanged)=\\\"onSelectionChanged($event)\\\"\\r\\n            (gridReady)=\\\"onGridReady($event)\\\"\\r\\n            animateRows=\\\"true\\\"\\r\\n          >\\r\\n          </ag-grid-angular>\\r\\n          <button\\r\\n            type=\\\"button\\\"\\r\\n            [disabled]=\\\"disableNextButton\\\"\\r\\n            class=\\\"btn btn-primary float-right m-2\\\"\\r\\n            (click)=\\\"loadNext()\\\"\\r\\n          >\\r\\n            Next\\r\\n          </button>\\r\\n          <span class=\\\"float-right mt-3\\\"\\r\\n            >Page {{ meta?.pagination?.page }} of\\r\\n            {{ meta?.pagination?.pageCount }}</span\\r\\n          >\\r\\n          <button\\r\\n            type=\\\"button\\\"\\r\\n            [disabled]=\\\"disablePrevButton\\\"\\r\\n            class=\\\"btn btn-primary float-right m-2\\\"\\r\\n            (click)=\\\"loadPrev()\\\"\\r\\n          >\\r\\n            Prev\\r\\n          </button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { Component, OnInit } from \"@angular/core\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\nimport { DataService } from \"../../data.service\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { dateConverter } from \"../../constants/columnMetadata\";\r\n\r\n@Component({\r\n  templateUrl: \"surveys-add.component.html\",\r\n})\r\nexport class NewSurveyComponent implements OnInit {\r\n  constructor(\r\n    public dataservice: DataService,\r\n    private activatedRouter: ActivatedRoute,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private toastr: ToastrService\r\n  ) {}\r\n\r\n  id: any;\r\n  loading = true;\r\n  btnLoading = false;\r\n  isText = true;\r\n  dateConverter = dateConverter;\r\n  questions = [];\r\n  SurveyDescription;\r\n  SurveyTitle;\r\n  addForm = this.fb.group({\r\n    FieldName: [\"\", Validators.required],\r\n    __typename: [\"\", Validators.required],\r\n    FieldType: [\"\", Validators.required],\r\n    FieldKey: [\"\"],\r\n    Mandatory: [false],\r\n    Values: [\"\"],\r\n  });\r\n\r\n  ngOnInit(): void {\r\n    this.activatedRouter.params.subscribe((params) => {\r\n      this.id = params[\"id\"];\r\n    });\r\n  }\r\n  questionSubmit() {\r\n    console.log(this.addForm.value);\r\n    this.addForm.value.FieldKey = this.addForm.value.FieldName.replace(\r\n      /[^A-Z0-9]/gi,\r\n      \"_\"\r\n    );\r\n    if (this.addForm?.value?.Values?.length > 0) {\r\n      this.addForm.value.Values = this.addForm?.value?.Values?.split(\",\");\r\n    }\r\n    this.questions.push(this.addForm.value);\r\n    this.addForm = this.fb.group({\r\n      FieldName: [\"\", Validators.required],\r\n      __typename: [\"\", Validators.required],\r\n      FieldType: [\"\", Validators.required],\r\n      FieldKey: [\"\"],\r\n      Mandatory: [false],\r\n      Values: [\"\"],\r\n    });\r\n    console.log(this.questions);\r\n  }\r\n  onQuestionTypeChange(event) {\r\n    if (event.target.value == \"ComponentSurveySurveyTextComponent\") {\r\n      this.isText = true;\r\n    } else {\r\n      this.isText = false;\r\n    }\r\n    this.addForm.value.FieldType = \"\";\r\n    console.log(event.target.value, this.isText);\r\n  }\r\n  deleteQuestion(item) {\r\n    console.log(item);\r\n    this.questions.splice(item, 1);\r\n  }\r\n  onSurveyDescriptionChange(event) {\r\n    this.SurveyDescription = event.target.value;\r\n  }\r\n  onSurveyTitleChange(event) {\r\n    this.SurveyTitle = event.target.value;\r\n  }\r\n  formSubmit() {\r\n    let resp = {};\r\n    console.log(this.addForm.value);\r\n    this.dataservice\r\n      .createSurveys(this.SurveyTitle, this.SurveyDescription, this.questions)\r\n      .subscribe((result: any) => {\r\n        resp = result.data;\r\n        console.log(\"response\", result);\r\n        if (result.data.createSurveyForm) {\r\n          this.toastr.success(\"Farm demo added successfully!\");\r\n          this.router.navigate([\"/surveys/all\"]);\r\n        } else {\r\n          this.toastr.error(\"Failed. Please check the fields!\");\r\n        }\r\n      });\r\n  }\r\n}\r\n","export default \"<div class=\\\"animated fadeIn\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\" style=\\\"display: flex; justify-content: space-between\\\">\\r\\n      <h2>Add New Survey</h2>\\r\\n      <span>\\r\\n        <div>\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"formSubmit()\\\">\\r\\n            Create Survey\\r\\n          </button>\\r\\n        </div>\\r\\n      </span>\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"SurveyTitle\\\">Survey Title</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"SurveyTitle\\\" name=\\\"SurveyTitle\\\" (change)=\\\"onSurveyTitleChange($event)\\\" placeholder=\\\"Enter survey title\\\" />\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"SurveyDescription\\\">Survey Description</label>\\r\\n            <textarea type=\\\"text\\\" class=\\\"form-control\\\" rows=\\\"4\\\" id=\\\"SurveyDescription\\\" (change)=\\\"onSurveyDescriptionChange($event)\\\" name=\\\"SurveyDescription\\\"\\r\\n              placeholder=\\\"Enter survey description\\\"></textarea>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <h6 *ngIf=\\\"questions.length > 0\\\">Survey Questions</h6>\\r\\n      <div class=\\\"row\\\" *ngIf=\\\"questions.length > 0\\\">\\r\\n        <div class=\\\"col\\\">\\r\\n          <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\" *ngFor=\\\"let item of questions;let indexOfelement=index;\\\">\\r\\n              <div style=\\\"display: flex; justify-content: space-between\\\">\\r\\n                <h5 class=\\\"card-title\\\">{{item.FieldName}}</h5>\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-outline-danger\\\" data-toggle=\\\"modal\\\"\\r\\n                  (click)=\\\"deleteQuestion(indexOfelement)\\\">\\r\\n                  Delete\\r\\n                </button>\\r\\n              </div>\\r\\n              <p class=\\\"card-text\\\">\\r\\n                Question type : {{item.__typename}}\\r\\n              </p>\\r\\n              <p class=\\\"card-text\\\">\\r\\n                Required : {{item.Mandatory}}\\r\\n              </p>\\r\\n              <p *ngIf=\\\"item.Values\\\" class=\\\"card-text\\\">\\r\\n                Options : <span *ngFor=\\\"let option of item.Values\\\" class=\\\"badge badge-success mx-1\\\">{{option}}</span>\\r\\n              </p>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"row p-3\\\">\\r\\n        <form [formGroup]=\\\"addForm\\\" (ngSubmit)=\\\"questionSubmit()\\\" style=\\\"width: 100%;\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"FieldName\\\">Question</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"FieldName\\\" name=\\\"FieldName\\\" formControlName=\\\"FieldName\\\"\\r\\n                  placeholder=\\\"Enter your question\\\">\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"title\\\">Question type</label>\\r\\n                <select class=\\\"form-control\\\" id=\\\"__typename\\\" name=\\\"__typename\\\" (change)=\\\"onQuestionTypeChange($event)\\\"\\r\\n                  formControlName=\\\"__typename\\\">\\r\\n                  <option value=\\\"\\\" disabled selected hidden>\\r\\n                    Choose...\\r\\n                  </option>\\r\\n                  <option value=\\\"ComponentSurveySurveyTextComponent\\\">Text</option>\\r\\n                  <option value=\\\"ComponentSurveySurveySelectionComponent\\\">Dropdown</option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"FieldType\\\">Field type</label>\\r\\n                <select class=\\\"form-control\\\" id=\\\"FieldType\\\" name=\\\"FieldType\\\" formControlName=\\\"FieldType\\\">\\r\\n                  <option value=\\\"\\\" disabled selected hidden>\\r\\n                    Choose...\\r\\n                  </option>\\r\\n                  <option *ngIf=\\\"isText\\\" value=\\\"TextLong\\\">Long answer</option>\\r\\n                  <option *ngIf=\\\"isText\\\" value=\\\"TextShort\\\">Short answer</option>\\r\\n                  <option *ngIf=\\\"!isText\\\" value=\\\"Selection\\\">Selection</option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\" *ngIf=\\\"!isText\\\">\\r\\n            <div class=\\\"col\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"Values\\\">Options</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"Values\\\" name=\\\"Values\\\" formControlName=\\\"Values\\\"\\r\\n                  placeholder=\\\"Enter options seperated by comma ( , )\\\">\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <div class=\\\"form-check\\\">\\r\\n              <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" id=\\\"Mandatory\\\" name=\\\"Mandatory\\\"\\r\\n                formControlName=\\\"Mandatory\\\">\\r\\n              <label class=\\\"form-check-label\\\" for=\\\"Mandatory\\\">Required field</label>\\r\\n            </div>\\r\\n          </div>\\r\\n          <button type=\\\"submit\\\" class=\\\"btn btn-outline-primary ml-2\\\" [disabled]=\\\"!addForm.valid\\\">\\r\\n            Add question\\r\\n          </button>\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { NewSurveyComponent } from './surveys-add.component';\r\nimport { SurveyDetailsComponent } from './surveys-detail.component';\r\nimport { SurveysComponent } from './surveys.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    \r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'cropprices'\r\n      },\r\n      {\r\n        path: 'all',\r\n        // canActivate: [AuthGuard],\r\n        component: SurveysComponent,\r\n        data: {\r\n          // roles: 'MANAGER',\r\n          title: 'Surveys'\r\n        }\r\n      },\r\n      {\r\n        path: 'new_survey',\r\n        // canActivate: [AuthGuard],\r\n        component: NewSurveyComponent,\r\n        data: {\r\n          // roles: 'MANAGER',\r\n          title: 'New Survey'\r\n        }\r\n      },{\r\n        path: 'survey_details/:id',\r\n        // canActivate: [AuthGuard],\r\n        component: SurveyDetailsComponent,\r\n        data: {\r\n          // roles: 'MANAGER',\r\n          title: 'Survey details'\r\n        }\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class SurveysRoutingModule {}\r\n","import { Component } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\nimport { DataService } from \"../../data.service\";\r\nimport { SurveysColumn } from \"../../constants/columnMetadata\";\r\n\r\n@Component({\r\n  templateUrl: \"surveys.component.html\",\r\n})\r\nexport class SurveysComponent {\r\n  rowSelection: string;\r\n  constructor(\r\n    public dataservice: DataService,\r\n    public router: Router,\r\n    private fb: FormBuilder,\r\n    private toastr: ToastrService\r\n  ) {\r\n    this.columnDefs = [...SurveysColumn];\r\n    this.rowSelection = \"single\";\r\n  }\r\n\r\n  loading = true;\r\n  btnLoading = false;\r\n  disableButton = true;\r\n  disableNextButton = false;\r\n  disablePrevButton = true;\r\n  meta;\r\n  pageSize = 100;\r\n  count = 1;\r\n  columnDefs = [];\r\n\r\n  cropPriceForm = this.fb.group({\r\n    crop: [\"\", Validators.required],\r\n    state: [\"\", Validators.required],\r\n    market: [\"\", Validators.required],\r\n    Price: [\"\", Validators.required],\r\n    Unit: [\"\", Validators.required],\r\n    Image: [\"\"],\r\n  });\r\n  rowData: any = [];\r\n  selectedRows: any = [];\r\n  selectedYear: any = new Date().getFullYear();\r\n  years: any = [];\r\n  private gridApi;\r\n  private gridColumnApi;\r\n  filter: any = {};\r\n  file: any = null;\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    console.log(this.router);\r\n    this.getSurveys(1, this.pageSize);\r\n  }\r\n  getSurveys(page?, pageSize?) {\r\n    this.dataservice\r\n      .getSurveys(page, pageSize)\r\n      .valueChanges.subscribe((result: any) => {\r\n        this.rowData = result.data.surveyForms.data;\r\n        this.meta = result.data.surveyForms.meta;\r\n        if (this.meta?.pagination?.pageCount <= 1) {\r\n          this.disablePrevButton = true;\r\n          this.disableNextButton = true;\r\n        }\r\n      });\r\n  }\r\n  loadNext() {\r\n    this.count++;\r\n    this.disablePrevButton = false;\r\n    if (this.count === this.meta.pagination.pageCount) {\r\n      this.disableNextButton = true;\r\n    }\r\n    this.dataservice\r\n      .getSurveys(this.count, this.pageSize)\r\n      .valueChanges.subscribe((result: any) => {\r\n        this.meta = result.data.surveyForms.meta;\r\n        this.rowData = result.data.surveyForms.data;\r\n      });\r\n  }\r\n  loadPrev() {\r\n    this.count--;\r\n    if (this.count < this.meta.pagination.pageCount) {\r\n      this.disableNextButton = false;\r\n    }\r\n    if (this.count === 1) {\r\n      this.disablePrevButton = true;\r\n    }\r\n    this.dataservice\r\n      .getSurveys(this.count, this.pageSize)\r\n      .valueChanges.subscribe((result: any) => {\r\n        this.meta = result.data.surveyForms.meta;\r\n        this.rowData = result.data.surveyForms.data;\r\n      });\r\n  }\r\n  onGridReady(params) {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.gridApi.sizeColumnsToFit();\r\n  }\r\n  onRowClicked(event: any) {\r\n    console.log(\"row\", event.data);\r\n  }\r\n  onSelectionChanged(event: any) {\r\n    this.selectedRows = this.gridApi.getSelectedRows();\r\n    console.log(this.selectedRows);\r\n    this.router.navigate([\"/surveys/survey_details\", this.selectedRows[0].id], {\r\n      state: { data: this.selectedRows },\r\n    });\r\n  }\r\n}\r\n","import { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { ModalDirective } from \"ngx-bootstrap/modal\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\nimport { DataService } from \"../../data.service\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { dateConverter } from \"../../constants/columnMetadata\";\r\n\r\n@Component({\r\n  templateUrl: \"surveys-detail.component.html\",\r\n})\r\nexport class SurveyDetailsComponent implements OnInit {\r\n  constructor(\r\n    public dataservice: DataService,\r\n    private activatedRouter: ActivatedRoute,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private toastr: ToastrService\r\n  ) {}\r\n  @ViewChild(\"deleteModal\") public deleteModal: ModalDirective;\r\n\r\n  id: any;\r\n  loading = true;\r\n  btnLoading = false;\r\n  rowData: any = [];\r\n  questions: any = {};\r\n\r\n  dateConverter = dateConverter;\r\n\r\n  ngOnInit(): void {\r\n    this.activatedRouter.params.subscribe((params) => {\r\n      this.id = params[\"id\"];\r\n    });\r\n    this.getSurveyDetails();\r\n    this.getSurveyResults();\r\n  }\r\n  getSurveyDetails() {\r\n    this.dataservice.getSurveyDetails(this.id).subscribe((result: any) => {\r\n      console.log(\"getSurveyDetails\", result.body.data);\r\n      this.questions = result.body.data;\r\n    });\r\n  }\r\n  getSurveyResults() {\r\n    this.dataservice\r\n      .getSurveyResults(this.id)\r\n      .valueChanges.subscribe((result: any) => {\r\n        console.log(\"getSurveyResults\", result.data.surveyResults.data);\r\n        this.rowData = result.data.surveyResults.data;\r\n      });\r\n  }\r\n  returnQuesType(data) {\r\n    if (data == \"survey.survey-selection-component\") {\r\n      return \"Dropdown\";\r\n    } else {\r\n      return \"Text\";\r\n    }\r\n  }\r\n  deleteSurvey() {\r\n    this.dataservice\r\n    .deleteSurvey(this.id)\r\n    .subscribe((result: any) => {\r\n      console.log(\"response\", result);\r\n      if (result.data.deleteSurveyForm) {\r\n        this.toastr.success(\"Success!\");\r\n        this.deleteModal.hide();\r\n        this.router.navigate([\"/surveys/all\"]);\r\n      } else {\r\n        this.toastr.error(\"Failed!\");\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}