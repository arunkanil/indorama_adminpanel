{"version":3,"sources":["webpack:///src/app/views/surveys/surveys.module.ts","webpack:///src/app/views/surveys/surveys.component.html","webpack:///src/app/views/surveys/surveys-add.component.ts","webpack:///src/app/views/surveys/surveys-add.component.html","webpack:///src/app/views/surveys/surveys-routing.module.ts","webpack:///src/app/views/surveys/surveys.component.ts"],"names":["SurveysModule","imports","withComponents","forRoot","declarations","NewSurveyComponent","dataservice","activatedRouter","router","fb","toastr","loading","btnLoading","dateConverter","params","subscribe","id","template","routes","path","children","redirectTo","component","SurveysRoutingModule","forChild","exports","SurveysComponent","disableButton","orders","columnDefs","States","Markets","Crops","cropPriceForm","group","crop","required","state","market","Price","Unit","Image","rowData","selectedRows","selectedYear","Date","getFullYear","years","filter","file","rowSelection","console","log","getCropPrices","getCrops","getMarkets","getStates","valueChanges","result","data","cropPrices","crops","states","markets","event","target","value","gridApi","api","gridColumnApi","columnApi","sizeColumnsToFit","getSelectedRows","length","attributes","Name","files","navigate","resp","upload","response","status","UpdateCropPrice","body","updateCropPrice","success","cropPriceModal","hide","deselectAll","error","AddCropPrice","createCropPrice"],"mappings":"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","file":"views-surveys-surveys-module-es5.js","sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { SurveysComponent } from './surveys.component';\r\n\r\n// Dropdowns Component\r\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\r\nimport { TabsModule } from 'ngx-bootstrap/tabs';\r\n\r\n// Buttons Routing\r\nimport { SurveysRoutingModule } from './surveys-routing.module';\r\n\r\n// Angular\r\nimport { AgGridModule } from 'ag-grid-angular';\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TabsModule,\r\n    ReactiveFormsModule,\r\n    AgGridModule.withComponents([]),\r\n    SurveysRoutingModule,\r\n    BsDropdownModule.forRoot(),\r\n    ModalModule.forRoot(),\r\n    FormsModule\r\n  ],\r\n  declarations: [\r\n    SurveysComponent,\r\n  ]\r\n})\r\nexport class SurveysModule { }\r\n","export default \"<div class=\\\"animated fadeIn\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\" style=\\\"display: flex; justify-content: space-between\\\">\\r\\n      <h2>Surveys</h2>\\r\\n      <div>\\r\\n        <!-- <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" data-toggle=\\\"modal\\\" [disabled]=\\\"disableButton\\\"\\r\\n          (click)=\\\"deleteModal.show()\\\">\\r\\n          Delete\\r\\n        </button>\\r\\n        <button type=\\\"button\\\" [disabled]=\\\"disableButton\\\" class=\\\"btn btn-info\\\" data-toggle=\\\"modal\\\"\\r\\n          (click)=\\\"openModal('Edit')\\\">\\r\\n          Edit\\r\\n        </button> -->\\r\\n        <a type=\\\"button\\\" [disabled]=\\\"!disableButton\\\" class=\\\"btn btn-primary\\\" data-toggle=\\\"modal\\\" href=\\\"/#/surveys/new_survey\\\">\\r\\n          Add New Survey\\r\\n        </a>\\r\\n      </div>\\r\\n    </div>\\r\\n    <!-- <p class=\\\"text-muted mx-3\\\">\\r\\n      To approve a crop price simply select and edit the record without\\r\\n      modifying the data\\r\\n    </p> -->\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n          <ag-grid-angular #agGrid style=\\\"width: 100%; height: 65vh\\\" id=\\\"myGrid\\\" class=\\\"ag-theme-alpine\\\"\\r\\n            [columnDefs]=\\\"columnDefs\\\" [rowData]=\\\"rowData\\\" [rowSelection]=\\\"rowSelection\\\"\\r\\n            (selectionChanged)=\\\"onSelectionChanged($event)\\\" (gridReady)=\\\"onGridReady($event)\\\" animateRows=\\\"true\\\">\\r\\n          </ag-grid-angular>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n<div bsModal #cropPriceModal=\\\"bs-modal\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\"\\r\\n  aria-hidden=\\\"true\\\">\\r\\n  <div class=\\\"modal-dialog modal-dialog-centered\\\" role=\\\"document\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <div class=\\\"modal-header\\\">\\r\\n        <h4 class=\\\"modal-title\\\">Add/Edit Listing</h4>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" (click)=\\\"cropPriceModal.hide()\\\" aria-label=\\\"Close\\\">\\r\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n        </button>\\r\\n      </div>\\r\\n      <div class=\\\"modal-body\\\">\\r\\n        <form [formGroup]=\\\"cropPriceForm\\\" (ngSubmit)=\\\"cropPriceSubmit()\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"state\\\">Category</label>\\r\\n            <select class=\\\"form-control\\\" id=\\\"state\\\" (change)=\\\"filterMarkets($event)\\\" required ngModel name=\\\"state\\\"\\r\\n              formControlName=\\\"state\\\">\\r\\n              <option value=\\\"\\\" disabled selected hidden>Choose...</option>\\r\\n              <option *ngFor=\\\"let item of States\\\" value=\\\"{{ item.id }}\\\">\\r\\n                {{ item.attributes.Name }}\\r\\n              </option>\\r\\n            </select>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"name\\\">Title</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"Title\\\" name=\\\"Title\\\" formControlName=\\\"Title\\\"\\r\\n              placeholder=\\\"Enter title\\\" />\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"name\\\">Price</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"Price\\\" name=\\\"Price\\\" formControlName=\\\"Price\\\"\\r\\n              placeholder=\\\"Enter price\\\" />\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"name\\\">Unit</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"Unit\\\" name=\\\"Unit\\\" formControlName=\\\"Unit\\\"\\r\\n              placeholder=\\\"Enter unit\\\" />\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"name\\\">Quantity</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"Quantity\\\" name=\\\"Quantity\\\" formControlName=\\\"Quantity\\\"\\r\\n              placeholder=\\\"Enter quantity\\\" />\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"name\\\">Contact Number</label>\\r\\n            <input type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"ContactNumber\\\" name=\\\"ContactNumber\\\"\\r\\n              formControlName=\\\"ContactNumber\\\" placeholder=\\\"Enter Contact number\\\" />\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"Image\\\">Image</label>\\r\\n            <div>\\r\\n              <img *ngIf=\\\"imageUrl\\\" src=\\\"{{ imageUrl }}\\\" width=\\\"100\\\" height=\\\"100\\\" style=\\\"object-fit: cover\\\" />\\r\\n            </div>\\r\\n            <input type=\\\"file\\\" class=\\\"form-control\\\" id=\\\"Image\\\" accept=\\\".jpg,.jpeg,.JPEG,.png\\\" name=\\\"Image\\\"\\r\\n              (change)=\\\"onChange($event)\\\" formControlName=\\\"Image\\\" placeholder=\\\"Choose image\\\" />\\r\\n          </div>\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"cropPriceModal.hide()\\\">\\r\\n            Close\\r\\n          </button>\\r\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary ml-2\\\" [disabled]=\\\"btnLoading || !cropPriceForm.valid\\\">\\r\\n            <span *ngIf=\\\"btnLoading\\\" class=\\\"spinner-border spinner-border-sm\\\" role=\\\"status\\\" aria-hidden=\\\"true\\\"></span>\\r\\n            Save changes\\r\\n          </button>\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n    <!-- /.modal-content -->\\r\\n  </div>\\r\\n  <!-- /.modal-dialog -->\\r\\n</div>\\r\\n<div bsModal #deleteModal=\\\"bs-modal\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\"\\r\\n  aria-hidden=\\\"true\\\">\\r\\n  <div class=\\\"modal-dialog modal-dialog-centered modal-sm\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <div class=\\\"modal-body text-center\\\">\\r\\n        Do you want to delete this record?\\r\\n      </div>\\r\\n      <div class=\\\"modal-footer justify-content-around\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"deleteModal.hide()\\\">\\r\\n          No! Cancel.\\r\\n        </button>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"deleteRecord()\\\">\\r\\n          Yes! Delete.\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\";","import { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { ModalDirective } from \"ngx-bootstrap/modal\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\nimport { DataService } from \"../../data.service\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { dateConverter } from \"../../constants/columnMetadata\";\r\n\r\n@Component({\r\n  templateUrl: \"surveys-add.component.html\",\r\n})\r\nexport class NewSurveyComponent implements OnInit {\r\n  constructor(\r\n    public dataservice: DataService,\r\n    private activatedRouter: ActivatedRoute,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private toastr: ToastrService\r\n  ) {}\r\n\r\n  id: any;\r\n  loading = true;\r\n  btnLoading = false;\r\n  dateConverter = dateConverter;\r\n  \r\n  ngOnInit(): void {\r\n    this.activatedRouter.params.subscribe((params) => {\r\n      this.id = params[\"id\"];\r\n    });\r\n  }\r\n  \r\n}\r\n","export default \"<div class=\\\"animated fadeIn\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\" style=\\\"display: flex; justify-content: space-between\\\">\\r\\n      <h2>Add New Survey</h2>\\r\\n      <span>\\r\\n        <div>\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-toggle=\\\"modal\\\" (click)=\\\"myModal.show()\\\">\\r\\n            Create Survey\\r\\n          </button>\\r\\n          <!-- <button\\r\\n          type=\\\"button\\\"\\r\\n          class=\\\"btn btn-danger\\\"\\r\\n          data-toggle=\\\"modal\\\"\\r\\n          (click)=\\\"deleteModal.show()\\\"\\r\\n        >\\r\\n          Delete\\r\\n        </button> -->\\r\\n        </div>\\r\\n      </span>\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <form [formGroup]=\\\"addForm\\\" (ngSubmit)=\\\"FormSubmit()\\\" style=\\\"width: 100%;\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"title\\\">Survey Title</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"title\\\" name=\\\"title\\\" formControlName=\\\"title\\\"\\r\\n              placeholder=\\\"Enter survey title\\\" />\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"title\\\">Survey Description</label>\\r\\n            <textarea type=\\\"text\\\" class=\\\"form-control\\\" rows=\\\"4\\\" id=\\\"description\\\" name=\\\"description\\\"\\r\\n              formControlName=\\\"description\\\" placeholder=\\\"Enter survey description\\\"></textarea>\\r\\n          </div>\\r\\n          <h6>Survey Questions</h6>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col\\\">\\r\\n              <div class=\\\"card\\\">\\r\\n                <div class=\\\"card-body\\\">\\r\\n                  <div style=\\\"display: flex; justify-content: space-between\\\">\\r\\n                    <h5 class=\\\"card-title\\\">What is your category?</h5>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-outline-danger\\\" data-toggle=\\\"modal\\\">\\r\\n                      Delete\\r\\n                    </button>\\r\\n                  </div>\\r\\n                  <p class=\\\"card-text\\\">\\r\\n                    Question type : Dropdown\\r\\n                  </p>\\r\\n                  <p class=\\\"card-text\\\">\\r\\n                    Required : True\\r\\n                  </p>\\r\\n                  <p class=\\\"card-text\\\">\\r\\n                    Options : <span class=\\\"badge badge-success\\\">Farmer</span> <span\\r\\n                      class=\\\"badge badge-success\\\">Retailer</span>\\r\\n                  </p>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"title\\\">Question</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"question\\\" name=\\\"question\\\" formControlName=\\\"question\\\"\\r\\n                  placeholder=\\\"Enter your question\\\">\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"title\\\">Question type</label>\\r\\n                <select class=\\\"form-control\\\" id=\\\"question_type\\\" name=\\\"question_type\\\" formControlName=\\\"question_type\\\">\\r\\n                  <option value=\\\"\\\" disabled selected hidden>\\r\\n                    Choose...\\r\\n                  </option>\\r\\n                  <option value=\\\"text\\\">Text</option>\\r\\n                  <option value=\\\"dropdown\\\">Dropdown</option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"title\\\">Field type</label>\\r\\n                <select class=\\\"form-control\\\" id=\\\"question_type\\\" name=\\\"question_type\\\" formControlName=\\\"question_type\\\">\\r\\n                  <option value=\\\"\\\" disabled selected hidden>\\r\\n                    Choose...\\r\\n                  </option>\\r\\n                  <option value=\\\"long\\\">Long</option>\\r\\n                  <option value=\\\"short\\\">Short</option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"title\\\">Options</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"question\\\" name=\\\"question\\\" formControlName=\\\"question\\\"\\r\\n                  placeholder=\\\"Enter options seperated by comma ( , )\\\">\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <div class=\\\"form-check\\\">\\r\\n              <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" id=\\\"flexSwitchCheckDefault\\\">\\r\\n              <label class=\\\"form-check-label\\\" for=\\\"flexSwitchCheckDefault\\\">Required field</label>\\r\\n            </div>\\r\\n          </div>\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-outline-primary ml-2\\\">\\r\\n            <span *ngIf=\\\"btnLoading\\\" class=\\\"spinner-border spinner-border-sm\\\" role=\\\"status\\\" aria-hidden=\\\"true\\\"></span>\\r\\n            Add question\\r\\n          </button>\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { NewSurveyComponent } from './surveys-add.component';\r\nimport { SurveysComponent } from './surveys.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    \r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'cropprices'\r\n      },\r\n      {\r\n        path: 'all',\r\n        // canActivate: [AuthGuard],\r\n        component: SurveysComponent,\r\n      },\r\n      {\r\n        path: 'new_survey',\r\n        // canActivate: [AuthGuard],\r\n        component: NewSurveyComponent,\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class SurveysRoutingModule {}\r\n","import { Component, ViewChild } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\nimport { DataService } from \"../../data.service\";\r\nimport { SurveysColumn } from \"../../constants/columnMetadata\";\r\nimport { ModalDirective } from \"ngx-bootstrap/modal\";\r\n\r\n@Component({\r\n  templateUrl: \"surveys.component.html\",\r\n})\r\nexport class SurveysComponent {\r\n  rowSelection: string;\r\n  constructor(\r\n    public dataservice: DataService,\r\n    public router: Router,\r\n    private fb: FormBuilder,\r\n    private toastr: ToastrService\r\n  ) {\r\n    this.columnDefs = [...SurveysColumn];\r\n    this.rowSelection = \"single\";\r\n  }\r\n  @ViewChild(\"cropPriceModal\") public cropPriceModal: ModalDirective;\r\n  @ViewChild(\"detailsModal\") public detailsModal: ModalDirective;\r\n  @ViewChild(\"deleteModal\") public deleteModal: ModalDirective;\r\n\r\n  loading = true;\r\n  btnLoading = false;\r\n  disableButton = true;\r\n  orders: any = {};\r\n  columnDefs = [];\r\n  States: any = [];\r\n  Markets: any = [];\r\n  Crops: any = [];\r\n  imageUrl;\r\n\r\n  cropPriceForm = this.fb.group({\r\n    crop: [\"\", Validators.required],\r\n    state: [\"\", Validators.required],\r\n    market: [\"\", Validators.required],\r\n    Price: [\"\", Validators.required],\r\n    Unit: [\"\", Validators.required],\r\n    Image: [\"\"],\r\n  });\r\n  rowData: any = [];\r\n  selectedRows: any = [];\r\n  selectedYear: any = new Date().getFullYear();\r\n  years: any = [];\r\n  private gridApi;\r\n  private gridColumnApi;\r\n  filter: any = {};\r\n  file: any = null;\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    console.log(this.router);\r\n    this.getCropPrices();\r\n    this.getCrops();\r\n    this.getMarkets();\r\n    this.getStates();\r\n  }\r\n  getCropPrices() {\r\n    this.dataservice.getCropPrices().valueChanges.subscribe((result: any) => {\r\n      console.log(\"getCropPrices\", result.data.cropPrices.data);\r\n      this.rowData = result.data.cropPrices.data;\r\n    });\r\n  }\r\n  getCrops() {\r\n    this.dataservice.getCrops().valueChanges.subscribe((result: any) => {\r\n      console.log(\"getCrops\", result.data.crops.data);\r\n      this.Crops = result.data.crops.data;\r\n    });\r\n  }\r\n  getStates() {\r\n    this.dataservice.getStates().valueChanges.subscribe((result: any) => {\r\n      console.log(\"getStates\", result.data.states.data);\r\n      this.States = result.data.states.data;\r\n    });\r\n  }\r\n  getMarkets(id?) {\r\n    this.dataservice.getMarkets(id).valueChanges.subscribe((result: any) => {\r\n      console.log(\"getMarkets\", result.data.markets.data);\r\n      this.Markets = result.data.markets.data;\r\n    });\r\n  }\r\n  filterMarkets(event) {\r\n    this.getMarkets(event.target.value);\r\n  }\r\n  onGridReady(params) {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.gridApi.sizeColumnsToFit();\r\n  }\r\n  onRowClicked(event: any) {\r\n    console.log(\"row\", event.data);\r\n  }\r\n  onSelectionChanged(event: any) {\r\n    this.selectedRows = this.gridApi.getSelectedRows();\r\n    if (this.selectedRows.length > 0) {\r\n      this.disableButton = false;\r\n    } else {\r\n      this.disableButton = true;\r\n    }\r\n    console.log(this.selectedRows, this.selectedRows[0].attributes.Name);\r\n  }\r\n  // On file Select\r\n  onChange(event: any) {\r\n    this.file = event.target.files[0];\r\n    console.log(event.target.files[0]);\r\n  }\r\n  openModal(data: any) {\r\n    this.router.navigate([\"/surveys/new_survey\"]);\r\n  }\r\n  cropPriceSubmit() {\r\n    let resp = {};\r\n    console.log(this.cropPriceForm.value);\r\n    if (!this.disableButton) {\r\n      if (this.file) {\r\n        this.dataservice.upload(this.file).subscribe((response: any) => {\r\n          if (response.status == 200) {\r\n            console.log(response);\r\n            this.dataservice\r\n          .UpdateCropPrice(\r\n            this.cropPriceForm.value,\r\n            this.selectedRows[0].id,\r\n            response.body[0]?.id\r\n          )\r\n          .subscribe((result: any) => {\r\n            resp = result.data;\r\n            console.log(\"response\", result);\r\n            if (result.data.updateCropPrice) {\r\n              this.toastr.success(\"Success!\");\r\n              this.getCropPrices();\r\n              this.file = null;\r\n              this.cropPriceModal.hide();\r\n              this.gridApi.deselectAll();\r\n            } else {\r\n              this.toastr.error(\"Failed. Please check the fields!\");\r\n            }\r\n          });\r\n          }\r\n        });\r\n      } else {\r\n        this.dataservice\r\n          .UpdateCropPrice(\r\n            this.cropPriceForm.value,\r\n            this.selectedRows[0].id,\r\n            null\r\n          )\r\n          .subscribe((result: any) => {\r\n            resp = result.data;\r\n            console.log(\"response\", result);\r\n            if (result.data.updateCropPrice) {\r\n              this.toastr.success(\"Success!\");\r\n              this.getCropPrices();\r\n              this.file = null;\r\n              this.cropPriceModal.hide();\r\n              this.gridApi.deselectAll();\r\n            } else {\r\n              this.toastr.error(\"Failed. Please check the fields!\");\r\n            }\r\n          });\r\n      }\r\n    } else {\r\n      this.dataservice.upload(this.file).subscribe((response: any) => {\r\n        if (response.status == 200) {\r\n          console.log(response);\r\n          this.dataservice\r\n            .AddCropPrice(this.cropPriceForm.value, response.body[0]?.id)\r\n            .subscribe((result: any) => {\r\n              resp = result.data;\r\n              console.log(\"response\", result);\r\n              if (result.data.createCropPrice) {\r\n                this.toastr.success(\"Success!\");\r\n                this.getCropPrices();\r\n                this.file = null;\r\n                this.cropPriceModal.hide();\r\n                this.gridApi.deselectAll();\r\n              } else {\r\n                this.toastr.error(\"Failed. Please check the fields!\");\r\n              }\r\n            });\r\n        } else {\r\n          this.toastr.error(\"Image failed to upload!\");\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"]}