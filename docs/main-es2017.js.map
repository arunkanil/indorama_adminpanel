{"version":3,"sources":["./src/app/views/login/authentication.service.ts","./src/app/graphql.module.ts","./src/app/views/error/404.component.ts","./src/environments/environment.ts","./src/app/containers/default-layout/index.ts","./src/app/containers/index.ts","./src/app/containers/default-layout/default-layout.component.ts","./src/app/views/error/500.component.html","./src/app/views/login/login.component.ts","./src/app/data.service.ts","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/app.routing.ts","./src/app/_nav.ts","./src/app/views/error/500.component.ts","./src/app/containers/default-layout/default-layout.component.html","./src/app/views/error/404.component.html","./src/app/views/login/login.component.html","./src/app/views/login/auth.guard.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main-es2017.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\n\r\nimport { environment } from \"../../../environments/environment\";\r\nimport { User } from \"../../models/user\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class AuthenticationService {\r\n  private currentUserSubject: BehaviorSubject<User>;\r\n  public currentUser: Observable<User>;\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService) {\r\n    this.currentUserSubject = new BehaviorSubject<User>(\r\n      JSON.parse(localStorage.getItem(\"currentUser\"))\r\n    );\r\n    this.currentUser = this.currentUserSubject.asObservable();\r\n  }\r\n\r\n  public get currentUserValue(): User {\r\n    console.log(\"curentuser\", this.currentUserSubject);\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  login(data) {\r\n    return this.http\r\n      .post<any>(`${environment.apiUrl}/api/auth/local/`, data)\r\n      .pipe(\r\n        map((user) => {\r\n          // login successful if there's a jwt token in the response\r\n          console.log(user);\r\n          if (user.jwt && (user.user.UserType == \"Admin\" || user.user.UserType == \"Marketing\")) {\r\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n            localStorage.setItem(\"token\", user.jwt);\r\n            localStorage.setItem(\"username\", user.user.username);\r\n            localStorage.setItem(\"uid\", user.user.id);\r\n            localStorage.setItem(\"user_type\", user.user.UserType);\r\n            localStorage.setItem(\"email\", user.user.email);\r\n            localStorage.setItem(\"name\", user.user.Name);\r\n            localStorage.setItem(\"phone_number\", user.user.ContactNumber);\r\n            localStorage.setItem(\"currentUser\", JSON.stringify(user));\r\n            this.currentUserSubject.next(user);\r\n          } else {\r\n            this.toastr.error(\"You're not authorized\");\r\n          }\r\n          return user;\r\n        })\r\n      );\r\n  }\r\n\r\n  logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem(\"currentUser\");\r\n    localStorage.removeItem(\"token\");\r\n    this.currentUserSubject.next(null);\r\n  }\r\n}\r\n","// import { NgModule } from \"@angular/core\";\r\n// import { APOLLO_OPTIONS, APOLLO_NAMED_OPTIONS } from \"apollo-angular\";\r\n// import {\r\n//   ApolloClientOptions,\r\n//   ApolloLink,\r\n//   InMemoryCache,\r\n// } from \"@apollo/client/core\";\r\n// import { setContext } from \"@apollo/client/link/context\";\r\n// import { HttpLink } from \"apollo-angular/http\";\r\n// import { environment } from \"../environments/environment\";\r\n\r\n// const uri = `${environment.apiUrl}/graphql`;\r\n\r\n// export function createApollo(httpLink: HttpLink): ApolloClientOptions<any> {\r\n//   const basic = setContext((operation, context) => ({\r\n//     headers: {\r\n//       Accept: \"charset=utf-8\",\r\n//     },\r\n//   }));\r\n//   // Get the authentication token from local storage if it exists\r\n//   const token = localStorage.getItem(\"token\");\r\n//   const auth = setContext((operation, context) => ({\r\n//     headers: {\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//   }));\r\n\r\n//   return {\r\n//     link: ApolloLink.from([basic, auth, httpLink.create({ uri })]),\r\n//     cache: new InMemoryCache(),\r\n//   };\r\n// }\r\n\r\n// export function createNamedApollo(\r\n//   httpLink: HttpLink\r\n// ): Record<string, ApolloClientOptions<any>> {\r\n//   const basic = setContext((operation, context) => ({\r\n//     headers: {\r\n//       Accept: \"charset=utf-8\",\r\n//     },\r\n//   }));\r\n//   return {\r\n//     second: {\r\n//       name: \"second\",\r\n//       link: ApolloLink.from([ basic, httpLink.create({ uri }) ]),\r\n//       cache: new InMemoryCache(),\r\n//     },\r\n//   };\r\n// }\r\n\r\n// @NgModule({\r\n//   providers: [\r\n//     {\r\n//       provide: APOLLO_OPTIONS,\r\n//       useFactory: createApollo,\r\n//       deps: [HttpLink],\r\n//     },\r\n//     {\r\n//       provide: APOLLO_NAMED_OPTIONS,\r\n//       deps: [HttpLink],\r\n//       useFactory: createNamedApollo,\r\n//     },\r\n//   ],\r\n// })\r\n// export class GraphQLModule {}\r\n\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { Apollo, APOLLO_OPTIONS } from 'apollo-angular';\r\nimport { HttpLink } from 'apollo-angular/http';\r\nimport { InMemoryCache,ApolloLink } from '@apollo/client/core';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { environment } from '../environments/environment';\r\n\r\nconst uri = `${environment.apiUrl}/graphql`;\r\n\r\nexport function createApollo(httpLink: HttpLink) {\r\n  const basic = setContext((operation, context) => ({\r\n    headers: {\r\n      Accept: 'charset=utf-8'\r\n    }\r\n  }));\r\n\r\n  const auth = setContext((operation, context) => {\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (token === null) {\r\n      return {};\r\n    } else {\r\n      return {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      };\r\n    }\r\n  });\r\n\r\n  const link = ApolloLink.from([basic, auth, httpLink.create({ uri })]);\r\n  const cache = new InMemoryCache();\r\n\r\n  return {\r\n    link,\r\n    cache\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  exports: [\r\n    HttpClientModule,\r\n    // ApolloModule,\r\n  ],\r\n  providers: [{\r\n    provide: APOLLO_OPTIONS,\r\n    useFactory: createApollo,\r\n    deps: [HttpLink]\r\n  }]\r\n})\r\nexport class GraphQLModule {}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  templateUrl: '404.component.html'\r\n})\r\nexport class P404Component {\r\n\r\n  constructor() { }\r\n\r\n}\r\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false,\n  // apiUrl: \"https://indoramaapp.untanglestrategy.com\"\n  // apiUrl: \"https://indorama-uat.untanglestrategy.com:883\",\n  apiUrl: \"http://localhost:1337\"\n  // apiUrl: \"https://farmgrow.indoramafertilizers.com:88\"\n};\n","export * from './default-layout.component';\r\n","export * from './default-layout';\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { User } from \"../../models/user\";\r\nimport { AuthenticationService } from \"../../views/login/authentication.service\";\r\nimport { navItems } from \"../../_nav\";\r\n\r\n@Component({\r\n  selector: \"app-dashboard\",\r\n  templateUrl: \"./default-layout.component.html\",\r\n})\r\nexport class DefaultLayoutComponent {\r\n  currentUser: User;\r\n  public sidebarMinimized = false;\r\n  userName = localStorage.getItem(\"username\");\r\n  constructor(\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService\r\n  ) {\r\n    this.authenticationService.currentUser.subscribe(\r\n      (x) => (this.currentUser = x)\r\n    );\r\n    // console.log(\"constructor\",this.currentUser.user.UserType)\r\n  }\r\n  public navItems = navItems.filter((item) => item.role === localStorage.getItem('user_type') || item.role === '');\r\n\r\n  toggleMinimize(e) {\r\n    this.sidebarMinimized = e;\r\n    console.log(this.currentUser.user?.UserType);\r\n  }\r\n  logout() {\r\n    this.authenticationService.logout();\r\n    this.router.navigate(['/login']);\r\n  }\r\n}\r\n","export default \"<div class=\\\"app flex-row align-items-center\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row justify-content-center\\\">\\r\\n      <div class=\\\"col-md-6\\\">\\r\\n        <div class=\\\"clearfix\\\">\\r\\n          <h1 class=\\\"float-left display-3 mr-4\\\">500</h1>\\r\\n          <h4 class=\\\"pt-3\\\">Houston, we have a problem!</h4>\\r\\n          <p class=\\\"text-muted\\\">The page you are looking for is temporarily unavailable.</p>\\r\\n        </div>\\r\\n        <div class=\\\"input-prepend input-group\\\">\\r\\n          <div class=\\\"input-group-prepend\\\">\\r\\n            <span class=\\\"input-group-text\\\"><i class=\\\"fa fa-search\\\"></i></span>\\r\\n          </div>\\r\\n          <input id=\\\"prependedInput\\\" class=\\\"form-control\\\" size=\\\"16\\\" type=\\\"text\\\" placeholder=\\\"What are you looking for?\\\">\\r\\n          <span class=\\\"input-group-append\\\">\\r\\n            <button class=\\\"btn btn-info\\\" type=\\\"button\\\">Search</button>\\r\\n          </span>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { Component, ViewChild } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\nimport { first } from \"rxjs/operators\";\r\nimport { DataService } from \"../../data.service\";\r\nimport { AuthenticationService } from \"./authentication.service\";\r\n\r\n@Component({\r\n  selector: \"app-dashboard\",\r\n  templateUrl: \"login.component.html\",\r\n})\r\nexport class LoginComponent {\r\n  @ViewChild(\"usForm\") usForm: NgForm;\r\n\r\n  loginForm: any = {};\r\n  result: any = {};\r\n  returnUrl: string;\r\n  error = \"\";\r\n  loading = false;\r\n\r\n  constructor(\r\n    public dataservice: DataService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService,\r\n    private toastr: ToastrService\r\n  ) {\r\n    if (this.authenticationService.currentUserValue) {\r\n      this.router.navigate([\"/\"]);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.returnUrl = this.route.snapshot.queryParams[\"returnUrl\"] || \"/\";\r\n  }\r\n  onSubmit() {\r\n    this.loading = true;\r\n    this.loginForm = this.usForm.value;\r\n    console.log(this.loginForm);\r\n    this.loading = true;\r\n    this.router.navigate([\"/dashboard\"]);\r\n    // this.toastr.success(\"Login successful\");\r\n    this.authenticationService\r\n      .login(this.loginForm)\r\n      .pipe(first())\r\n      .subscribe(\r\n        (data) => {\r\n          this.loading = false;\r\n          this.router.navigate([this.returnUrl]);\r\n          this.toastr.success(\"Login successful\");\r\n        },\r\n        (error) => {\r\n          this.error = error;\r\n          this.loading = false;\r\n          console.log(error);\r\n          this.toastr.error(error.error.error.message);\r\n        }\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\nimport {\n  HttpClient,\n  HttpErrorResponse,\n  HttpHeaders,\n} from \"@angular/common/http\";\nimport { Observable, throwError } from \"rxjs\";\nimport { environment } from \"../environments/environment\";\nimport { Apollo, gql } from \"apollo-angular\";\nimport { catchError } from \"rxjs/operators\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { idText } from \"typescript\";\n\nconst FarmDemosQuery = gql`\n  query ($page: Int, $pageSize: Int) {\n    farmDemos(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Farmer\n          FarmLocationLatitude\n          FarmLocationLongitude\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          AreaOfField\n          isPesticidesUsed\n          FarmerPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          IndoramaPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          Images {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          DateOfHarvesting\n          Season\n          Status\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst FarmDemoQuery = gql`\n  query ($id: ID) {\n    farmDemo(id: $id) {\n      data {\n        id\n        attributes {\n          Farmer\n          FarmLocationLatitude\n          FarmLocationLongitude\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          AreaOfField\n          isPesticidesUsed\n          DateOfHarvesting\n          Season\n          FarmerPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          IndoramaPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          Status\n          Images {\n            data {\n              id\n              attributes {\n                name\n                previewUrl\n                url\n              }\n            }\n          }\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst AddFarmDemoMutation = gql`\n  mutation (\n    $farmer: String\n    $latitude: Float\n    $longitude: Float\n    $lga: ID\n    $state: ID\n    $crop: ID\n    $area: String\n    $farmerPractise: ComponentFarmDemoFarmDemoPractiseInput\n    $indoramaPractise: ComponentFarmDemoFarmDemoPractiseInput\n    $dateOfHarvesting: Date\n    $season: String\n    $Status: ENUM_FARMDEMO_STATUS\n    $isPesticidesUsed: Boolean\n    $images: [ID]\n  ) {\n    createFarmDemo(\n      data: {\n        Farmer: $farmer\n        FarmLocationLatitude: $latitude\n        FarmLocationLongitude: $longitude\n        lgas: $lga\n        state: $state\n        crop: $crop\n        Status: $Status\n        AreaOfField: $area\n        FarmerPractise: $farmerPractise\n        IndoramaPractise: $indoramaPractise\n        isPesticidesUsed: $isPesticidesUsed\n        DateOfHarvesting: $dateOfHarvesting\n        Season: $season\n        Images: $images\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Farmer\n          FarmLocationLatitude\n          FarmLocationLongitude\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Status\n          AreaOfField\n          isPesticidesUsed\n          FarmerPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          IndoramaPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          Images {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          DateOfHarvesting\n          Season\n        }\n      }\n    }\n  }\n`;\nconst UpdateFarmDemo = gql`\n  mutation (\n    $id: ID!\n    $farmer: String\n    $latitude: Float\n    $longitude: Float\n    $lga: ID\n    $crop: ID\n    $area: String\n    $farmerPractise: ComponentFarmDemoFarmDemoPractiseInput\n    $indoramaPractise: ComponentFarmDemoFarmDemoPractiseInput\n    $dateOfHarvesting: Date\n    $season: String\n    $isPesticidesUsed: Boolean\n    $images: [ID]\n    $Status: ENUM_FARMDEMO_STATUS\n    $state: ID\n  ) {\n    updateFarmDemo(\n      id: $id\n      data: {\n        Farmer: $farmer\n        FarmLocationLatitude: $latitude\n        FarmLocationLongitude: $longitude\n        lgas: $lga\n        crop: $crop\n        Status: $Status\n        state: $state\n        AreaOfField: $area\n        FarmerPractise: $farmerPractise\n        IndoramaPractise: $indoramaPractise\n        isPesticidesUsed: $isPesticidesUsed\n        DateOfHarvesting: $dateOfHarvesting\n        Season: $season\n        Images: $images\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Farmer\n          FarmLocationLatitude\n          FarmLocationLongitude\n          Status\n          Season\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          AreaOfField\n          isPesticidesUsed\n          FarmerPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          IndoramaPractise {\n            id\n            Yield\n            DateOfSowing\n            DateOfDemonstration\n            FirstUreaApplication\n            SecondUreaApplication\n          }\n          Images {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          DateOfHarvesting\n          Season\n        }\n      }\n    }\n  }\n`;\nconst CropsQuery = gql`\n  query($page: Int, $pageSize: Int, $searchTerm:String) {\n    crops(pagination: { page: $page, pageSize: $pageSize }, sort: \"createdAt:desc\", filters:{Name:{containsi:$searchTerm}}) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst CropsMutation = gql`\n  mutation ($Name: String, $image: ID) {\n    createCrop(data: { Name: $Name, Image: $image }) {\n      data {\n        id\n        attributes {\n          Name\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateCrops = gql`\n  mutation ($Name: String, $id: ID!, $isDelete: Boolean, $image: ID) {\n    updateCrop(\n      id: $id\n      data: { Name: $Name, Image: $image, isDelete: $isDelete }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          isDelete\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst StatesQuery = gql`\n  query($page: Int, $pageSize: Int, $searchTerm:String) {\n    states(pagination: { page: $page, pageSize: $pageSize }, sort: \"createdAt:desc\", filters:{Name:{containsi:$searchTerm}}) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          markets {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst StatesMutation = gql`\n  mutation ($Name: String) {\n    createState(data: { Name: $Name }) {\n      data {\n        id\n        attributes {\n          Name\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          markets {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateState = gql`\n  mutation ($Name: String, $id: ID!, $isDelete: Boolean) {\n    updateState(id: $id, data: { Name: $Name, isDelete: $isDelete }) {\n      data {\n        id\n        attributes {\n          Name\n          lgas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          markets {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          isDelete\n        }\n      }\n    }\n  }\n`;\nconst LGAquery = gql`\n  query ($id: ID, $page: Int, $pageSize: Int, $searchTerm:String) {\n    lgas(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: { state: { id: { eq: $id } }, Name:{containsi:$searchTerm} }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          areas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst LGAmutation = gql`\n  mutation ($Name: String, $state: ID) {\n    createLga(data: { Name: $Name, state: $state }) {\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          areas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst UpdateLGA = gql`\n  mutation ($Name: String, $state: ID, $id: ID!, $isDelete: Boolean) {\n    updateLga(\n      id: $id\n      data: { Name: $Name, isDelete: $isDelete, state: $state }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          areas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst Villagesquery = gql`\n  query ($id: ID, $page: Int, $pageSize: Int, $searchTerm:String) {\n    villages(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: { area: { lga: { id: { eq: $id } } }, Name:{ containsi:$searchTerm} }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          area {\n            data {\n              id\n              attributes {\n                Name\n                PostalCode\n                lga {\n                  data {\n                    id\n                    attributes {\n                      Name\n                      state {\n                        data {\n                          id\n                          attributes {\n                            Name\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          localizations {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n        __typename\n      }\n    }\n  }\n`;\nconst VillageMutation = gql`\n  mutation ($Name: String, $area: ID) {\n    createVillage(data: { Name: $Name, area: $area }) {\n      data {\n        id\n        attributes {\n          Name\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst UpdateVillage = gql`\n  mutation ($Name: String, $area: ID, $id: ID!, $isDelete: Boolean) {\n    updateVillage(\n      id: $id\n      data: { Name: $Name, area: $area, isDelete: $isDelete }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          isDelete\n        }\n      }\n    }\n  }\n`;\nconst Areasquery = gql`\n  query ($id: ID, $page: Int, $pageSize: Int, $searchTerm:String) {\n    areas(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: { lga: { id: { eq: $id } }, Name:{containsi:$searchTerm}}\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          PostalCode\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          villages {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst AreaMutation = gql`\n  mutation ($Name: String, $PostalCode: Long, $lga: ID) {\n    createArea(data: { Name: $Name, PostalCode: $PostalCode, lga: $lga }) {\n      data {\n        id\n        attributes {\n          Name\n          PostalCode\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          villages {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst UpdateArea = gql`\n  mutation (\n    $Name: String\n    $lga: ID\n    $PostalCode: Long\n    $id: ID!\n    $isDelete: Boolean\n  ) {\n    updateArea(\n      id: $id\n      data: {\n        Name: $Name\n        PostalCode: $PostalCode\n        lga: $lga\n        isDelete: $isDelete\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          PostalCode\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          villages {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst MarketQuery = gql`\n  query ($id: ID, $page: Int, $pageSize: Int, $searchTerm:String) {\n    markets(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: { state: { id: { eq: $id } } ,Name:{containsi:$searchTerm}}\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst MarketMutation = gql`\n  mutation ($Name: String, $state: ID) {\n    createMarket(data: { Name: $Name, state: $state }) {\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst UpdateMarket = gql`\n  mutation ($Name: String, $state: ID, $id: ID!, $isDelete: Boolean) {\n    updateMarket(\n      id: $id\n      data: { Name: $Name, isDelete: $isDelete, state: $state }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst CropPricesQuery = gql`\n  query (\n    $page: Int\n    $pageSize: Int\n    $publicationState: PublicationState\n    $publishedAt: DateTime\n    $Rejected: Boolean\n  ) {\n    cropPrices(\n      publicationState: $publicationState\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: {\n        and: [\n          { publishedAt: { eq: $publishedAt } }\n          { Rejected: { eq: $Rejected } }\n        ]\n      }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Price\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Unit\n          Rejected\n          market {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Image {\n            data {\n              id\n              attributes {\n                name\n                alternativeText\n                caption\n                width\n                height\n                url\n                previewUrl\n              }\n            }\n          }\n          user {\n            data {\n              id\n              attributes {\n                Name\n                UserType\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          publishedAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateCropPriceMutation = gql`\n  mutation updateCropPrice(\n    $id: ID!\n    $crop: ID\n    $price: Float\n    $state: ID\n    $unit: String\n    $market: ID\n    $image: ID\n    $Rejected: Boolean\n    $published: DateTime\n  ) {\n    updateCropPrice(\n      id: $id\n      data: {\n        crop: $crop\n        Price: $price\n        state: $state\n        Unit: $unit\n        market: $market\n        Image: $image\n        Rejected: $Rejected\n        publishedAt: $published\n      }\n    ) {\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Price\n          Unit\n          state {\n            data {\n              attributes {\n                Name\n              }\n            }\n          }\n          market {\n            data {\n              attributes {\n                Name\n              }\n            }\n          }\n          Rejected\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst CropPriceMutation = gql`\n  mutation addCropPrice(\n    $crop: ID\n    $price: Float\n    $state: ID\n    $unit: String\n    $market: ID\n    $image: ID\n    $published: DateTime\n    $user: ID\n  ) {\n    createCropPrice(\n      data: {\n        crop: $crop\n        Price: $price\n        state: $state\n        Unit: $unit\n        Rejected: false\n        market: $market\n        Image: $image\n        publishedAt: $published\n        user: $user\n      }\n    ) {\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Price\n          Unit\n          state {\n            data {\n              attributes {\n                Name\n              }\n            }\n          }\n          market {\n            data {\n              attributes {\n                Name\n              }\n            }\n          }\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst RetailerQuery = gql`\n  query ($page: Int, $pageSize: Int, $confirmed: Boolean, $blocked: Boolean) {\n    usersPermissionsUsers(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: {\n        UserType: { eq: \"Retailer\" }\n        confirmed: { eq: $confirmed }\n        blocked: { eq: $blocked }\n      }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          username\n          Name\n          email\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          retailer_products {\n            data {\n              attributes {\n                ItemName\n                Price\n                Unit\n                Images {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          UserType\n          retailer_categories {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          Bio\n          Latitude\n          Longitude\n          blocked\n          confirmed\n          UserType\n          prof_pic {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          ContactNumber\n        }\n      }\n    }\n  }\n`;\nconst SoilTestQuery = gql`\n  query ($page: Int, $pageSize: Int) {\n    soilTests(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          SoilTestID\n          Status\n          ReasonForSoilTest\n          ContactNumber\n          nutrient\n          Farmer {\n            data {\n              attributes {\n                username\n                email\n\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          area {\n            data {\n              attributes {\n                Name\n                PostalCode\n              }\n            }\n          }\n          soil_test_samples {\n            data {\n              attributes {\n                SampleID\n              }\n            }\n          }\n          PreferredCollectionDate\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst SingleSoilTestQuery = gql`\n  query ($id: ID) {\n    soilTest(id: $id) {\n      data {\n        id\n        attributes {\n          SoilTestID\n          Status\n          ReasonForSoilTest\n          ContactNumber\n          nutrient\n          Farmer {\n            data {\n              id\n              attributes {\n                username\n                email\n\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          area {\n            data {\n              id\n              attributes {\n                Name\n                PostalCode\n              }\n            }\n          }\n          soil_test_samples {\n            data {\n              id\n              attributes {\n                SampleID\n                QuantityOfSamples\n                createdAt\n                updatedAt\n                SampleAddedBy {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n                soil_test_results {\n                  data {\n                    id\n                    attributes {\n                      soil_test_sample {\n                        data {\n                          id\n                          attributes {\n                            SampleID\n                          }\n                        }\n                      }\n                      phObserved\n                      OrganicCarbonObserved\n                      TotalNitrogenObserved\n                      PhosphorousObserved\n                      PotassiumObserved\n                      CalciumObserved\n                      MagnesiumObserved\n                      ZincObserved\n                      SulphurObserved\n                      IronObserved\n                      CopperObserved\n                      BoronObserved\n                      ManganeseObserved\n                      RecommendedNPKQty\n                      RecommendedUreaQty\n                      updatedAt\n                    }\n                  }\n                }\n              }\n            }\n          }\n          PreferredCollectionDate\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateSoilTest = gql`\n  mutation updateSoilTest(\n    $soilTestId: ID!\n    $contactNumber: String\n    $preferredCollectionDate: DateTime\n    $reason: String\n    $farmerID: ID\n    $areaID: ID\n    $lgaID: ID\n    $soilTestDisplayID: String\n    $status: ENUM_SOILTEST_STATUS\n    $nutrient: String\n  ) {\n    updateSoilTest(\n      id: $soilTestId\n      data: {\n        ContactNumber: $contactNumber\n        PreferredCollectionDate: $preferredCollectionDate\n        ReasonForSoilTest: $reason\n        Farmer: $farmerID\n        area: $areaID\n        lga: $lgaID\n        SoilTestID: $soilTestDisplayID\n        Status: $status\n        nutrient: $nutrient\n      }\n    ) {\n      data {\n        id\n        attributes {\n          ContactNumber\n          PreferredCollectionDate\n          ReasonForSoilTest\n          Farmer {\n            data {\n              id\n              attributes {\n                username\n                Name\n              }\n            }\n          }\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          SoilTestID\n          Status\n          nutrient\n        }\n      }\n    }\n  }\n`;\nconst UsersQuery = gql`\n  query ($UserType: String, $page: Int, $pageSize: Int) {\n    usersPermissionsUsers(\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n      filters: { UserType: { eq: $UserType } }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          username\n          Name\n          email\n          blocked\n          confirmed\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          retailer_categories {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          retailer_products {\n            data {\n              attributes {\n                ItemName\n                Price\n                Unit\n                Images {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          UserType\n          Bio\n          Latitude\n          Longitude\n          UserType\n          prof_pic {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          ContactNumber\n        }\n      }\n    }\n  }\n`;\nconst AddSoilTestResult = gql`\n  mutation soilTestAddResult(\n    $soilTestSampleID: ID\n    $ph: String\n    $Carbon: String\n    $Nitrogen: String\n    $phosphorous: String\n    $pottassium: String\n    $calcium: String\n    $magnesium: String\n    $zinc: String\n    $sulphur: String\n    $iron: String\n    $copper: String\n    $boron: String\n    $manganese: String\n    $RecommendedNPKQty: String\n    $RecommendedUreaQty: String\n  ) {\n    createSoilTestResult(\n      data: {\n        soil_test_sample: $soilTestSampleID\n        phObserved: $ph\n        OrganicCarbonObserved: $Carbon\n        TotalNitrogenObserved: $Nitrogen\n        PhosphorousObserved: $phosphorous\n        PotassiumObserved: $pottassium\n        CalciumObserved: $calcium\n        MagnesiumObserved: $magnesium\n        ZincObserved: $zinc\n        SulphurObserved: $sulphur\n        IronObserved: $iron\n        CopperObserved: $copper\n        BoronObserved: $boron\n        ManganeseObserved: $manganese\n        RecommendedNPKQty: $RecommendedNPKQty\n        RecommendedUreaQty: $RecommendedUreaQty\n      }\n    ) {\n      data {\n        attributes {\n          soil_test_sample {\n            data {\n              id\n              attributes {\n                SampleID\n              }\n            }\n          }\n          phObserved\n          OrganicCarbonObserved\n          TotalNitrogenObserved\n          PhosphorousObserved\n          PotassiumObserved\n          CalciumObserved\n          MagnesiumObserved\n          ZincObserved\n          SulphurObserved\n          CopperObserved\n          IronObserved\n          BoronObserved\n          ManganeseObserved\n        }\n      }\n    }\n  }\n`;\nconst UpdateSoilTestResult = gql`\n  mutation soilTestAddResult(\n    $id: ID!\n    $soilTestSampleID: ID\n    $ph: String\n    $Carbon: String\n    $Nitrogen: String\n    $phosphorous: String\n    $pottassium: String\n    $calcium: String\n    $magnesium: String\n    $zinc: String\n    $sulphur: String\n    $iron: String\n    $copper: String\n    $boron: String\n    $manganese: String\n    $RecommendedNPKQty: String\n    $RecommendedUreaQty: String\n  ) {\n    updateSoilTestResult(\n      id: $id\n      data: {\n        soil_test_sample: $soilTestSampleID\n        phObserved: $ph\n        OrganicCarbonObserved: $Carbon\n        TotalNitrogenObserved: $Nitrogen\n        PhosphorousObserved: $phosphorous\n        PotassiumObserved: $pottassium\n        CalciumObserved: $calcium\n        MagnesiumObserved: $magnesium\n        ZincObserved: $zinc\n        SulphurObserved: $sulphur\n        IronObserved: $iron\n        CopperObserved: $copper\n        BoronObserved: $boron\n        ManganeseObserved: $manganese\n        RecommendedNPKQty: $RecommendedNPKQty\n        RecommendedUreaQty: $RecommendedUreaQty\n      }\n    ) {\n      data {\n        attributes {\n          soil_test_sample {\n            data {\n              id\n              attributes {\n                SampleID\n              }\n            }\n          }\n          phObserved\n          OrganicCarbonObserved\n          TotalNitrogenObserved\n          PhosphorousObserved\n          PotassiumObserved\n          CalciumObserved\n          MagnesiumObserved\n          ZincObserved\n          SulphurObserved\n          CopperObserved\n          IronObserved\n          BoronObserved\n          ManganeseObserved\n        }\n      }\n    }\n  }\n`;\nconst GetSingleRetailerQuery = gql`\n  query ($id: ID) {\n    usersPermissionsUsers(filters: { id: { eq: $id } }) {\n      data {\n        id\n        attributes {\n          username\n          Name\n          blocked\n          confirmed\n          email\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          retailer_categories {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          retailer_products {\n            data {\n              id\n              attributes {\n                ItemName\n                Price\n                Unit\n                Images {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          agronomist_lgas {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                      lgas {\n                        data {\n                          id\n                          attributes {\n                            Name\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          UserType\n          Bio\n          Latitude\n          Longitude\n          UserType\n          prof_pic {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          blocked\n          ContactNumber\n        }\n      }\n    }\n  }\n`;\nconst updateRetailerProfPic = gql`\n  mutation editRetailer($id: ID!, $prof_pic: ID) {\n    updateUsersPermissionsUser(id: $id, data: { prof_pic: $prof_pic }) {\n      data {\n        id\n        attributes {\n          username\n          Name\n          email\n          prof_pic {\n            data {\n              id\n              attributes {\n                name\n                url\n              }\n            }\n          }\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          retailer_categories {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          retailer_products {\n            data {\n              attributes {\n                ItemName\n                Price\n                Unit\n                Images {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          UserType\n          Bio\n          Latitude\n          Longitude\n          UserType\n          prof_pic {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          ContactNumber\n        }\n      }\n    }\n  }\n`;\nconst updateRetailerQuery = gql`\n  mutation editRetailer(\n    $id: ID!\n    $name: String\n    $village: ID\n    $lga: ID\n    $UserType: ENUM_USERSPERMISSIONSUSER_USERTYPE\n    $categories: [ID]\n    $bio: String\n    $latitude: Float\n    $longitude: Float\n    $profpic: ID\n    $password: String\n    $blocked: Boolean\n    $confirmed: Boolean\n    $contactNumber: String\n    $agronomist_lgas: [ID]\n  ) {\n    updateUsersPermissionsUser(\n      id: $id\n      data: {\n        Name: $name\n        village: $village\n        lga: $lga\n        UserType: $UserType\n        retailer_categories: $categories\n        Bio: $bio\n        blocked: $blocked\n        password: $password\n        confirmed: $confirmed\n        Latitude: $latitude\n        Longitude: $longitude\n        prof_pic: $profpic\n        ContactNumber: $contactNumber\n        agronomist_lgas: $agronomist_lgas\n      }\n    ) {\n      data {\n        id\n        attributes {\n          username\n          Name\n          email\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          retailer_categories {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          retailer_products {\n            data {\n              attributes {\n                ItemName\n                Price\n                Unit\n                Images {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          agronomist_lgas {\n            data {\n              id\n              attributes {\n                Name\n                state {\n                  data {\n                    id\n                    attributes {\n                      Name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          UserType\n          Bio\n          Latitude\n          Longitude\n          UserType\n          prof_pic {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          ContactNumber\n          confirmed\n          blocked\n        }\n      }\n    }\n  }\n`;\nconst getRetailerCategories = gql`\n  query {\n    retailerCategories {\n      data {\n        id\n        attributes {\n          CategoryName\n          createdAt\n          CategoryImage {\n            data {\n              id\n              attributes {\n                name\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst createdRetailerProducts = gql`\n  mutation (\n    $ItemName: String\n    $Price: Int\n    $Unit: String\n    $Images: [ID]\n    $retailer_category: ID\n    $retailers: [ID]\n  ) {\n    createRetailerProduct(\n      data: {\n        ItemName: $ItemName\n        Price: $Price\n        Unit: $Unit\n        Images: $Images\n        retailer_category: $retailer_category\n        retailers: $retailers\n      }\n    ) {\n      data {\n        id\n        attributes {\n          ItemName\n          Unit\n          Price\n          Images {\n            data {\n              id\n            }\n          }\n          retailer_category {\n            data {\n              id\n            }\n          }\n          retailers {\n            data {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst updateRetailerProducts = gql`\n  mutation editRetailerProduct(\n    $productId: ID!\n    $itemName: String\n    $price: Int\n    $unit: String\n    $images: [ID]\n    $isApproved: Boolean\n    $retailer: [ID]\n    $retailer_category: ID\n  ) {\n    updateRetailerProduct(\n      id: $productId\n      data: {\n        ItemName: $itemName\n        Price: $price\n        Unit: $unit\n        Images: $images\n        isApproved: $isApproved\n        retailers: $retailer\n        retailer_category: $retailer_category\n      }\n    ) {\n      data {\n        attributes {\n          ItemName\n          Price\n          Unit\n          retailers {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          retailer_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          isApproved\n        }\n      }\n    }\n  }\n`;\nconst DeleteStatesMutation = gql`\n  mutation ($id: ID!) {\n    deleteState(id: $id) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteLGAMutation = gql`\n  mutation ($id: ID!) {\n    deleteLga(id: $id) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteAreaMutation = gql`\n  mutation ($id: ID!) {\n    deleteArea(id: $id) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteVillageMutation = gql`\n  mutation ($id: ID!) {\n    deleteVillage(id: $id) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteCropMutation = gql`\n  mutation ($id: ID!) {\n    deleteCrop(id: $id) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteMarketMutation = gql`\n  mutation ($id: ID!) {\n    deleteMarket(id: $id) {\n      data {\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`;\nconst DeleteFarmdemo = gql`\n  mutation ($id: ID!) {\n    deleteFarmDemo(id: $id) {\n      data {\n        attributes {\n          Farmer\n          DateOfHarvesting\n        }\n      }\n    }\n  }\n`;\nconst DeleteRetailerProduct = gql`\n  mutation ($id: ID!) {\n    deleteRetailerProduct(id: $id) {\n      data {\n        attributes {\n          ItemName\n          Price\n        }\n      }\n    }\n  }\n`;\nconst DeleteFile = gql`\n  mutation ($id: ID!) {\n    deleteUploadFile(id: $id) {\n      data {\n        id\n      }\n    }\n  }\n`;\nconst DeleteUser = gql`\n  mutation ($id: ID!) {\n    deleteUsersPermissionsUser(id: $id) {\n      data {\n        id\n        attributes {\n          username\n        }\n      }\n    }\n  }\n`;\nconst DeleteBestPractice = gql`\n  mutation ($id: ID!) {\n    deleteBestCropPractise(id: $id) {\n      data {\n        attributes {\n          content\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst DeleteActivity = gql`\n  mutation ($id: ID!) {\n    deleteActivity(id: $id) {\n      data {\n        attributes {\n          FarmerName\n          Date\n          Latitude\n          Longitude\n          NoOfAttendees\n        }\n      }\n    }\n  }\n`;\nconst DeleteMarketplaceProduct = gql`\n  mutation ($id: ID!) {\n    deleteMarketplaceProduct(id: $id) {\n      data {\n        attributes {\n          ItemName\n          Price\n          AvailableQty\n        }\n      }\n    }\n  }\n`;\nconst CreateAgronomist = gql`\n  mutation ($areas: [ID], $user: ID) {\n    createAgronomist(data: { areas: $areas, users_permissions_user: $user }) {\n      data {\n        id\n        attributes {\n          users_permissions_user {\n            data {\n              id\n              attributes {\n                username\n                Name\n                UserType\n              }\n            }\n          }\n          areas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst getAgronomist = gql`\n  query ($user: ID) {\n    agronomists(filters: { users_permissions_user: { id: { eq: $user } } }) {\n      data {\n        id\n        attributes {\n          users_permissions_user {\n            data {\n              id\n              attributes {\n                username\n                Name\n                UserType\n              }\n            }\n          }\n          areas {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst queryUsersLarge = gql`\n  query ($UserType: String, $village: ID, $lga: ID, $area: ID, $state: ID) {\n    usersPermissionsUsers(\n      pagination: { limit: 10000 }\n      sort: \"createdAt:desc\"\n      filters: {\n        UserType: { eq: $UserType }\n        village: {\n          or: [{ id: { eq: $village } }, { area: { id: { eq: $area } } }]\n        }\n        lga: { or: [{ id: { eq: $lga } }, { state: { id: { eq: $state } } }] }\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Name\n          ContactNumber\n        }\n      }\n    }\n  }\n`;\nconst getIndoramaUpdates = gql`\n  query (\n    $isDelete: Boolean\n    $isActive: Boolean\n    $id: ID\n    $page: Int\n    $pageSize: Int\n  ) {\n    newsAndUpdates(\n      sort: \"createdAt:desc\"\n      pagination: { page: $page, pageSize: $pageSize }\n      filters: {\n        isActive: { eq: $isActive }\n        isDelete: { eq: $isDelete }\n        id: { eq: $id }\n      }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          Title\n          Body\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          isActive\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateIndoramaUpdates = gql`\n  mutation (\n    $id: ID!\n    $Title: String\n    $Body: String\n    $isDelete: Boolean\n    $isActive: Boolean\n    $Images: [ID]\n  ) {\n    updateNewsAndUpdate(\n      id: $id\n      data: {\n        Title: $Title\n        Body: $Body\n        isActive: $isActive\n        isDelete: $isDelete\n        Images: $Images\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Title\n          Body\n          isActive\n          isDelete\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst CreateIndoramaUpdates = gql`\n  mutation ($Title: String, $Body: String, $Images: [ID]) {\n    createNewsAndUpdate(\n      data: {\n        Title: $Title\n        Body: $Body\n        isActive: true\n        isDelete: false\n        Images: $Images\n      }\n    ) {\n      data {\n        id\n        attributes {\n          Title\n          Body\n          isActive\n          isDelete\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst GetMarketplace = gql`\n  query ($pageNumber: Int, $pageSize: Int, $categoryFilter: [ID]) {\n    marketplaceProducts(\n      filters: { marketplace_category: { id: { in: $categoryFilter } } }\n      pagination: { page: $pageNumber, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          ItemName\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          seller {\n            data {\n              attributes {\n                Name\n                username\n                ContactNumber\n              }\n            }\n          }\n          description\n          contactNumber\n          Price\n          AvailableQty\n          Unit\n          marketplace_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst GetMarketplaceSingleProduct = gql`\n  query ($id: ID!) {\n    marketplaceProduct(id: $id) {\n      data {\n        id\n        attributes {\n          ItemName\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          seller {\n            data {\n              attributes {\n                Name\n                username\n                ContactNumber\n              }\n            }\n          }\n          description\n          contactNumber\n          Price\n          AvailableQty\n          Unit\n          marketplace_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst CreateMarketplaceProduct = gql`\n  mutation sellItemMarketplace(\n    $itemName: String\n    $images: [ID]\n    $userId: ID\n    $contactNumber: String\n    $price: Int\n    $availableQty: Int\n    $unit: String\n    $category: ID\n    $description: String\n  ) {\n    createMarketplaceProduct(\n      data: {\n        ItemName: $itemName\n        Images: $images\n        seller: $userId\n        contactNumber: $contactNumber\n        Price: $price\n        AvailableQty: $availableQty\n        Unit: $unit\n        marketplace_category: $category\n        description: $description\n      }\n    ) {\n      data {\n        id\n        attributes {\n          ItemName\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          seller {\n            data {\n              id\n              attributes {\n                Name\n                username\n              }\n            }\n          }\n          description\n          contactNumber\n          Price\n          AvailableQty\n          Unit\n          marketplace_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateMarketplaceProduct = gql`\n  mutation updateMarketplaceProduct(\n    $itemName: String\n    $images: [ID]\n    $contactNumber: String\n    $price: Int\n    $id: ID!\n    $availableQty: Int\n    $unit: String\n    $category: ID\n    $description: String\n  ) {\n    updateMarketplaceProduct(\n      id: $id\n      data: {\n        ItemName: $itemName\n        Images: $images\n        contactNumber: $contactNumber\n        Price: $price\n        AvailableQty: $availableQty\n        Unit: $unit\n        marketplace_category: $category\n        description: $description\n      }\n    ) {\n      data {\n        id\n        attributes {\n          ItemName\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          seller {\n            data {\n              id\n              attributes {\n                Name\n                username\n              }\n            }\n          }\n          description\n          contactNumber\n          Price\n          AvailableQty\n          Unit\n          marketplace_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`;\nconst UpdateMarketplaceProductImg = gql`\n  mutation updateMarketplaceProduct($images: [ID], $id: ID!) {\n    updateMarketplaceProduct(id: $id, data: { Images: $images }) {\n      data {\n        id\n        attributes {\n          ItemName\n          Images {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          seller {\n            data {\n              id\n              attributes {\n                Name\n                username\n              }\n            }\n          }\n          description\n          contactNumber\n          Price\n          AvailableQty\n          Unit\n          marketplace_category {\n            data {\n              id\n              attributes {\n                CategoryName\n              }\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`;\nconst GetBestCropPractices = gql`\n  query getBestCropPractises($cropFilter: ID, $page: Int, $pageSize: Int) {\n    bestCropPractises(\n      filters: { crop: { id: { eq: $cropFilter } } }\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          media {\n            data {\n              id\n              attributes {\n                name\n                formats\n                url\n                size\n                mime\n                ext\n              }\n            }\n          }\n          content\n          cropImage {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst CreateBestCropPractices = gql`\n  mutation ($crop: ID, $media: ID, $content: String, $cropImage: ID) {\n    createBestCropPractise(\n      data: {\n        crop: $crop\n        media: $media\n        content: $content\n        cropImage: $cropImage\n      }\n    ) {\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          media {\n            data {\n              id\n              attributes {\n                name\n                formats\n                url\n                size\n                mime\n                ext\n              }\n            }\n          }\n          content\n          cropImage {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst GetMarketplaceCategories = gql`\n  query {\n    marketplaceCategories(\n      filters: { isDelete: { eq: false }, isActive: { eq: true } }\n      sort: \"CategoryName:asc\"\n    ) {\n      data {\n        id\n        attributes {\n          CategoryName\n          CategoryImage {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          isDelete\n          isActive\n        }\n      }\n    }\n  }\n`;\nconst GetActivities = gql`\n  query getActivities($page: Int, $pageSize: Int) {\n    activities(\n      sort: \"createdAt:desc\"\n      pagination: { page: $page, pageSize: $pageSize }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          FarmerName\n          Date\n          Latitude\n          Longitude\n          NoOfAttendees\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ConditionOfCrop\n          PlannedFarmDay\n          Reason\n          area {\n            data {\n              id\n              attributes {\n                Name\n                lga {\n                  data {\n                    id\n                    attributes {\n                      Name\n                      state {\n                        data {\n                          id\n                          attributes {\n                            Name\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          ActivityType\n          Time\n          createdAt\n          agronomist\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst GetSingleActivity = gql`\n# Write your query or mutation here\nquery getActivities($id: ID) {\n    activity(id: $id) {\n      data {\n        id\n        attributes {\n          FarmerName\n          Date\n          Latitude\n          Longitude\n          NoOfAttendees\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ConditionOfCrop\n          PlannedFarmDay\n          Reason\n          area {\n            data {\n              id\n              attributes {\n                Name\n                lga {\n                  data {\n                    id\n                    attributes {\n                      Name\n                      state {\n                        data {\n                          id\n                          attributes {\n                            Name\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          ActivityType\n          Time\n          createdAt\n          updatedAt\n          agronomist\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst CreateActivities = gql`\n  mutation (\n    $FarmerName: String\n    $Date: Date\n    $Latitude: Float\n    $Longitude: Float\n    $NoOfAttendees: Int\n    $crop: ID\n    $ConditionOfCrop: String\n    $PlannedFarmDay: Date\n    $Reason: String\n    $area: ID\n    $ActivityType: ENUM_ACTIVITY_ACTIVITYTYPE\n    $Time: String\n    $village: ID\n    $agronomist: String\n  ) {\n    createActivity(\n      data: {\n        FarmerName: $FarmerName\n        Date: $Date\n        Latitude: $Latitude\n        Longitude: $Longitude\n        NoOfAttendees: $NoOfAttendees\n        crop: $crop\n        ConditionOfCrop: $ConditionOfCrop\n        PlannedFarmDay: $PlannedFarmDay\n        Reason: $Reason\n        area: $area\n        ActivityType: $ActivityType\n        Time: $Time\n        village: $village\n        agronomist: $agronomist\n      }\n    ) {\n      data {\n        id\n        attributes {\n          FarmerName\n          Date\n          Latitude\n          Longitude\n          NoOfAttendees\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ConditionOfCrop\n          PlannedFarmDay\n          Reason\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          agronomist\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ActivityType\n          Time\n        }\n      }\n    }\n  }\n`;\nconst UpdateActivity = gql`\n  mutation (\n    $FarmerName: String\n    $Date: Date\n    $Latitude: Float\n    $Longitude: Float\n    $NoOfAttendees: Int\n    $crop: ID\n    $ConditionOfCrop: String\n    $PlannedFarmDay: Date\n    $Reason: String\n    $area: ID\n    $ActivityType: ENUM_ACTIVITY_ACTIVITYTYPE\n    $Time: String\n    $village: ID\n    $agronomist: String\n    $id: ID!\n  ) {\n    updateActivity(\n      id: $id\n      data: {\n        FarmerName: $FarmerName\n        Date: $Date\n        Latitude: $Latitude\n        Longitude: $Longitude\n        NoOfAttendees: $NoOfAttendees\n        crop: $crop\n        ConditionOfCrop: $ConditionOfCrop\n        PlannedFarmDay: $PlannedFarmDay\n        Reason: $Reason\n        area: $area\n        ActivityType: $ActivityType\n        Time: $Time\n        village: $village\n        agronomist: $agronomist\n      }\n    ) {\n      data {\n        id\n        attributes {\n          FarmerName\n          Date\n          Latitude\n          Longitude\n          NoOfAttendees\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ConditionOfCrop\n          PlannedFarmDay\n          Reason\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          agronomist\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          ActivityType\n          Time\n        }\n      }\n    }\n  }\n`;\nconst getDashboardStats = gql`\n  query dashboardAPI($state: ID, $fromDate: DateTime, $toDate: DateTime) {\n    soilTests(\n      filters: {\n        and: [\n          { lga: { state: { id: { eq: $state } } } }\n          { createdAt: { between: [$fromDate, $toDate] } }\n        ]\n      }\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    soilTestSamples(\n      filters: {\n        and: [\n          { soil_test: { lga: { state: { id: { eq: $state } } } } }\n          { createdAt: { between: [$fromDate, $toDate] } }\n        ]\n      }\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    soilTestResults(\n      filters: {\n        and: [\n          {\n            soil_test_sample: {\n              soil_test: { lga: { state: { id: { eq: $state } } } }\n            }\n          }\n          { createdAt: { between: [$fromDate, $toDate] } }\n        ]\n      }\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    farmDemos {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n`;\nconst getCropPricesDashboard = gql`\n  query ($id: ID, $market: ID, $fromDate: DateTime, $toDate: DateTime) {\n    cropPrices(\n      publicationState: LIVE\n      pagination: { limit: 10000 }\n      sort: \"publishedAt:desc\"\n      filters: {\n        crop: { id: { eq: $id } }\n        market: { id: { eq: $market } }\n        publishedAt: { between: [$fromDate, $toDate] }\n      }\n    ) {\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Price\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Unit\n          market {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          publishedAt\n        }\n      }\n    }\n  }\n`;\nconst getFarmDemoStatsDashboard = gql`\n  query dashboardAPI(\n    $state: ID\n    $status: String\n    $fromDate: DateTime\n    $toDate: DateTime\n  ) {\n    all: farmDemos(\n      filters: {\n        state: { id: { eq: $state } }\n        createdAt: { between: [$fromDate, $toDate] }\n      }\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    status: farmDemos(\n      filters: {\n        and: [\n          { state: { id: { eq: $state } } }\n          { Status: { eq: $status } }\n          { createdAt: { between: [$fromDate, $toDate] } }\n        ]\n      }\n    ) {\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n`;\nconst getallChats = gql`\n  query ($limit: Int, $start: Int, $key: String, $isAskIndorama: Boolean) {\n    chats(\n      filters: {\n        members: {\n          or: [{ username: { containsi: $key } }, { Name: { containsi: $key } }]\n        }\n        isAskIndorama: { eq: $isAskIndorama }\n      }\n      sort: \"updatedAt:desc\"\n      pagination: { limit: $limit, start: $start }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          isAskIndorama\n          members {\n            data {\n              id\n              attributes {\n                username\n                Name\n                UserType\n                Name\n                prof_pic {\n                  data {\n                    id\n                    attributes {\n                      name\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          chatInitiatedBy {\n            data {\n              id\n              attributes {\n                username\n                Name\n                UserType\n                Name\n                prof_pic {\n                  data {\n                    id\n                    attributes {\n                      name\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst getChatMessages = gql`\n  query ($id: ID!) {\n    chat(id: $id) {\n      data {\n        id\n        attributes {\n          messages {\n            data {\n              id\n              attributes {\n                message\n                createdAt\n                updatedAt\n                image_attachment {\n                  data {\n                    id\n                    attributes {\n                      name\n                      width\n                      height\n                      url\n                    }\n                  }\n                }\n                from_user {\n                  data {\n                    id\n                    attributes {\n                      username\n                      Name\n                      UserType\n                      prof_pic {\n                        data {\n                          id\n                          attributes {\n                            url\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                to_user {\n                  data {\n                    id\n                    attributes {\n                      username\n                      Name\n                      UserType\n                      prof_pic {\n                        data {\n                          id\n                          attributes {\n                            url\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                chat {\n                  data {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst getSurveys = gql`\n  query ($page: Int, $pageSize: Int) {\n    surveyForms(\n      sort: \"updatedAt:desc\"\n      pagination: { page: $page, pageSize: $pageSize }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          SurveyTitle\n          SurveyDescription\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst CreateSurveys = gql`\n  mutation (\n    $SurveyTitle: String\n    $SurveyDescription: String\n    $Fields: [SurveyFormFieldsDynamicZoneInput!]\n  ) {\n    createSurveyForm(\n      data: {\n        SurveyTitle: $SurveyTitle\n        SurveyDescription: $SurveyDescription\n        Fields: $Fields\n      }\n    ) {\n      data {\n        id\n        attributes {\n          SurveyTitle\n          SurveyDescription\n          Fields {\n            __typename\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst getSurveyResults = gql`\n  query ($limit: Int, $start: Int, $id: ID) {\n    surveyResults(\n      sort: \"updatedAt:desc\"\n      pagination: { limit: $limit, start: $start }\n      filters: { survey_form: { id: { eq: $id } } }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          SurveyResponse\n          createdAt\n        }\n      }\n    }\n  }\n`;\nconst deleteSurvey = gql`\n  mutation ($id: ID!) {\n    deleteSurveyForm(id: $id) {\n      data {\n        attributes {\n          SurveyTitle\n          SurveyDescription\n        }\n      }\n    }\n  }\n`;\nconst getDashboardAd = gql`\n  query {\n    advertisement {\n      data {\n        id\n        attributes {\n          AdImage {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          url\n          isActive\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst getRetailerAd = gql`\n  query {\n    retailerAdvertisement {\n      data {\n        id\n        attributes {\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          url\n          isActive\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst updateDashboardAd = gql`\n  mutation updateAdvertisement($imageId: ID, $clickUrl: String) {\n    updateAdvertisement(\n      data: { AdImage: $imageId, url: $clickUrl, isActive: true }\n    ) {\n      data {\n        id\n        attributes {\n          AdImage {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          url\n          isActive\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst updateRetailerAd = gql`\n  mutation updateAdvertisement($imageId: ID, $clickUrl: String) {\n    updateRetailerAdvertisement(\n      data: { Image: $imageId, url: $clickUrl, isActive: true }\n    ) {\n      data {\n        id\n        attributes {\n          Image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          url\n          isActive\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst getSmsCampaigns = gql`\n  query ($page: Int, $pageSize: Int, $id: ID) {\n    smsCampaigns(\n      sort: \"updatedAt:desc\"\n      pagination: { page: $page, pageSize: $pageSize }\n      filters: { id: { eq: $id } }\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          message\n          isAllFarmers\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          recipients {\n            data {\n              id\n              attributes {\n                Name\n                ContactNumber\n              }\n            }\n          }\n          apiKey\n          SMSGatewayResponse\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst createSMSCampaign = gql`\n  mutation createSMSCampaign(\n    $message: String\n    $state: ID\n    $lga: ID\n    $area: ID\n    $village: ID\n    $isAllFarmers: Boolean\n  ) {\n    createSmsCampaign(\n      data: {\n        message: $message\n        state: $state\n        lga: $lga\n        area: $area\n        village: $village\n        isAllFarmers: $isAllFarmers\n      }\n    ) {\n      data {\n        id\n        attributes {\n          message\n          state {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          lga {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          area {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          village {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          recipients {\n            data {\n              id\n              attributes {\n                Name\n                ContactNumber\n              }\n            }\n          }\n          apiKey\n          SMSGatewayResponse\n          isAllFarmers\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\nconst getPendingRetailerApprovals = gql`\n  query getPendingRetailerApprovals {\n    usersPermissionsUsers(\n      filters: {\n        and: [\n          { confirmed: { eq: false } }\n          { blocked: { eq: false } }\n          { UserType: { eq: \"Retailer\" } }\n        ]\n      }\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          username\n          Name\n          Bio\n          email\n          confirmed\n          blocked\n          UserType\n          ContactNumber\n          isContactNumberVerified\n        }\n      }\n    }\n  }\n`;\nconst readApprovalCropPrices = gql`\n  query readApprovalCropPrices {\n    cropPrices(\n      filters: { publishedAt: { eq: null }, Rejected: { eq: false } }\n      publicationState: PREVIEW\n      sort: \"createdAt:desc\"\n    ) {\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n      data {\n        id\n        attributes {\n          crop {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Price\n          Unit\n          market {\n            data {\n              id\n              attributes {\n                Name\n              }\n            }\n          }\n          Image {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          Rejected\n          user {\n            data {\n              id\n              attributes {\n                Name\n                username\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n@Injectable({\n  providedIn: \"root\",\n})\nexport class DataService {\n  baseURL = environment.apiUrl;\n  params: URLSearchParams = new URLSearchParams();\n\n  constructor(\n    private http: HttpClient,\n    private apollo: Apollo,\n    private toastr: ToastrService\n  ) { }\n\n  handleError(error: HttpErrorResponse) {\n    let errorMessage = \"Unknown error!\";\n    console.log(error);\n    // if (error.error instanceof ErrorEvent) {\n    //   // Client-side errors\n    //   errorMessage = `Error: ${error.error.message}`;\n    // } else {\n    //   // Server-side errors\n    //   errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    // }\n    if (error.error.message) this.toastr.error(error.error.message);\n    if (error.status !== 200) {\n      this.toastr.error(error.error.error.Message);\n      this.toastr.error(error.error.message);\n      return throwError(errorMessage);\n    }\n  }\n\n  Login(data): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n    };\n    return this.http.post(this.baseURL + `/auth/login/`, data, httpOptions1);\n  }\n  createRetailer(data): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n    };\n    return this.http.post(this.baseURL + `/api/users`, data, httpOptions1);\n  }\n  fetchMessage(api_token, message_id): Observable<any> {\n    return this.http\n      .get(\n        `https://www.bulksmsnigeria.com/api/v2/delivery?api_token=${api_token}&message_id=${message_id}`\n      )\n      .pipe(catchError(this.handleError));\n  }\n  getSurveyDetails(data): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/survey-forms/${data}?populate=Fields`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n  downloadActivities(data): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/activity/download?fromDate=${data.fromDate}&toDate=${data.toDate}`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadCropPrices(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/crop-prices`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadFarmDemos(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/download-farm-demos`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadIndoramaUpdates(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/indorama-updates`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n\n  downloadMarketplace(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/marketplace`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadMaster(masterType): Observable<any> {\n\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/${masterType}`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadStates(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/states`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadLgas(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/lgas`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadCities(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/cities`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadVillages(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/villages`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadMarkets(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/markets`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadCrops(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/crops`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadUsers(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/activity/download-users`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadRetailers(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/activity/retailers-download`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n\n  downloadSMSCampaigns(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/sms-campaigns`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n\n  downloadSoilTests(): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      // headers: {\n      //   Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      // },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/excel-download/soiltest`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  downloadResponses(data): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/survey-result/download?surveyForm=${data}`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  getSoilTestStats(data, fromDate?, toDate?): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/dashboard-soil-npk?stateId=${data}&fromDate=${fromDate}T00:00:00.000Z&toDate=${toDate}T23:59:59.000Z`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n  getFarmDemoYieldStats(data, fromDate?, toDate?): Observable<any> {\n    const httpOptions1: Object = {\n      observe: \"response\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    };\n    return this.http\n      .get(\n        `${environment.apiUrl}/api/dashboard-farm-demo?stateId=${data}&fromDate=${fromDate}T00:00:00.000Z&toDate=${toDate}T23:59:59.000Z`,\n        httpOptions1\n      )\n      .pipe(catchError(this.handleError));\n  }\n  getDashboardStats(data?, fromDate?, toDate?) {\n    return this.apollo.watchQuery({\n      query: getDashboardStats,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        state: data,\n        fromDate: `${fromDate}T00:00:00.000Z`,\n        toDate: `${toDate}T23:59:59.000Z`,\n      },\n    });\n  }\n  getCropPricesDashboard(id, market?, fromDate?, toDate?) {\n    return this.apollo.watchQuery({\n      query: getCropPricesDashboard,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n        market: market,\n        fromDate: `${fromDate}T00:00:00.000Z`,\n        toDate: `${toDate}T23:59:59.000Z`,\n      },\n    });\n  }\n  getFarmDemoStatsDashboard(state?, status?, fromDate?, toDate?) {\n    return this.apollo.watchQuery({\n      query: getFarmDemoStatsDashboard,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        state: state,\n        status: status,\n        fromDate: `${fromDate}T00:00:00.000Z`,\n        toDate: `${toDate}T23:59:59.000Z`,\n      },\n    });\n  }\n  getPendingRetailerApprovals() {\n    return this.apollo.watchQuery({\n      query: getPendingRetailerApprovals,\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getApprovalCropPrices() {\n    return this.apollo.watchQuery({\n      query: readApprovalCropPrices,\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getallChats(limit?, start?, key?, isAskIndorama?) {\n    return this.apollo.watchQuery({\n      query: getallChats,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        limit: limit,\n        start: start,\n        key: key ? key : undefined,\n        isAskIndorama: isAskIndorama ? isAskIndorama : undefined,\n      },\n    });\n  }\n  getSurveys(limit?, start?, key?) {\n    return this.apollo.watchQuery({\n      query: getSurveys,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        limit: limit,\n        start: start,\n        key: key ? key : undefined,\n      },\n    });\n  }\n  getSmsCampaigns(page?, pageSize?, id?) {\n    return this.apollo.watchQuery({\n      query: getSmsCampaigns,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        id: id,\n      },\n    });\n  }\n  createSMSCampaign(data) {\n    return this.apollo.mutate({\n      mutation: createSMSCampaign,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        message: data.message,\n        state: data.state ? data.state : undefined,\n        lga: data.lga ? data.lga : undefined,\n        area: data.area ? data.area : undefined,\n        village: data.village ? data.village : undefined,\n        isAllFarmers: !data.isAllFarmers,\n      },\n    });\n  }\n  getSurveyResults(id) {\n    return this.apollo.watchQuery({\n      query: getSurveyResults,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        limit: 10000,\n        id: id,\n      },\n    });\n  }\n  createSurveys(SurveyTitle, SurveyDescription, Fields) {\n    return this.apollo.mutate({\n      mutation: CreateSurveys,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        SurveyTitle: SurveyTitle,\n        SurveyDescription: SurveyDescription,\n        Fields: Fields,\n      },\n    });\n  }\n  deleteSurvey(id) {\n    return this.apollo.mutate({\n      mutation: deleteSurvey,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  getChatMessages(id) {\n    return this.apollo.watchQuery({\n      query: getChatMessages,\n      variables: {\n        id: id,\n      },\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getFarmDemos(page?, pageSize?) {\n    return this.apollo.watchQuery({\n      query: FarmDemosQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        page: page,\n        pageSize: pageSize,\n      },\n    });\n  }\n  getSingleFarmDemo(id) {\n    return this.apollo.watchQuery({\n      query: FarmDemoQuery,\n      variables: {\n        id: id,\n      },\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getCrops(page?, pageSize?, searchTerm?) {\n    return this.apollo.watchQuery({\n      query: CropsQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        searchTerm: searchTerm,\n      },\n    });\n  }\n  getStates(page?, pageSize?, searchTerm?) {\n    return this.apollo.watchQuery({\n      query: StatesQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        searchTerm: searchTerm\n      },\n    });\n  }\n  getLGAs(page?, pageSize?, searchTerm?, id?) {\n    return this.apollo.watchQuery({\n      query: LGAquery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n        page: page,\n        pageSize: pageSize,\n        searchTerm: searchTerm,\n      },\n    });\n  }\n  getVillages(page?, pageSize?, searchTerm?, id?) {\n    return this.apollo.watchQuery({\n      query: Villagesquery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n        page: page,\n        pageSize: pageSize,\n        searchTerm: searchTerm,\n      },\n    });\n  }\n  getAreas(page?, pageSize?, searchTerm?, id?) {\n    return this.apollo.watchQuery({\n      query: Areasquery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n        page: page,\n        pageSize: pageSize,\n        searchTerm: searchTerm,\n      },\n    });\n  }\n  getMarkets(page?, pageSize?,  searchTerm?, id?) {\n    return this.apollo.watchQuery({\n      query: MarketQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n        page: page,\n        pageSize: pageSize,\n        searchTerm: searchTerm,\n      },\n    });\n  }\n  getCropPrices(page?, pageSize?, PublicationState?, publishedAt?, Rejected?) {\n    return this.apollo.watchQuery({\n      query: CropPricesQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        publicationState: PublicationState,\n        publishedAt: publishedAt,\n        Rejected: Rejected,\n      },\n    });\n  }\n  getRetailers(page?, pageSize?, confirmed?, blocked?) {\n    return this.apollo.watchQuery({\n      query: RetailerQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        confirmed: confirmed,\n        blocked: blocked,\n      },\n    });\n  }\n  getRetailerCategories() {\n    return this.apollo.watchQuery({\n      query: getRetailerCategories,\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getUsers(page?, pageSize?, UserType?) {\n\n    let variables = {\n      page: page,\n      pageSize: pageSize,\n    };\n\n    if (UserType != null) {\n      variables[\"UserType\"] = UserType;\n    }\n\n    return this.apollo.watchQuery({\n      query: UsersQuery,\n      fetchPolicy: \"no-cache\",\n      variables: variables,\n    });\n  }\n  getUsersLarge(UserType?, data?) {\n    return this.apollo.watchQuery({\n      query: queryUsersLarge,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        UserType: UserType,\n        village: data.village ? data.village : null,\n        lga: data.lga ? data.lga : null,\n        area: data.area ? data.area : null,\n        state: data.state ? data.state : null,\n      },\n    });\n  }\n  getsoilTests(page?, pageSize?) {\n    return this.apollo.watchQuery({\n      query: SoilTestQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        page: page,\n        pageSize: pageSize,\n      },\n    });\n  }\n  getsingleSoilTests(id) {\n    return this.apollo.watchQuery({\n      query: SingleSoilTestQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n      },\n    });\n  }\n  getsingleRetailer(id) {\n    return this.apollo.watchQuery({\n      query: GetSingleRetailerQuery,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n      },\n    });\n  }\n\n  AddFarmdemo(farmdemo) {\n    return this.apollo.mutate({\n      mutation: AddFarmDemoMutation,\n      variables: {\n        farmer: farmdemo.Farmer,\n        latitude: parseFloat(farmdemo.FarmLocationLatitude),\n        longitude: parseFloat(farmdemo.FarmLocationLongitude),\n        lga: farmdemo.lga,\n        state: farmdemo.state,\n        crop: farmdemo.Crops,\n        area: farmdemo.AreaOfField,\n        farmerPractise: farmdemo.ComponentFarmDemoFarmDemoPractiseInput,\n        indoramaPractise: farmdemo.ComponentFarmDemoFarmDemoPractiseInput,\n        dateOfHarvesting: farmdemo.dateOfHarvesting,\n        season: farmdemo.Season,\n        Status: farmdemo.Status,\n        isPesticidesUsed: farmdemo.isPesticidesUsed == \"true\" ? true : false,\n        images: farmdemo.images,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n\n  AddStates(state) {\n    return this.apollo.mutate({\n      mutation: StatesMutation,\n      variables: {\n        Name: state.state,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddLGA(lga) {\n    return this.apollo.mutate({\n      mutation: LGAmutation,\n      variables: {\n        Name: lga.lga,\n        state: lga.state,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddArea(area) {\n    return this.apollo.mutate({\n      mutation: AreaMutation,\n      variables: {\n        Name: area.area,\n        lga: area.lga,\n        PostalCode: area.PostalCode,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddMarket(market) {\n    return this.apollo.mutate({\n      mutation: MarketMutation,\n      variables: {\n        Name: market.market,\n        state: market.state,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddCrop(crop, image) {\n    return this.apollo.mutate({\n      mutation: CropsMutation,\n      variables: {\n        Name: crop.crop,\n        image: image,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  Addvillage(village) {\n    return this.apollo.mutate({\n      mutation: VillageMutation,\n      variables: {\n        Name: village.village,\n        area: village.area,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddCropPrice(price, image) {\n    return this.apollo.mutate({\n      mutation: CropPriceMutation,\n      variables: {\n        crop: price.crop,\n        price: parseFloat(price.Price),\n        unit: price.Unit,\n        state: price.state,\n        market: price.market,\n        image: image,\n        user: parseInt(localStorage.getItem(\"uid\")),\n        published: new Date(),\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddIndoramaUpdates(price, imageid) {\n    return this.apollo.mutate({\n      mutation: CreateIndoramaUpdates,\n      variables: {\n        Title: price.Title,\n        Body: price.Body,\n        Images: imageid ? imageid : price.Image,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  createBestCropPractise(price, imageid, media) {\n    return this.apollo.mutate({\n      mutation: CreateBestCropPractices,\n      variables: {\n        crop: price.crop,\n        content: price.content,\n        cropImage: imageid,\n        media: media,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  createMarketplaceProduct(price, imageid) {\n    return this.apollo.mutate({\n      mutation: CreateMarketplaceProduct,\n      variables: {\n        itemName: price.itemName,\n        images: imageid,\n        userId: price.userId,\n        contactNumber: String(price.contactNumber),\n        price: price.price,\n        availableQty: parseInt(price.availableQty),\n        unit: price.unit,\n        category: parseInt(price.category),\n        description: price.description,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  updateMarketplaceProduct(price, id, imageid?) {\n    return this.apollo.mutate({\n      mutation: UpdateMarketplaceProduct,\n      variables: {\n        id: id,\n        itemName: price.itemName,\n        images: imageid,\n        // userId: price.userId,\n        contactNumber: String(price.contactNumber),\n        price: price.price,\n        availableQty: parseInt(price.availableQty),\n        unit: price.unit,\n        category: parseInt(price.category),\n        description: price.description,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  updateMarketplaceProductImg(id, imageid?) {\n    return this.apollo.mutate({\n      mutation: UpdateMarketplaceProductImg,\n      variables: {\n        id: id,\n        images: imageid,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  createActivity(price) {\n    return this.apollo.mutate({\n      mutation: CreateActivities,\n      variables: {\n        FarmerName: price.FarmerName ? price.FarmerName : undefined,\n        Date: price.Date,\n        Latitude: parseFloat(price.Latitude),\n        Longitude: parseFloat(price.Longitude),\n        NoOfAttendees: parseInt(price.NoOfAttendees),\n        crop: price.crop ? price.crop : undefined,\n        ConditionOfCrop: price.ConditionOfCrop\n          ? price.ConditionOfCrop\n          : undefined,\n        PlannedFarmDay: price.PlannedFarmDay ? price.PlannedFarmDay : undefined,\n        Reason: price.Reason,\n        area: price.area,\n        ActivityType: price.ActivityType,\n        Time: price.Time,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getAgronomist(id?) {\n    return this.apollo.watchQuery({\n      query: getAgronomist,\n      variables: {\n        user: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getIndoramaUpdates(id?, page?, pageSize?) {\n    return this.apollo.watchQuery({\n      query: getIndoramaUpdates,\n      variables: {\n        id: id,\n        isActive: true,\n        isDelete: false,\n        page: page,\n        pageSize: pageSize,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getMarketplace(pageNumber?, pageSize?, categoryFilter?) {\n    return this.apollo.watchQuery({\n      query: GetMarketplace,\n      variables: {\n        pageNumber: pageNumber,\n        pageSize: pageSize,\n        categoryFilter: categoryFilter,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getSingleMarketplaceProduct(id) {\n    return this.apollo.watchQuery({\n      query: GetMarketplaceSingleProduct,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getBestCropPractises(page?, pageSize?, cropFilter?) {\n    return this.apollo.watchQuery({\n      query: GetBestCropPractices,\n      variables: {\n        page: page,\n        pageSize: pageSize,\n        cropFilter: cropFilter,\n      },\n      errorPolicy: \"all\",\n      // fetchPolicy: \"no-cache\",\n    });\n  }\n  getActivities(page?, pageSize?) {\n    return this.apollo.watchQuery({\n      query: GetActivities,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        page: page,\n        pageSize: pageSize,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  getActivity(id?) {\n    return this.apollo.watchQuery({\n      query: GetSingleActivity,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  getMarketplaceCategories(id?) {\n    return this.apollo.watchQuery({\n      query: GetMarketplaceCategories,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  createAgronomist(data, id) {\n    return this.apollo.mutate({\n      mutation: CreateAgronomist,\n      variables: {\n        areas: data.area,\n        user: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateCropPrice(price, id, imageid, Rejected?, published?) {\n    return this.apollo.mutate({\n      mutation: UpdateCropPriceMutation,\n      variables: {\n        id: id,\n        crop: price?.crop,\n        price: price?.Price ? parseFloat(price?.Price) : undefined,\n        unit: price?.Unit,\n        state: price?.state,\n        market: price?.market,\n        published: published,\n        Rejected: Rejected,\n        image: imageid ? imageid : price?.Image,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddSoilTestResult(result) {\n    return this.apollo.mutate({\n      mutation: AddSoilTestResult,\n      variables: {\n        soilTestSampleID: result.soil_test_sample,\n        zinc: result.ZincObserved,\n        boron: result.BoronObserved,\n        iron: result.IronObserved,\n        calcium: result.CalciumObserved,\n        Carbon: result.OrganicCarbonObserved,\n        phosphorous: result.PhosphorousObserved,\n        magnesium: result.MagnesiumObserved,\n        ph: result.phObserved,\n        copper: result.CopperObserved,\n        Nitrogen: result.TotalNitrogenObserved,\n        manganese: result.ManganeseObserved,\n        pottassium: result.PotassiumObserved,\n        sulphur: result.SulphurObserved,\n        RecommendedNPKQty: result.RecommendedNPKQty,\n        RecommendedUreaQty: result.RecommendedUreaQty,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateSoilTestResult(result) {\n    return this.apollo.mutate({\n      mutation: UpdateSoilTestResult,\n      variables: {\n        id: result.id,\n        zinc: result.ZincObserved,\n        boron: result.BoronObserved,\n        iron: result.IronObserved,\n        calcium: result.CalciumObserved,\n        Carbon: result.OrganicCarbonObserved,\n        phosphorous: result.PhosphorousObserved,\n        magnesium: result.MagnesiumObserved,\n        ph: result.phObserved,\n        copper: result.CopperObserved,\n        Nitrogen: result.TotalNitrogenObserved,\n        manganese: result.ManganeseObserved,\n        pottassium: result.PotassiumObserved,\n        sulphur: result.SulphurObserved,\n        RecommendedNPKQty: result.RecommendedNPKQty,\n        RecommendedUreaQty: result.RecommendedUreaQty,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateCrop(crop, id, Imageid) {\n    return this.apollo.mutate({\n      mutation: UpdateCrops,\n      variables: {\n        Name: crop.crop,\n        isDelete: crop.isDelete,\n        id: id,\n        image: Imageid,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateState(data, id) {\n    return this.apollo.mutate({\n      mutation: UpdateState,\n      variables: {\n        Name: data.state,\n        isDelete: data.isDelete,\n        id: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateLGA(data, id) {\n    return this.apollo.mutate({\n      mutation: UpdateLGA,\n      variables: {\n        Name: data.lga,\n        state: data.state,\n        isDelete: data.isDelete,\n        id: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateMarket(data, id) {\n    return this.apollo.mutate({\n      mutation: UpdateMarket,\n      variables: {\n        Name: data.market,\n        state: data.state,\n        isDelete: data.isDelete,\n        id: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateArea(area, id) {\n    return this.apollo.mutate({\n      mutation: UpdateArea,\n      variables: {\n        Name: area.area,\n        lga: area.lga,\n        PostalCode: area.PostalCode,\n        isDelete: area.isDelete,\n        id: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  Updatevillage(village, id) {\n    return this.apollo.mutate({\n      mutation: UpdateVillage,\n      variables: {\n        Name: village.village,\n        area: village.area,\n        isDelete: village.isDelete,\n        id: id,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateSoilTest(test, soilTestId) {\n    return this.apollo.mutate({\n      mutation: UpdateSoilTest,\n      variables: {\n        soilTestId: soilTestId,\n        contactNumber: test.ContactNumber,\n        preferredCollectionDate: test.PreferredCollectionDate,\n        reason: test.ReasonForSoilTest,\n        farmerID: test.Farmer,\n        areaID: test.area,\n        lgaID: test.lga,\n        soilTestDisplayID: test.soilTestDisplayID,\n        status: test.Status,\n        nutrient: test.nutrient,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateFarmDemo(data, id) {\n    return this.apollo.mutate({\n      mutation: UpdateFarmDemo,\n      variables: {\n        id: id,\n        farmer: data.Farmer,\n        longitude: parseFloat(data.FarmLocationLongitude),\n        latitude: parseFloat(data.FarmLocationLatitude),\n        lga: data.lga,\n        state: data.state,\n        crop: data.Crops,\n        area: data.AreaOfField,\n        farmerPractise: {\n          Yield: parseFloat(data.Yield_F),\n          DateOfSowing: data.DateOfSowing_F,\n          DateOfDemonstration: data.DateOfDemonstration_F,\n          FirstUreaApplication: data.FirstUreaApplication_F,\n          SecondUreaApplication: data.SecondUreaApplication_F,\n        },\n        indoramaPractise: {\n          Yield: parseFloat(data.Yield_I),\n          DateOfSowing: data.DateOfSowing_I,\n          DateOfDemonstration: data.DateOfDemonstration_I,\n          FirstUreaApplication: data.FirstUreaApplication_I,\n          SecondUreaApplication: data.SecondUreaApplication_I,\n        },\n        // isPesticidesUsed: data.isPesticidesUsed,\n        images: data.images,\n        season: data.Season,\n        Status: data.Status,\n        dateOfHarvesting: data.DateOfHarvesting,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateRetailer(data, id) {\n    return this.apollo.mutate({\n      mutation: updateRetailerQuery,\n      variables: {\n        id: id,\n        categories: data.retailer_categories,\n        name: data.Name,\n        latitude: data.Latitude ? parseFloat(data.Latitude) : undefined,\n        longitude: data.Longitude ? parseFloat(data.Longitude) : undefined,\n        village: data.village,\n        password: data.password ? data.password : undefined,\n        lga: data.lga,\n        bio: data.Bio,\n        agronomist_lgas: data.agronomist_lgas,\n        blocked: data.blocked == \"true\" ? true : false,\n        confirmed: data.confirmed,\n        UserType: data?.UserType,\n        contactNumber: data.ContactNumber,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateRetailerPic(id, image) {\n    return this.apollo.mutate({\n      mutation: updateRetailerProfPic,\n      variables: {\n        id: id,\n        prof_pic: image,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  AddFarmdemoPic(id, image) {\n    return this.apollo.mutate({\n      mutation: UpdateFarmDemo,\n      variables: {\n        id: id,\n        images: image,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  addRetailerProducts(data, retailer_category, retailer, image) {\n    return this.apollo.mutate({\n      mutation: createdRetailerProducts,\n      variables: {\n        ItemName: data.itemName,\n        Price: parseInt(data.price),\n        Unit: data.unit,\n        Images: image,\n        isApproved: true,\n        retailer_category: retailer_category,\n        retailers: retailer,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateRetailerProducts(data, retailer_category, retailer) {\n    return this.apollo.mutate({\n      mutation: updateRetailerProducts,\n      variables: {\n        productId: data.id,\n        itemName: data.itemName,\n        price: parseInt(data.price),\n        unit: data.unit,\n        // images: data.,\n        isApproved: true,\n        retailer_category: retailer_category,\n        retailer: retailer,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  UpdateIndoramaUpdates(price?, id?, imageid?) {\n    return this.apollo.mutate({\n      mutation: UpdateIndoramaUpdates,\n      variables: {\n        id: id,\n        Title: price?.Title,\n        isDelete: price?.isDelete,\n        Body: price?.Body,\n        Images: imageid ? imageid : price?.Image,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  updateActivity(price, id) {\n    return this.apollo.mutate({\n      mutation: UpdateActivity,\n      variables: {\n        id: id,\n        FarmerName: price.FarmerName,\n        Date: price.Date,\n        Latitude: parseFloat(price.Latitude),\n        Longitude: parseFloat(price.Longitude),\n        NoOfAttendees: parseInt(price.NoOfAttendees),\n        crop: price.crop,\n        ConditionOfCrop: price.ConditionOfCrop,\n        PlannedFarmDay: price.PlannedFarmDay,\n        Reason: price.Reason,\n        area: price.area,\n        ActivityType: price.ActivityType,\n        Time: price.Time,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  upload(file: any): Observable<any> {\n    const formData = new FormData();\n    for (var i = 0; i < file.length; i++) {\n      // formData.append(\"file[]\",  file[i]);\n      formData.append(\"files\", file[i], file[i]?.name);\n    }\n    // formData.append(\"files\", file, file?.name);\n    console.log(formData);\n    const httpOptions1: Object = {\n      observe: \"response\",\n    };\n    return this.http.post(this.baseURL + `/api/upload`, formData, httpOptions1);\n  }\n  uploadActivities(file: any): Observable<any> {\n    const formData = new FormData();\n    for (var i = 0; i < file.length; i++) {\n      // formData.append(\"file[]\",  file[i]);\n      formData.append(\"file\", file[i], file[i]?.name);\n    }\n    // formData.append(\"files\", file, file?.name);\n    console.log(formData);\n    const httpOptions1: Object = {\n      observe: \"response\",\n    };\n    return this.http.post(\n      this.baseURL + `/api/activity/upload`,\n      formData,\n      httpOptions1\n    );\n  }\n  deleteArea(id) {\n    return this.apollo.mutate({\n      mutation: DeleteAreaMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteVillage(id) {\n    return this.apollo.mutate({\n      mutation: DeleteVillageMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteLGA(id) {\n    return this.apollo.mutate({\n      mutation: DeleteLGAMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteState(id) {\n    return this.apollo.mutate({\n      mutation: DeleteStatesMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteMarket(id) {\n    return this.apollo.mutate({\n      mutation: DeleteMarketMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteCrop(id) {\n    return this.apollo.mutate({\n      mutation: DeleteCropMutation,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteFarmDemo(id) {\n    return this.apollo.mutate({\n      mutation: DeleteFarmdemo,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteProduct(id) {\n    return this.apollo.mutate({\n      mutation: DeleteRetailerProduct,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteFile(id) {\n    return this.apollo.mutate({\n      mutation: DeleteFile,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteUser(id) {\n    return this.apollo.mutate({\n      mutation: DeleteUser,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteBestPractice(id) {\n    return this.apollo.mutate({\n      mutation: DeleteBestPractice,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  deleteActivity(id) {\n    return this.apollo.mutate({\n      mutation: DeleteActivity,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  DeleteMarketplaceProduct(id) {\n    return this.apollo.mutate({\n      mutation: DeleteMarketplaceProduct,\n      variables: {\n        id: id,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n  getDashboardAd() {\n    return this.apollo.watchQuery({\n      query: getDashboardAd,\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  getRetailerAd() {\n    return this.apollo.watchQuery({\n      query: getRetailerAd,\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  updateRetailerAd(url, image) {\n    return this.apollo.mutate({\n      mutation: updateRetailerAd,\n      variables: {\n        // clickUrl: url,\n        imageId: image,\n      },\n      errorPolicy: \"all\",\n      fetchPolicy: \"no-cache\",\n    });\n  }\n  updateDashboardAd(url, image) {\n    return this.apollo.mutate({\n      mutation: updateDashboardAd,\n      fetchPolicy: \"no-cache\",\n      variables: {\n        // clickUrl: url,\n        imageId: image,\n      },\n      errorPolicy: \"all\",\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\n\r\nimport { IconSetService } from '@coreui/icons-angular';\r\nimport { freeSet } from '@coreui/icons';\r\n\r\n@Component({\r\n  // tslint:disable-next-line\r\n  selector: 'body',\r\n  template: '<router-outlet></router-outlet>',\r\n  providers: [IconSetService],\r\n})\r\nexport class AppComponent implements OnInit {\r\n  constructor(\r\n    private router: Router,\r\n    public iconSet: IconSetService\r\n  ) {\r\n    // iconSet singleton\r\n    iconSet.icons = { ...freeSet };\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.router.events.subscribe((evt) => {\r\n      if (!(evt instanceof NavigationEnd)) {\r\n        return;\r\n      }\r\n      window.scrollTo(0, 0);\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\r\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AgGridModule } from 'ag-grid-angular';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\n\r\nimport { AppComponent } from './app.component';\r\n// Import containers\r\nimport { DefaultLayoutComponent } from './containers';\r\nimport { P404Component } from './views/error/404.component';\r\nimport { P500Component } from './views/error/500.component';\r\nimport { LoginComponent } from './views/login/login.component';\r\n\r\n// const APP_CONTAINERS = [\r\n//   DefaultLayoutComponent\r\n// ];\r\n\r\nimport {\r\n  AppAsideModule,\r\n  AppBreadcrumbModule,\r\n  AppHeaderModule,\r\n  AppFooterModule,\r\n  AppSidebarModule,\r\n} from '@coreui/angular';\r\n\r\n// Import routing module\r\nimport { AppRoutingModule } from './app.routing';\r\n// Import 3rd party components\r\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\r\n// import { TabsModule } from 'ngx-bootstrap/tabs';\r\nimport { GraphQLModule } from './graphql.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    AgGridModule.withComponents([]),\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    AppRoutingModule,\r\n    AppAsideModule,\r\n    AppBreadcrumbModule.forRoot(),\r\n    ToastrModule.forRoot(),\r\n    AppFooterModule,\r\n    AppHeaderModule,\r\n    NgSelectModule,\r\n    AppSidebarModule,\r\n    BsDropdownModule.forRoot(),\r\n    GraphQLModule,\r\n  ],\r\n  declarations: [\r\n    AppComponent,\r\n    P404Component,\r\n    P500Component,\r\n    LoginComponent,\r\n    DefaultLayoutComponent,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: LocationStrategy,\r\n      useClass: HashLocationStrategy\r\n    },\r\n  ],\r\n  bootstrap: [ AppComponent ]\r\n})\r\nexport class AppModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n// Import Containers\r\nimport { DefaultLayoutComponent } from './containers';\r\nimport { P404Component } from './views/error/404.component';\r\nimport { P500Component } from './views/error/500.component';\r\nimport { LoginComponent } from './views/login/login.component';\r\nimport { AuthGuard } from './views/login/auth.guard';\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'dashboard',\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: '404',\r\n    component: P404Component,\r\n    data: {\r\n      title: 'Page 404'\r\n    }\r\n  },\r\n  {\r\n    path: '500',\r\n    component: P500Component,\r\n    data: {\r\n      title: 'Page 500'\r\n    }\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n    data: {\r\n      title: 'Login Page'\r\n    }\r\n  },\r\n  {\r\n    path: '',\r\n    component: DefaultLayoutComponent,\r\n    data: {\r\n      title: 'Home'\r\n    },\r\n    canActivate: [AuthGuard],\r\n    children: [\r\n      {\r\n        path: 'sms-campaigns',\r\n        loadChildren: () => import('./views/sms-campaigns/sms-campaigns.module').then(m => m.SMSCampaignsModule)\r\n      },\r\n      {\r\n        path: 'farmdemo',\r\n        loadChildren: () => import('./views/farm-demo/farm-demo.module').then(m => m.FarmDemoModule)\r\n      },\r\n      {\r\n        path: 'chat',\r\n        loadChildren: () => import('./views/chat/chat.module').then(m => m.ChatModule)\r\n      },\r\n      {\r\n        path: 'activities',\r\n        loadChildren: () => import('./views/activities/activities.module').then(m => m.ActivitiesModule)\r\n      },\r\n      {\r\n        path: 'surveys',\r\n        loadChildren: () => import('./views/surveys/surveys.module').then(m => m.SurveysModule)\r\n      },\r\n      {\r\n        path: 'marketplace',\r\n        loadChildren: () => import('./views/marketplace/marketplace.module').then(m => m.MarketplaceModule)\r\n      },\r\n      {\r\n        path: 'best-crop-practices',\r\n        loadChildren: () => import('./views/best-crop-practices/best-crop-practices.module').then(m => m.BestCropPracticesModule)\r\n      },\r\n      {\r\n        path: 'indorama_updates',\r\n        loadChildren: () => import('./views/indorama-updates/indorama-updates.module').then(m => m.IndoramaUpdatesModule)\r\n      },\r\n      {\r\n        path: 'soiltest',\r\n        loadChildren: () => import('./views/soil-test/soil-test.module').then(m => m.SoilTestModule)\r\n      },\r\n      {\r\n        path: 'cropprices',\r\n        loadChildren: () => import('./views/crop-prices/crop-prices.module').then(m => m.CropPricesModule)\r\n      },\r\n      {\r\n        path: 'dashboard',\r\n        loadChildren: () => import('./views/dashboard/dashboard.module').then(m => m.DashboardModule)\r\n      },\r\n      {\r\n        path: 'advertisement',\r\n        loadChildren: () => import('./views/advertisement/advertisement.module').then(m => m.AdvertisementModule)\r\n      },\r\n      {\r\n        path: 'retailers',\r\n        loadChildren: () => import('./views/retailers/retailers.module').then(m => m.RetailersModule)\r\n      },\r\n      {\r\n        path: 'users',\r\n        loadChildren: () => import('./views/users/users.module').then(m => m.UsersModule)\r\n      },\r\n      {\r\n        path: 'masters',\r\n        loadChildren: () => import('./views/masters/masters.module').then(m => m.MastersModule)\r\n      }\r\n    ]\r\n  },\r\n  { path: '**', component: P404Component }\r\n];\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' }) ],\r\n  exports: [ RouterModule ]\r\n})\r\nexport class AppRoutingModule {}\r\n","import { INavData } from \"@coreui/angular\";\r\n\r\nexport const navItems = [\r\n  // {\r\n  //   name: \"Dashboard\",\r\n  //   url: \"/dashboard\",\r\n  //   icon: \"icon-speedometer\",\r\n  //   role: \"\",\r\n  // },\r\n  {\r\n    name: \"Activities\",\r\n    url: \"/activities/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"Admin\",\r\n  },\r\n  {\r\n    name: \"Marketplace\",\r\n    url: \"/marketplace/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"Admin\",\r\n  },\r\n  {\r\n    name: \"Indorama Updates\",\r\n    url: \"/indorama_updates/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"Admin\",\r\n  },\r\n  {\r\n    name: \"SMS Campaigns\",\r\n    url: \"/sms-campaigns/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"Admin\",\r\n  },\r\n  {\r\n    name: \"Farm Demo\",\r\n    url: \"/farmdemo/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"Admin\",\r\n  },\r\n  {\r\n    name: \"Soil Analysis\",\r\n    url: \"/soiltest/customers\",\r\n    icon: \"icon-cursor\",\r\n    role: \"Admin\",\r\n  },\r\n  {\r\n    name: \"Crop Prices\",\r\n    url: \"/cropprices/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"Admin\",\r\n  },\r\n  {\r\n    name: \"Retailers\",\r\n    url: \"/retailers/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"\",\r\n  },\r\n  {\r\n    name: \"Users\",\r\n    url: \"/users/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"Admin\",\r\n  },\r\n  {\r\n    name: \"Best crop practices\",\r\n    url: \"/best-crop-practices/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"Admin\",\r\n  },\r\n  {\r\n    name: \"Surveys\",\r\n    url: \"/surveys/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"Admin\",\r\n  },\r\n  {\r\n    name: \"Chat\",\r\n    url: \"/chat/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"Admin\",\r\n  },\r\n  {\r\n    name: \"Advertisement\",\r\n    url: \"/advertisement/all\",\r\n    icon: \"icon-cursor\",\r\n    role: \"Admin\",\r\n  },\r\n  {\r\n    name: \"Masters\",\r\n    url: \"/soiltest/enquiries\",\r\n    icon: 'icon-cursor',\r\n    role: \"Admin\",\r\n    children: [\r\n      {\r\n        name: \"States\",\r\n        url: \"/masters/States\",\r\n      },\r\n      {\r\n        name: \"LGA\",\r\n        url: \"/masters/LGA\",\r\n      },\r\n      {\r\n        name: \"City\",\r\n        url: \"/masters/Cities\",\r\n      },\r\n      {\r\n        name: \"Villages\",\r\n        url: \"/masters/Villages\",\r\n      },\r\n      {\r\n        name: \"Markets\",\r\n        url: \"/masters/Markets\",\r\n      },\r\n      {\r\n        name: \"Crops\",\r\n        url: \"/masters/Crops\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  templateUrl: '500.component.html'\r\n})\r\nexport class P500Component {\r\n\r\n  constructor() { }\r\n\r\n}\r\n","export default \"<app-header [navbarBrandRouterLink]=\\\"['/dashboard']\\\" [fixed]=\\\"true\\\"\\r\\n  [navbarBrandFull]=\\\"{src: 'assets/img/brand/logo_new.png',width:200,alt: 'CartIntoCar Logo'}\\\"\\r\\n  [navbarBrandMinimized]=\\\"{src: 'assets/img/brand/logo_new.png', width: 200, alt: 'CartIntoCar Logo'}\\\"\\r\\n  [sidebarToggler]=\\\"'lg'\\\">\\r\\n  <ul class=\\\"nav navbar-nav ml-auto\\\">\\r\\n    {{userName}}\\r\\n    <li class=\\\"nav-item dropdown\\\" dropdown placement=\\\"bottom right\\\">\\r\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"dropdown\\\" href=\\\"#\\\" role=\\\"button\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\"\\r\\n        dropdownToggle (click)=\\\"false\\\">\\r\\n        <img src=\\\"assets/img/avatars/6.png\\\" class=\\\"img-avatar\\\" alt=\\\"admin@bootstrapmaster.com\\\" />\\r\\n      </a>\\r\\n      <div class=\\\"dropdown-menu dropdown-menu-right\\\" *dropdownMenu aria-labelledby=\\\"simple-dropdown\\\">\\r\\n        <div class=\\\"dropdown-header text-center\\\"><strong>Settings</strong></div>\\r\\n        <a class=\\\"dropdown-item\\\"><i class=\\\"fa fa-user\\\"></i>{{userName}}</a>\\r\\n        <div class=\\\"divider\\\"></div>\\r\\n        <a class=\\\"dropdown-item\\\" (click)=\\\"logout()\\\"><i class=\\\"fa fa-lock\\\"></i> Logout</a>\\r\\n      </div>\\r\\n    </li>\\r\\n  </ul>\\r\\n</app-header>\\r\\n<div class=\\\"app-body\\\">\\r\\n  <app-sidebar #appSidebar [fixed]=\\\"true\\\" [display]=\\\"'lg'\\\" [minimized]=\\\"sidebarMinimized\\\"\\r\\n    (minimizedChange)=\\\"toggleMinimize($event)\\\">\\r\\n    <app-sidebar-nav [navItems]=\\\"navItems\\\"></app-sidebar-nav>\\r\\n    <!-- <app-sidebar-minimizer></app-sidebar-minimizer> -->\\r\\n  </app-sidebar>\\r\\n  <!-- Main content -->\\r\\n  <main class=\\\"main\\\">\\r\\n    <cui-breadcrumb>\\r\\n    </cui-breadcrumb>\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n      <router-outlet></router-outlet>\\r\\n    </div>\\r\\n  </main>\\r\\n</div>\\r\\n<app-footer>\\r\\n  <span><a>Indorama Agronomy App</a> &copy; 2022 Untangle_</span>\\r\\n  <!-- <span class=\\\"ml-auto\\\">Powered by <a href=\\\"https://www.upsquad.in\\\">upsquad</a></span> -->\\r\\n</app-footer>\";","export default \"<div class=\\\"app flex-row align-items-center\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row justify-content-center\\\">\\r\\n      <div class=\\\"col-md-6\\\">\\r\\n        <div class=\\\"clearfix\\\">\\r\\n          <h1 class=\\\"float-left display-3 mr-4\\\">404</h1>\\r\\n          <h4 class=\\\"pt-3\\\">Oops! You're lost.</h4>\\r\\n          <p class=\\\"text-muted\\\">The page you are looking for was not found.</p>\\r\\n        </div>\\r\\n        <div class=\\\"input-prepend input-group\\\">\\r\\n          <div class=\\\"input-group-prepend\\\">\\r\\n            <span class=\\\"input-group-text\\\"><i class=\\\"fa fa-search\\\"></i></span>\\r\\n          </div>\\r\\n          <input id=\\\"prependedInput\\\" class=\\\"form-control\\\" size=\\\"16\\\" type=\\\"text\\\" placeholder=\\\"What are you looking for?\\\">\\r\\n          <span class=\\\"input-group-append\\\">\\r\\n            <button class=\\\"btn btn-info\\\" type=\\\"button\\\">Search</button>\\r\\n          </span>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \"<!-- <div class=\\\"app-body bg-image\\\">\\r\\n  <main class=\\\"main d-flex align-items-center\\\" style=\\\"background-color: rgba(0, 0, 0, 0.8);\\\">\\r\\n    <div class=\\\"login-box\\\">\\r\\n      <div class=\\\"card p-4\\\" style=\\\"width: fit-content;\\\">\\r\\n        <div class=\\\"card-body\\\">\\r\\n          <form>\\r\\n            <h1>Login</h1>\\r\\n            <p class=\\\"text-muted\\\">Welcome back! Please log in to your account</p>\\r\\n            <div class=\\\"input-group mb-3\\\">\\r\\n              <div class=\\\"input-group-prepend\\\">\\r\\n                <span class=\\\"input-group-text\\\"><i class=\\\"icon-user\\\"></i></span>\\r\\n              </div>\\r\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Username\\\" autocomplete=\\\"username\\\" required>\\r\\n            </div>\\r\\n            <div class=\\\"input-group mb-4\\\">\\r\\n              <div class=\\\"input-group-prepend\\\">\\r\\n                <span class=\\\"input-group-text\\\"><i class=\\\"icon-lock\\\"></i></span>\\r\\n              </div>\\r\\n              <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\" autocomplete=\\\"current-password\\\"\\r\\n                required>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-6\\\">\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary px-4\\\">Login</button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </form>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </main>\\r\\n</div> -->\\r\\n<!-- <div class=\\\"bg-image\\\"> -->\\r\\n<div class=\\\"d-md-flex h-md-100 align-items-center\\\">\\r\\n  <div class=\\\"col-md-6 p-0 bg-black h-md-100 login-screen\\\">\\r\\n    <div\\r\\n      class=\\\"text-white d-md-flex align-items-center h-100 text-center justify-content-center\\\"\\r\\n    >\\r\\n      <div class=\\\"container-fluid bg-image\\\" style=\\\"height: 100vh\\\"></div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"col-md-6 p-0 bg-white h-md-100\\\">\\r\\n    <div class=\\\"d-md-flex align-items-center h-md-100 justify-content-center\\\">\\r\\n      <div class=\\\"container-fluid fallback-image\\\" style=\\\"height: 100vh\\\">\\r\\n        <form\\r\\n          class=\\\"login-box\\\"\\r\\n          #usForm=\\\"ngForm\\\"\\r\\n          (ngSubmit)=\\\"onSubmit()\\\"\\r\\n          style=\\\"background: #ffffff75; padding: 20px; border-radius: 10px\\\"\\r\\n        >\\r\\n          <img\\r\\n            src=\\\"assets/img/brand/logo_new.png\\\"\\r\\n            width=\\\"300\\\"\\r\\n            style=\\\"margin-bottom: 25px\\\"\\r\\n          />\\r\\n          <h3 class=\\\"mt-3\\\">Admin Panel</h3>\\r\\n          <p class=\\\"text-muted\\\">Welcome back! Please log in to your account</p>\\r\\n          <div class=\\\"input-group mb-3\\\">\\r\\n            <div class=\\\"input-group-prepend\\\">\\r\\n              <span class=\\\"input-group-text\\\"><i class=\\\"icon-user\\\"></i></span>\\r\\n            </div>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              placeholder=\\\"Username\\\"\\r\\n              id=\\\"login\\\"\\r\\n              maxlength=\\\"80\\\"\\r\\n              size=\\\"30\\\"\\r\\n              ngModel\\r\\n              value=\\\"\\\"\\r\\n              name=\\\"identifier\\\"\\r\\n              required\\r\\n            />\\r\\n          </div>\\r\\n          <div class=\\\"input-group mb-4\\\">\\r\\n            <div class=\\\"input-group-prepend\\\">\\r\\n              <span class=\\\"input-group-text\\\"><i class=\\\"icon-lock\\\"></i></span>\\r\\n            </div>\\r\\n            <input\\r\\n              type=\\\"password\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              placeholder=\\\"Password\\\"\\r\\n              id=\\\"password\\\"\\r\\n              size=\\\"30\\\"\\r\\n              ngModel\\r\\n              name=\\\"password\\\"\\r\\n              value=\\\"\\\"\\r\\n              required\\r\\n            />\\r\\n          </div>\\r\\n          <!-- <div class=\\\"row\\\"> -->\\r\\n          <!-- <div class=\\\"col-6\\\"> -->\\r\\n          <button\\r\\n            type=\\\"submit\\\"\\r\\n            class=\\\"btn btn-primary ml-2\\\"\\r\\n            [disabled]=\\\"loading\\\"\\r\\n            style=\\\"background-color: #108d51; color: white\\\"\\r\\n          >\\r\\n            <span\\r\\n              *ngIf=\\\"loading\\\"\\r\\n              class=\\\"spinner-border spinner-border-sm mr-1\\\"\\r\\n              role=\\\"status\\\"\\r\\n              aria-hidden=\\\"true\\\"\\r\\n            >\\r\\n            </span\\r\\n            >Login\\r\\n          </button>\\r\\n          <!-- </div> -->\\r\\n          <!-- </div> -->\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n<!-- </div> -->\\r\\n\";","import { Injectable } from '@angular/core';\r\nimport {\r\n  Router,\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { AuthenticationService } from './authentication.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const currentUser: any = this.authenticationService.currentUserValue;\r\n    if (currentUser) {\r\n      console.log(currentUser, 'authguard', route.data.roles);\r\n      // check if route is restricted by role\r\n      if (\r\n        route.data.roles &&\r\n        route.data.roles.indexOf(currentUser.user.UserType) === -1\r\n      ) {\r\n        // role not authorised so redirect to home page\r\n        this.router.navigate(['/500']);\r\n        console.log('authguard failed');\r\n        return false;\r\n      }\r\n      // authorised so return true\r\n      return true;\r\n    }\r\n    console.log(currentUser, 'authguard il kerilla', route.data.roles);\r\n    // not logged in so redirect to login page with the return url\r\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\r\n    return false;\r\n  }\r\n}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule, {\r\n  useJit: true,\r\n  preserveWhitespaces: true\r\n})\r\n  .catch(err => console.log(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}